using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;

using MTS.BLL.Interfaces;
using MTS.DAL.Interfaces;
using MTS.BLL.DTO.ModelsDTO;
using MTS.BLL.DTO.ReportsDTO;
using MTS.BLL.Infrastructure;
using System.IO;
using SpreadsheetGear;
using System.Diagnostics;
using System.Windows.Forms;
using MTS.DAL.Entities.ReportModel;
using FirebirdSql.Data.FirebirdClient;

using MTS.BLL.DTO.SelectedDTO;
using Words = Microsoft.Office.Interop.Word;
using System.Globalization;
using MTS.BLL.NameCaseLib;
using System.Text.RegularExpressions;
using Nager.Date;
using AutoMapper;
using MTS.DAL.Entities.Models;
using MTS.DAL.Entities.QueryModels;
using MTS.BLL.DTO; 



namespace MTS.BLL.Services
{
    public class ReportService : IReportService
    {
        private string GeneratedReportsDir = Utils.HomePath + @"\Temp\";

        private string GeneratedReportsDirTest = Utils.HomePathTemp + @"\Temp\";

        private Words._Application word;
        private Words._Document document;

        private IUnitOfWork Database { get; set; }

        //private IRepository<ACCOUNTS> accounts;
        //private IRepository<Bank_Payments> bankPayments;
        //private IRepository<BeginCredit> beginCredit;
        //private IRepository<BusinessTrips> businessTrips;
        //private IRepository<BusinessTripsReportByAccounts> bstReportByAccounts;
        //private IRepository<BusinessTripsReportByCurrency> bstReportByCurrency;
        //private IRepository<BusinessTripsReportByEmployees> bstReportByEmployees;
        //private IRepository<BusinessTripsReportByDepartments> bstReportByDepartments;
        //private IRepository<BusinessTripsReportPaymentsByAccountId> bstReportPaymentsByAccountId;
        //private IRepository<BusinessTripsReportPaymentsByPeriod> bstReportPaymentsByPeriod;
        //private IRepository<BusinessTripsReportPrepaymentsByAccountId> bstReportPrepaymentsByAccountId;
        //private IRepository<BusinessTripsReportPrepaymentsByAccountShort> businessTripsReportPrepaymentsByAccountShort;
        //private IRepository<BusinessTripsPaymentStatement> bstPaymentStatement;
        //private IRepository<BusinessTripsOrderCust> businessTripsOrderCust;
        
        //private IRepository<CashPaymentsReportByAccounts> cpReportByAccounts;
        //private IRepository<CashBookRecordJournalByYear> cashBookRecordJournalByYear;
        //private IRepository<CalcWithBuyersReport> calcWithBuyersReport;
        //private IRepository<CalcWithBuyersShortReport> calcWithBuyersShortReport;
        //private IRepository<CalcWithBuyersShortReport> calcWithBuyersSaldo;


        //private IRepository<Contractors> contractors;
        //private IRepository<ContractorVat> contractorsVat;
        //private IRepository<CustomerOrders> customerOrders;

        //private IRepository<BankPaymentsReportTrialBalance> bankPaymentsReportTrialBalance;
        //private IRepository<BankPaymentsReportForCustomBill> bankPaymentsReportForCustomBill;
        //private IRepository<BankPaymentsReportTrialBalanceQuarter> bankPaymentsReportTrialBalanceQuarter;
        //private IRepository<BankPaymentsReportTrialBalanceFull> bankPaymentsReportTrialBalanceFull;
        //private IRepository<BankPaymentsReportTrialBalanceAll313> bankPaymentsReportTrialBalanceAll313;
        //private IRepository<CashPaymentsSaldoBalance> cashPaymentsSaldoBalance;
        //private IRepository<CashPaymentsPeriodBalance> cashPaymentsPeriodBalance;
        //private IRepository<Invoices> invoices;

        
        //private IRepository<MsTrialBalanceCurrency> msTrialBalanceCurrency;
        //private IRepository<MsTrialBalance> msTrialBalance;
        //private IRepository<MsTrialBalanceByAccountsCurrency> msTrialBalanceByAccountsCurrency;
        //private IRepository<MsReconciliation> msReconciliation;
        //private IRepository<MsReconciliation681_36> msReconciliation681_36;
        //private IRepository<MSPaymentsWithoutVat> msPaymentWithoutVat;

        //private IRepository<StoreHouseTrialBalance> storeHouseTrialBalance;
        //private IRepository<StoreHouseInventory> storeHouseInventory;
        //private IRepository<TrialBalanceByAccountsReport> trialBalanceByAccountsReport;
        //private IRepository<ExpenditureForProjectReport> expenditureForProjectReport;
        //private IFixedAssetsOrderService fixedAssetsOrderService;
        //private IRepository<FixedAssetsOrderJournalPrint> fixedAssetsOrderJournalPrint;
        //private IRepository<ORDERS> orders;
        //private IRepository<OrdersInfo> ordersInfo;
        //private IRepository<AccountOrders> accountOrders;
        //private IRepository<VAT> vat;

        //private IRepository<DetalsReportByOperationContractors> detalsReportByOperationContractors;
        //private IRepository<OrderForDetalsContractor> orderForDetalsContractor;
        //private IRepository<GetBPDetalsReportByCon> bpDetalsReportByCon;

        //private IRepository<MtsNomenclatures> mtsNomenclatures;
        //private IRepository<MSTrialBalanceByAccounts> msTrialBalanceByAccount;
        //private IRepository<GetOSVkvartal_ForChess> getOSVkvartal_ForChess;


        

        private IMapper mapper;

        public ReportService(IUnitOfWork uow)
        {
            Database = uow;

            //accounts = Database.GetRepository<ACCOUNTS>();
            //beginCredit = Database.GetRepository<BeginCredit>();
            //bstReportByAccounts = Database.GetRepository<BusinessTripsReportByAccounts>();
            //bstReportByCurrency = Database.GetRepository<BusinessTripsReportByCurrency>();
            //bstReportByEmployees = Database.GetRepository<BusinessTripsReportByEmployees>();
            //bstReportByDepartments = Database.GetRepository<BusinessTripsReportByDepartments>();
            //bstReportPaymentsByAccountId = Database.GetRepository<BusinessTripsReportPaymentsByAccountId>();
            //bstReportPaymentsByPeriod = Database.GetRepository<BusinessTripsReportPaymentsByPeriod>();
            //bstReportPrepaymentsByAccountId = Database.GetRepository<BusinessTripsReportPrepaymentsByAccountId>();
            //businessTripsReportPrepaymentsByAccountShort = Database.GetRepository<BusinessTripsReportPrepaymentsByAccountShort>();
            //bstPaymentStatement = Database.GetRepository<BusinessTripsPaymentStatement>();
            //businessTripsOrderCust = Database.GetRepository<BusinessTripsOrderCust>();
            //cpReportByAccounts = Database.GetRepository<CashPaymentsReportByAccounts>();
            //cashBookRecordJournalByYear = Database.GetRepository<CashBookRecordJournalByYear>();
            //calcWithBuyersReport = Database.GetRepository<CalcWithBuyersReport>();
            //calcWithBuyersShortReport = Database.GetRepository<CalcWithBuyersShortReport>();
            //calcWithBuyersSaldo = Database.GetRepository<CalcWithBuyersShortReport>();
            //customerOrders = Database.GetRepository<CustomerOrders>();
            //contractors = Database.GetRepository<Contractors>();
            //contractorsVat = Database.GetRepository<ContractorVat>();
            //expenditureForProjectReport = Database.GetRepository<ExpenditureForProjectReport>();
            //bankPayments = Database.GetRepository<Bank_Payments>();
            //bankPaymentsReportTrialBalance = Database.GetRepository<BankPaymentsReportTrialBalance>();
            //bankPaymentsReportForCustomBill = Database.GetRepository<BankPaymentsReportForCustomBill>();
            //bankPaymentsReportTrialBalanceQuarter = Database.GetRepository<BankPaymentsReportTrialBalanceQuarter>();
            //bankPaymentsReportTrialBalanceAll313 = Database.GetRepository<BankPaymentsReportTrialBalanceAll313>();
            //businessTrips = Database.GetRepository<BusinessTrips>();
            //cashPaymentsSaldoBalance = Database.GetRepository<CashPaymentsSaldoBalance>();
            //cashPaymentsPeriodBalance = Database.GetRepository<CashPaymentsPeriodBalance>();
            //bankPaymentsReportTrialBalanceFull = Database.GetRepository<BankPaymentsReportTrialBalanceFull>();
            //msPaymentWithoutVat = Database.GetRepository<MSPaymentsWithoutVat>();
            //msTrialBalanceCurrency = Database.GetRepository<MsTrialBalanceCurrency>();
            //msTrialBalance = Database.GetRepository<MsTrialBalance>();
            //msTrialBalanceByAccountsCurrency = Database.GetRepository<MsTrialBalanceByAccountsCurrency>();
            //msReconciliation = Database.GetRepository<MsReconciliation>();
            //msReconciliation681_36 = Database.GetRepository<MsReconciliation681_36>();
            //msTrialBalanceByAccount = Database.GetRepository<MSTrialBalanceByAccounts>();
            //invoices = Database.GetRepository<Invoices>();
            //storeHouseTrialBalance = Database.GetRepository<StoreHouseTrialBalance>();
            //storeHouseInventory = Database.GetRepository<StoreHouseInventory>();
            //trialBalanceByAccountsReport = Database.GetRepository<TrialBalanceByAccountsReport>();
            //orders = Database.GetRepository<ORDERS>();
            //ordersInfo = Database.GetRepository<OrdersInfo>();
            //vat = Database.GetRepository<VAT>();
            //accountOrders = Database.GetRepository<AccountOrders>();
            //detalsReportByOperationContractors = Database.GetRepository<DetalsReportByOperationContractors>();
            //orderForDetalsContractor = Database.GetRepository<OrderForDetalsContractor>();
            //bpDetalsReportByCon = Database.GetRepository<GetBPDetalsReportByCon>();

            ////mtsNomenclatures = Database.GetRepository<MtsNomenclatures>();
            //getOSVkvartal_ForChess = Database.GetRepository<GetOSVkvartal_ForChess>();
            
          //  fixedAssetsOrderJournalPrint = Database.GetRepository<FixedAssetsOrderJournalPrint>();
           
            var config = new MapperConfiguration(cfg =>
            {
                cfg.CreateMap<ACCOUNTS, AccountsDTO>();
                cfg.CreateMap<Bank_Payments, Bank_PaymentsDTO>();
                cfg.CreateMap<BeginCredit, BeginCreditDTO>();
                cfg.CreateMap<BeginCreditDTO, BeginCredit>();
                cfg.CreateMap<BusinessTrips, BusinessTripsDTO>();
                cfg.CreateMap<BusinessTripsReportByCurrency, BusinessTripsReportByCurrencyDTO>();
                cfg.CreateMap<BusinessTripsReportByAccounts, BusinessTripsReportByAccountsDTO>();
                cfg.CreateMap<BusinessTripsReportByEmployees, BusinessTripsReportByEmployeesDTO>();
                cfg.CreateMap<BusinessTripsReportByDepartments, BusinessTripsReportByDepartmentsDTO>();
                cfg.CreateMap<CashPaymentsReportByAccounts, CashPaymentsReportByAccountsDTO>();
                cfg.CreateMap<BusinessTripsReportPaymentsByAccountId, BusinessTripsReportPaymentsByAccountIdDTO>();
                cfg.CreateMap<BusinessTripsReportPrepaymentsByAccountShort, BusinessTripsReportPrepaymentsByAccountShortDTO>();
                cfg.CreateMap<BusinessTripsReportPaymentsByPeriod, BusinessTripsReportPaymentsByPeriodDTO>();
                cfg.CreateMap<BusinessTripsReportPrepaymentsByAccountId, BusinessTripsReportPrepaymentsByAccountIdDTO>();
                cfg.CreateMap<BusinessTripsOrderCust, BusinessTripsOrderCustDTO>();
                cfg.CreateMap<MSPaymentsWithoutVat, MSPaymentsWithoutVatDTO>();
                cfg.CreateMap<CalcWithBuyersReport, CalcWithBuyersReportDTO>();
                cfg.CreateMap<CalcWithBuyersShortReport, CalcWithBuyersShortReportDTO>();
                cfg.CreateMap<BankPaymentsReportTrialBalance, BankPaymentsReportTrialBalanceDTO>();
                cfg.CreateMap<BankPaymentsReportForCustomBill, BankPaymentsReportForCustomBillDTO>();
                cfg.CreateMap<BankPaymentsReportTrialBalanceQuarter, BankPaymentsReportTrialBalanceQuarterDTO>();
                cfg.CreateMap<BankPaymentsReportTrialBalanceFull, BankPaymentsReportTrialBalanceFullDTO>();
                cfg.CreateMap<BankPaymentsReportTrialBalanceAll313, BankPaymentsReportTrialBalanceAll313DTO>();
                cfg.CreateMap<CashPaymentsPeriodBalance, CashPaymentsPeriodBalanceDTO>();
                cfg.CreateMap<CashPaymentsSaldoBalance, CashPaymentsSaldoBalanceDTO>();
                cfg.CreateMap<CashBookRecordJournalByYear, CashBookRecordJournalByYearDTO>();
                cfg.CreateMap<CashBookRecordJournalByYear, CashBookRecordJournalByYearDTO>();
                cfg.CreateMap<Contractors, ContractorsDTO>();
                cfg.CreateMap<CustomerOrders, CustomerOrdersDTO>();
                cfg.CreateMap<ContractorVat, ContractorVatDTO>();
                cfg.CreateMap<ContractorVatDTO, ContractorVat>();
                cfg.CreateMap<ORDERS, OrdersDTO>();
                cfg.CreateMap<ExpenditureForProjectReport, ExpenditureForProjectReportDTO>();
                cfg.CreateMap<MsTrialBalanceCurrency, MsTrialBalanceCurrencyDTO>();
                cfg.CreateMap<MsTrialBalance, MsTrialBalanceDTO>();
                cfg.CreateMap<MsReconciliation, MsReconciliationDTO>();
                cfg.CreateMap<MsTrialBalanceByAccountsCurrency, MsTrialBalanceByAccountsCurrencyDTO>();
                cfg.CreateMap<MsReconciliation681_36, MsReconciliation681_36DTO>();
                cfg.CreateMap<BusinessTripsPaymentStatement, BusinessTripsPaymentStatementDTO>();
                cfg.CreateMap<CustomerOrders, CustomerOrdersDTO>();
                cfg.CreateMap<Invoices, InvoicesDTO>();
                cfg.CreateMap<StoreHouseTrialBalance, StoreHouseTrialBalanceDTO>();
                cfg.CreateMap<StoreHouseInventory, StoreHouseInventoryDTO>();
                cfg.CreateMap<TrialBalanceByAccountsReport, TrialBalanceByAccountsReportDTO>();
                cfg.CreateMap<FixedAssetsOrderJournalPrint, FixedAssetsOrderJournalPrintDTO>();
                cfg.CreateMap<FixedAssetsOrderJournalPrintDTO, FixedAssetsOrderJournalPrint>();
                cfg.CreateMap<VAT, VatDTO>();
                cfg.CreateMap<ReceiptOrders, ReceiptOrdersDTO>();
                cfg.CreateMap<AccountOrders, AccountOrdersDTO>();
                cfg.CreateMap<DetalsReportByOperationContractors, DetalsReportByOperationContractorsDTO>();
                cfg.CreateMap<DetalsReportByOperationContractorsDTO, DetalsReportByOperationContractors>();
                cfg.CreateMap<OrderForDetalsContractor, OrderForDetalsContractorDTO>();
                cfg.CreateMap<OrderForDetalsContractorDTO, OrderForDetalsContractor>();
                cfg.CreateMap<GetBPDetalsReportByCon, GetBPDetalsReportByConDTO>();
                cfg.CreateMap<GetBPDetalsReportByConDTO, GetBPDetalsReportByCon>();
                cfg.CreateMap<MSTrialBalanceByAccounts, MSTrialBalanceByAccountsDTO>();
                cfg.CreateMap<MSTrialBalanceByAccountsDTO, MSTrialBalanceByAccounts>();

                //cfg.CreateMap<MtsNomenclatures, MtsNomenclaturessDTO>();

                cfg.CreateMap<GetOSVkvartal_ForChess, GetOSVkvartal_ForChessDTO>();
                cfg.CreateMap<GetOSVkvartal_ForChessDTO, GetOSVkvartal_ForChess>();
                


            });

            mapper = config.CreateMapper();
        }

//        #region CustomerOrders report's                   

//        public void PrintCustomerOrderInfo(CustomerOrdersDTO curRecord)
//        {
//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook();
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            int startPosition = 1;
//            int currentPosition = startPosition;

//            DateTime orderDate;
//            bool isDate = DateTime.TryParse(curRecord.OrderDate.ToString(), out orderDate);

//            cells["F" + currentPosition].Value = "Утверждаю";
//            cells["F" + currentPosition].Font.Bold = true;
//            currentPosition++;
//            cells["F" + currentPosition].Value = "Первый заместитель директора ____________________";
//            currentPosition++;
//            cells["F" + currentPosition].Value = "\"_____\" __________________ " + ((isDate) ? orderDate.Year.ToString() + "г." : "");
//            currentPosition += 2;
//            cells["B" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["B" + currentPosition].Value = "ООО \"НПФ \"Техвагонмаш\"";
//            cells["B" + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Font.Underline = UnderlineStyle.Single;
//            currentPosition += 3;
//            cells["F" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["F" + currentPosition].Value = "ЗАКАЗ №" + curRecord.OrderNumber.ToString();
//            cells["F" + currentPosition].Font.Bold = true;
//            currentPosition += 2;
//            cells["F" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["F" + currentPosition].Value = "от " + ((isDate) ? orderDate.ToShortDateString() : "");
//            cells["F" + currentPosition].Font.Bold = true;
//            currentPosition += 2;
//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Наименование заказа:";
//            cells["D" + currentPosition + ":" + "K" + currentPosition].Merge();
//            cells["D" + currentPosition].Value = curRecord.Details ?? String.Empty;
//            cells["D" + currentPosition].Font.Underline = UnderlineStyle.Single;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].Font.Bold = true;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].WrapText = true;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].VerticalAlignment = VAlign.Top;
//            cells["A" + currentPosition].RowHeight = 70;
//            currentPosition += 3;
//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Заказчик:";
//            cells["D" + currentPosition + ":" + "K" + currentPosition].Merge();
//            cells["D" + currentPosition].Value = curRecord.ContractorName ?? String.Empty;
//            cells["D" + currentPosition].Font.Underline = UnderlineStyle.Single;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].Font.Bold = true;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].WrapText = true;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].VerticalAlignment = VAlign.Top;
//            cells["A" + currentPosition].RowHeight = 50;
//            currentPosition += 2;
//            cells["A" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "№ договора (договорного документа)";
//            cells["F" + currentPosition + ":" + "K" + currentPosition].Merge();
//            cells["F" + currentPosition + ":" + "K" + currentPosition].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            cells["F" + currentPosition].Value = curRecord.AgreementName ?? String.Empty;// - agreement name
//            cells["F" + currentPosition + ":" + "K" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].Font.Bold = true;
//            currentPosition += 2;
//            cells["A" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сумма заказа";
//            cells["F" + currentPosition + ":" + "K" + currentPosition].Merge();
//            cells["F" + currentPosition + ":" + "K" + currentPosition].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            cells["F" + currentPosition].Value = curRecord.OrderPrice;
//            cells["F" + currentPosition + ":" + "K" + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["F" + currentPosition + ":" + "K" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].Font.Bold = true;

//            cells["A" + startPosition + ":" + "K" + currentPosition].Font.Size = 12;

//            currentPosition += 2;
//            cells["C" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["C" + currentPosition].Value = "Гл. бухгалтер";
//            cells["C" + (currentPosition + 1) + ":" + "E" + (currentPosition + 1)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            cells["C" + (currentPosition + 2) + ":" + "E" + (currentPosition + 2)].Merge();
//            cells["C" + (currentPosition + 2)].Value = "(подпись)";
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 2)].Font.Bold = true;
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 1)].Font.Size = 12;
//            cells["C" + (currentPosition + 2) + ":" + "E" + (currentPosition + 2)].Font.Size = 8;
//            currentPosition += 4;
//            cells["C" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["C" + currentPosition].Value = "Гл. конструктор";
//            cells["C" + (currentPosition + 1) + ":" + "E" + (currentPosition + 1)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            cells["C" + (currentPosition + 2) + ":" + "E" + (currentPosition + 2)].Merge();
//            cells["C" + (currentPosition + 2)].Value = "(подпись)";
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 2)].Font.Bold = true;
//            cells["C" + currentPosition + ":" + "E" + (currentPosition + 1)].Font.Size = 12;
//            cells["C" + (currentPosition + 2) + ":" + "E" + (currentPosition + 2)].Font.Size = 8;

//            cells["G" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["G" + currentPosition].Value = "Номер чертежа";
//            cells["G" + currentPosition].Font.Bold = true;
//            cells["G" + (currentPosition + 1) + ":" + "H" + (currentPosition + 3)].Merge();
//            cells["G" + (currentPosition + 1)].Value = curRecord.Drawing ?? String.Empty;

//            currentPosition += 6;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Заполняется Бухгалтерией";
//            cells["A" + currentPosition].Font.Size = 10;

//            currentPosition++;
//            cells["A" + currentPosition].Value = "Месяц";
//            cells["B" + currentPosition].Value = "Контрагенты";
//            cells["C" + currentPosition].Value = "Материалы";
//            cells["D" + currentPosition].Value = "З/плата";
//            cells["E" + currentPosition].Value = "Начисления";
//            cells["F" + currentPosition].Value = "Общезаводские расходы 91 сч.";
//            cells["G" + currentPosition].Value = "Амортизация";
//            cells["H" + currentPosition].Value = "Команд.";
//            cells["I" + currentPosition].Value = "Производственная себестоимость";

//            cells["A" + currentPosition + ":" + "K" + currentPosition].WrapText = true;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + currentPosition + ":" + "K" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition + ":" + "K" + (currentPosition + 14)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + currentPosition + ":" + "K" + (currentPosition + 14)].Font.Size = 10;

//            currentPosition += 5;
//            cells["A" + startPosition + ":" + "K" + currentPosition].Font.Name = "Times New Roman";

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("Заказ {0}", curRecord.OrderNumber.ToString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("На компьютері не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        #endregion

//        #region BusinessTrips report's                    

//        public bool GetBSTReportCurrencyPeriod(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""BSTReportByCurrencyProc""(@StartDate, @EndDate)";

            
//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportByCurrency>, List<BusinessTripsReportByCurrencyDTO>>(bstReportByCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportCurrencyPeriod(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportCurrencyPeriod(IEnumerable<BusinessTripsReportByCurrencyDTO> reportSource, DateTime start, DateTime end)
//        {
//            int recCount = reportSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BusinessTripsReportByCurrencyDTO> rowData = reportSource.ToList();

//            IRange interval;
//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var reportname = "Звіт по валютам з " + start.ToShortDateString() + " по " + end.ToShortDateString();

//            string name = "Звіт по валютам у розрізі документів";
//            var nameperiod = "";
//            if (start != DateTime.MinValue && end != DateTime.MaxValue)
//            {
//                var month = start.Month.ToString("MMM");
//                var year = start.Year.ToString("YYYY");
//                nameperiod = " за період з " + start.ToShortDateString() + " по " + end.ToShortDateString() + " рр.";
//                name = name + nameperiod;
//            }

//            Dictionary<int, string> ReportIds = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startReportId = 0;
//            int endReportId = 0;

//            int startPosition = 2, currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var reportId = reportSource.Select(c => new
//            {
//                ReportId = c.ReportId,
//                ReportName = c.ReportName
//            }).Distinct().OrderBy(c => c.ReportId);

//            foreach (var dict in reportId)
//                ReportIds.Add(dict.ReportId, dict.ReportName);

//            HeaderColumn.Add("RecordNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ з/п";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 4;

//            startHeaderPosition++;

//            HeaderColumn.Add("CountryName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Країна";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 20;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Валюта";

//            HeaderColumn.Add("CurrencyCode", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Найменування";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 18;
//            startHeaderPosition++;
//            HeaderColumn.Add("CurrencyNum", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Код";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            if (ReportIds.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Документи";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + ReportIds.Count - 2] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Документи";

//                startReportId = startHeaderPosition;

//                foreach (var item in ReportIds)
//                {
//                    HeaderColumn.Add("ReportId" + item.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = item.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endReportId = startHeaderPosition;
//            }

//            HeaderColumn.Add("Description", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Коментар";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 50;
//            startHeaderPosition++;

//            HeaderColumn.Add("PaymentCurrencySum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума у валюті";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            HeaderColumn.Add("PaymentSum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Екв. у грн.";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (startPosition + 2)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition - 1) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (startPosition - 1)];
//            interval.Merge();
//            interval.Value = name;
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.Font.Bold = true;
//            interval.Font.Size = 14;

//            #endregion

//            #region Loop body

//            int currencyId = 0;
//            string reportHeader = "";
//            int startCurrency = currentPosition;
//            int sumPosition = 0;

//            for (int i = 0; i < recCount; i++)
//            {
//                if (currencyId != rowData[i].CurrencyId)
//                {
//                    currencyId = rowData[i].CurrencyId;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Interior.Color = Color.DeepSkyBlue;
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["CurrencyCode"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["CurrencyCode"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//                        cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = "Всього:";
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentCurrencySum"] - 1], startCurrency, vsS[HeaderColumn["PaymentCurrencySum"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentSum"] - 1], startCurrency, vsS[HeaderColumn["PaymentSum"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Font.Bold = true;

//                        if (ReportIds.Count > 0)
//                        {
//                            foreach (var item in ReportIds)
//                            {
//                                sumPosition = HeaderColumn["ReportId" + item.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startCurrency, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }

//                        currentPosition++;
//                        startCurrency = currentPosition;
//                    }
//                }

//                cells[vsS[HeaderColumn["RecordNumber"] - 1] + currentPosition].Value = rowData[i].RecID;
//                cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = rowData[i].CountryName;
//                cells[vsS[HeaderColumn["CurrencyCode"] - 1] + currentPosition].Value = rowData[i].CurrencyCode;
//                cells[vsS[HeaderColumn["CurrencyCode"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                cells[vsS[HeaderColumn["CurrencyNum"] - 1] + currentPosition].Value = rowData[i].CurrencyNum;
//                cells[vsS[HeaderColumn["CurrencyNum"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                //
//                reportHeader = "ReportId" + rowData[i].ReportId.ToString();
//                cells[vsS[HeaderColumn[reportHeader] - 1] + currentPosition].Value = rowData[i].PaymentCurrencySum;
//                //
//                cells[vsS[HeaderColumn["Description"] - 1] + currentPosition].Value = rowData[i].Description;
//                cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Value = rowData[i].PaymentCurrencySum;
//                cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Value = rowData[i].PaymentSum;

//                currentPosition++;
//            }
//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Interior.Color = Color.DeepSkyBlue;
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["CurrencyCode"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["CurrencyCode"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//            cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = "Всього:";
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentCurrencySum"] - 1], startCurrency, vsS[HeaderColumn["PaymentCurrencySum"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentSum"] - 1], startCurrency, vsS[HeaderColumn["PaymentSum"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Font.Bold = true;

//            if (ReportIds.Count > 0)
//            {
//                foreach (var item in ReportIds)
//                {
//                    sumPosition = HeaderColumn["ReportId" + item.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startCurrency, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            #endregion

//            cells[vsS[HeaderColumn["CurrencyNum"]] + (startPosition + 3) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            var fileas = reportname;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", fileas);
//            RunXls(@"\Отчеты\Командировки\", fileas);
//            return true;
//        }

//        public bool GetBSTReportByAccounts(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };

//            string procName = @"select * from ""BSTReportByAccountsProc""(@StartDate, @EndDate)";

            
//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportByAccounts>, List<BusinessTripsReportByAccountsDTO>>(bstReportByAccounts.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportByAccounts(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportByAccounts(IEnumerable<BusinessTripsReportByAccountsDTO> reportSource, DateTime start, DateTime end)
//        {
//            int recCount = reportSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BusinessTripsReportByAccountsDTO> rowData = reportSource.ToList();

            

//            IRange interval;
//            //var workbook = Factory.GetWorkbook();
//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var reportname = "ОСВ № 372";

//            string name = "Обігово-сальдова відомість по рахунку № 372";
//            var nameperiod = "";
//            if (start != DateTime.MinValue && end != DateTime.MaxValue)
//            {
//                var month = start.Month.ToString("MMM");
//                var year = start.Year.ToString("YYYY");
//                nameperiod = " за период с " + start.ToShortDateString() + " по " + end.ToShortDateString() + " гг.";
//                name = name + nameperiod;
//            }

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<int, string> VatAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int startVatAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;
//            int endVatAccount = 0;

//            int startPosition = 5, currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            decimal debitStart = 0m;
//            decimal creditStart = 0m;
//            decimal creditEnd = 0m;
//            decimal debitEnd = 0m;

//            //startPosition += 4;

//            #region Generate report header


//            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            // В связи с тем что нужно было из суб-счетов(313/13, 313/99.....) сделать один 313 было убрано все суб-счета и добавлено один 313
//            // с id = 9999 в словарь счетов. 
//            // В колекции получнной из процедуры все суб-счета были заменены на 313.
//            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//            for (int i = 0; i < rowData.Count; ++i)
//            {
//                if (rowData[i].AccNum != null)
//                {
//                    if (rowData[i].AccNum.Contains("313"))
//                    {
//                        rowData[i].AccNum = "313";
//                        rowData[i].AccountID = 9999;
//                    }
//                }
//            }



//            //rowData.Where(bdsm => bdsm.AccNum.Contains("313")).Select(cur => { cur.AccNum = "313"; cur.AccountID = 9999; return cur; }).ToList();
             
//            var Debit_Accounts = reportSource.Where(c => c.FlagDebitCredit > 0 && !c.AccNum.Contains("313")).Select(c => new
//            {
//                AccountNum = c.AccNum,
//                AccountId = c.AccountID
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);

//            DebitAcc.Add(9999, "313");

//            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//            var Credit_Accounts = reportSource.Where(c => c.FlagDebitCredit < 0).Select(c => new
//            {
//                AccountNum = c.AccNum,
//                AccountId = c.AccountID
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            var Vat_Accounts = reportSource.Where(c => c.FlagDebitCredit < 0 && c.VatAccountID > 0).Select(c => new
//            {
//                AccountNum = c.VatNum,
//                AccountId = c.VatAccountID
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Vat_Accounts)
//                VatAcc.Add(dict.AccountId, dict.AccountNum);


//            HeaderColumn.Add("RecordNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ п-п";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 4;

//            startHeaderPosition++;

//            HeaderColumn.Add("Fio", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Ф.І.О. співробітника";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 20;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Кредит";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по дебету";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по дебету";
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PrepaymentDate", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дата";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            HeaderColumn.Add("Prepayment", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Всего";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по кредиту";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + CreditAcc.Count + VatAcc.Count] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по кредиту";
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + CreditAcc.Count - 2] + (startPosition + 1)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Балансові рахунки";

//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;

//                if (VatAcc.Count > 0)
//                {
//                    cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + VatAcc.Count - 2] + (startPosition + 1)].Merge();
//                    cells[startPosition, startHeaderPosition - 1].Value = "Рахунки ПДВ";

//                    startVatAccount = startHeaderPosition;
//                    foreach (var vat_account in VatAcc)
//                    {
//                        HeaderColumn.Add("VatAccount" + vat_account.Key.ToString(), startHeaderPosition);
//                        cells[startPosition + 1, startHeaderPosition - 1].Value = vat_account.Value;
//                        cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                        startHeaderPosition++;
//                    }
//                    endVatAccount = startHeaderPosition;
//                }
//            }

//            HeaderColumn.Add("PaymentDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Дата";
//            cells[startPosition, startHeaderPosition - 1].ColumnWidth = 12;

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Всего";
//            cells[startPosition, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Кредит";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата відрядження";

//            HeaderColumn.Add("StartTripDate", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дата початку";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 16;
//            startHeaderPosition++;

//            HeaderColumn.Add("EndTripDate", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дата завершення";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 16;
//            startHeaderPosition++;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndTripDate"] - 1] + (startPosition + 2)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition - 1) + ":" + vsS[HeaderColumn["EndTripDate"] - 1] + (startPosition - 1)];
//            interval.Merge();
//            interval.Value = name;
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.Font.Bold = true;
//            interval.Font.Size = 14;

//            #endregion

            
            
//            #region Loop body

//            int employeeId = 0;
//            string account = "";
//            int startEmployee = currentPosition;
//            int sumPosition = 0;
//            int employeesPrintNumber = 1;

//            for (int i = 0; i < recCount; i++)
//            {
//                if (employeeId != rowData[i].EmployeesID)
//                {
//                    if (employeeId > 0)
//                    {
//                        debitStart = rowData.FirstOrDefault(w => w.EmployeesID == employeeId).DebitStart;
//                        creditStart = rowData.FirstOrDefault(w => w.EmployeesID == employeeId).CreditStart;
//                        debitEnd = rowData.FirstOrDefault(w => w.EmployeesID == employeeId).DebitEnd;
//                        creditEnd = rowData.FirstOrDefault(w => w.EmployeesID == employeeId).CreditEnd;
//                    }

//                    employeeId = rowData[i].EmployeesID;
                    
//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition)].Interior.Color = Color.LemonChiffon;
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        //cells[vsS[HeaderColumn["Prepayment"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["Prepayment"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;
//                        //cells[vsS[HeaderColumn["Payment"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["Payment"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//                        cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = "Всього:";
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = debitStart;
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = creditStart;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = debitEnd;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = creditEnd;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["Prepayment"] - 1], startEmployee, vsS[HeaderColumn["Prepayment"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["Payment"] - 1], startEmployee, vsS[HeaderColumn["Payment"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Font.Bold = true;

//                        cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Value = rowData[i].StartTripDate;
//                        cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Font.Bold = true;

//                        cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Value = rowData[i].EndTripDate;
//                        cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Font.Bold = true;

//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (VatAcc.Count > 0)
//                        {
//                            foreach (var dict in VatAcc)
//                            {
//                                sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }

//                        currentPosition++;
//                        startEmployee = currentPosition;
//                    }

//                    cells[vsS[HeaderColumn["RecordNumber"] - 1] + currentPosition].Value = employeesPrintNumber;
//                    cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = rowData[i].Fio;
//                    //
//                    //cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].DebitStart;
//                    //cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].CreditStart;
//                    //
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Value = rowData[i].Payment;
//                        cells[vsS[HeaderColumn["PrepaymentDate"] - 1] + currentPosition].Value = rowData[i].PaymentDate;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Value = rowData[i].Payment;
//                        cells[vsS[HeaderColumn["PaymentDate"] - 1] + currentPosition].Value = rowData[i].PaymentDate;
//                    }

//                    if (rowData[i].AccountID > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + rowData[i].AccountID.ToString()
//                            : "CreditAccount" + rowData[i].AccountID.ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = (rowData[i].Payment > 0) ? (rowData[i].Payment - rowData[i].VatPayment) : rowData[i].Payment;
//                    }
//                    if (rowData[i].VatAccountID > 0)
//                    {
//                        account = "VatAccount" + rowData[i].VatAccountID.ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].VatPayment;
//                    }

//                    //
//                    //cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].DebitEnd;
//                    //cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].CreditEnd;

//                    cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Value = rowData[i].StartTripDate;
//                    cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Font.Bold = true;

//                    cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Value = rowData[i].EndTripDate;
//                    cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Font.Bold = true;

//                    employeesPrintNumber++;
//                }
//                else
//                {
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Value = rowData[i].Payment;
//                        cells[vsS[HeaderColumn["PrepaymentDate"] - 1] + currentPosition].Value = rowData[i].PaymentDate;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Value = rowData[i].Payment;
//                        cells[vsS[HeaderColumn["PaymentDate"] - 1] + currentPosition].Value = rowData[i].PaymentDate;
//                    }
//                    if (rowData[i].AccountID > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + rowData[i].AccountID.ToString()
//                            : "CreditAccount" + rowData[i].AccountID.ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = (rowData[i].Payment > 0) ? (rowData[i].Payment - rowData[i].VatPayment) : rowData[i].Payment;

                        
//                    }
//                    if (rowData[i].VatAccountID > 0)
//                    {
//                        account = "VatAccount" + rowData[i].VatAccountID.ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].VatPayment;
//                    }

//                    cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Value = rowData[i].StartTripDate;
//                    cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Font.Bold = true;

//                    cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Value = rowData[i].EndTripDate;
//                    cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Font.Bold = true;

//                }

//                //cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Value = rowData[i].StartTripDate;
//                //cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Font.Bold = true;

//                //cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Value = rowData[i].EndTripDate;
//                //cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Font.Bold = true;

//                cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Value = rowData[i].StartTripDate;
//                cells[vsS[HeaderColumn["StartTripDate"] - 1] + currentPosition].Font.Bold = true;

//                cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Value = rowData[i].EndTripDate;
//                cells[vsS[HeaderColumn["EndTripDate"] - 1] + currentPosition].Font.Bold = true;

//                currentPosition++;
//            }

//            #endregion
            
//            #region Finally step output

//            if (employeeId > 0)
//            {
//                debitStart = rowData.FirstOrDefault(w => w.EmployeesID == employeeId && employeeId > 0).DebitStart;
//                creditStart = rowData.FirstOrDefault(w => w.EmployeesID == employeeId && employeeId > 0).CreditStart;
//                debitEnd = rowData.FirstOrDefault(w => w.EmployeesID == employeeId && employeeId > 0).DebitEnd;
//                creditEnd = rowData.FirstOrDefault(w => w.EmployeesID == employeeId && employeeId > 0).CreditEnd;
//            }

//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["EndTripDate"] - 1] + (currentPosition)].Interior.Color = Color.LemonChiffon;
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["StartTripDate"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndTripDate"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            //cells[vsS[HeaderColumn["Prepayment"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["Prepayment"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;
//            //cells[vsS[HeaderColumn["Payment"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["Payment"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//            cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = "Всего";
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = debitStart;
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = creditStart;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = debitEnd;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = creditEnd;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["Prepayment"] - 1], startEmployee, vsS[HeaderColumn["Prepayment"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["Payment"] - 1], startEmployee, vsS[HeaderColumn["Payment"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Font.Bold = true;

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (VatAcc.Count > 0)
//            {
//                foreach (var dict in VatAcc)
//                {
//                    //cells[vsS[HeaderColumn["VatAccount" + dict.Key] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["VatAccount" + dict.Key] - 1] + (currentPosition - 1)].Interior.Color = Color.Khaki;
//                    sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Interior.Color = Color.Coral;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition] + currentPosition].Font.Size = 12;
//            cells["B" + currentPosition].Value = "Итого:";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["Payment"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["Prepayment"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["PrepaymentDate"] - 2] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["PaymentDate"] - 2] + currentPosition].NumberFormat = "### ### ##0.00";

//            var summaryData = rowData.GroupBy(g => g.EmployeesID).Select(n => new
//            {
//                n.Key,
//                TotalDebitStart = n.Max(s => s.DebitStart),
//                TotalCreditStart = n.Max(s => s.CreditStart),
//                TotalDebitEnd = n.Max(s => s.DebitEnd),
//                TotalCreditEnd = n.Max(s => s.CreditEnd)
//            }).ToList();
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalDebitStart);
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalDebitEnd);
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalCreditStart);
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalCreditEnd);

//            cells[vsS[HeaderColumn["Prepayment"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.Payment);
//            cells[vsS[HeaderColumn["Payment"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0).Sum(x => x.Payment);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.AccountID == dict.Key).Sum(x => x.Payment);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.AccountID == dict.Key).Sum(x => (x.Payment - x.VatPayment));
//                }
//            }
//            if (VatAcc.Count > 0)
//            {
//                foreach (var dict in VatAcc)
//                {
//                    sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.VatAccountID == dict.Key).Sum(x => x.VatPayment);
//                }
//            }

//            #endregion

            
            
//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndTripDate"] - 1] + (currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = 7;

//            worksheet.WindowInfo.FreezePanes = true;

//            worksheet.Name = reportname.Trim();
//            var fileas = reportname + nameperiod;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", fileas);
//            RunXls(@"\Отчеты\Командировки\", fileas);
//            return true;
//        }

//        public bool GetBSTReportDocumentsPeriod(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""BSTReportByDocumentsProc""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportByCurrency>, List<BusinessTripsReportByCurrencyDTO>>(bstReportByCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportDocumentsPeriod(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportDocumentsPeriod(IEnumerable<BusinessTripsReportByCurrencyDTO> reportSource, DateTime start, DateTime end)
//        {
//            int recCount = reportSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BusinessTripsReportByCurrencyDTO> rowData = reportSource.ToList();

//            IRange interval;
//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var reportname = "Звіт по статтям видатків з " + start.ToShortDateString() + " по " + end.ToShortDateString();

//            string name = "Звіт по статтям видатків";
//            var nameperiod = "";
//            if (start != DateTime.MinValue && end != DateTime.MaxValue)
//            {
//                var month = start.Month.ToString("MMM");
//                var year = start.Year.ToString("YYYY");
//                nameperiod = " за період з " + start.ToShortDateString() + " по " + end.ToShortDateString() + " рр.";
//                name = name + nameperiod;
//            }

//            Dictionary<int, string> ReportIds = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startReportId = 0;
//            int endReportId = 0;

//            int startPosition = 2, currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var reportId = reportSource.Select(c => new
//            {
//                ReportId = c.ReportId,
//                ReportName = c.ReportName
//            }).Distinct().OrderBy(c => c.ReportId);

//            foreach (var dict in reportId)
//                ReportIds.Add(dict.ReportId, dict.ReportName);

//            HeaderColumn.Add("RecordNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ з/п";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 4;

//            startHeaderPosition++;

//            HeaderColumn.Add("CountryName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Країна";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 20;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Валюта";

//            HeaderColumn.Add("CurrencyCode", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Найменування";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 18;
//            startHeaderPosition++;
//            HeaderColumn.Add("CurrencyNum", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Код";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            if (ReportIds.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Документи";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + ReportIds.Count - 2] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Документи";

//                startReportId = startHeaderPosition;

//                foreach (var item in ReportIds)
//                {
//                    HeaderColumn.Add("ReportId" + item.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = item.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endReportId = startHeaderPosition;
//            }

//            HeaderColumn.Add("Description", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Коментар";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 50;
//            startHeaderPosition++;

//            HeaderColumn.Add("PaymentCurrencySum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума у валюті";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            HeaderColumn.Add("PaymentSum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Екв. у грн.";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (startPosition + 2)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition - 1) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (startPosition - 1)];
//            interval.Merge();
//            interval.Value = name;
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.Font.Bold = true;
//            interval.Font.Size = 14;

//            #endregion

//            #region Loop body

//            int currencyId = 0;
//            string reportHeader = "";
//            int startCurrency = currentPosition;
//            int sumPosition = 0;

//            for (int i = 0; i < recCount; i++)
//            {
//                if (currencyId != rowData[i].CurrencyId)
//                {
//                    currencyId = rowData[i].CurrencyId;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Interior.Color = Color.DeepSkyBlue;
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["CurrencyCode"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["CurrencyCode"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//                        cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = "Всього:";
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentCurrencySum"] - 1], startCurrency, vsS[HeaderColumn["PaymentCurrencySum"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentSum"] - 1], startCurrency, vsS[HeaderColumn["PaymentSum"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Font.Bold = true;

//                        if (ReportIds.Count > 0)
//                        {
//                            foreach (var item in ReportIds)
//                            {
//                                sumPosition = HeaderColumn["ReportId" + item.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startCurrency, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }

//                        currentPosition++;
//                        startCurrency = currentPosition;
//                    }
//                }

//                cells[vsS[HeaderColumn["RecordNumber"] - 1] + currentPosition].Value = rowData[i].RecID;
//                cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = rowData[i].CountryName;
//                cells[vsS[HeaderColumn["CurrencyCode"] - 1] + currentPosition].Value = rowData[i].CurrencyCode;
//                cells[vsS[HeaderColumn["CurrencyCode"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                cells[vsS[HeaderColumn["CurrencyNum"] - 1] + currentPosition].Value = rowData[i].CurrencyNum;
//                cells[vsS[HeaderColumn["CurrencyNum"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                //
//                reportHeader = "ReportId" + rowData[i].ReportId.ToString();
//                cells[vsS[HeaderColumn[reportHeader] - 1] + currentPosition].Value = rowData[i].PaymentSum;
//                //
//                cells[vsS[HeaderColumn["Description"] - 1] + currentPosition].Value = rowData[i].Description;
//                cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Value = rowData[i].PaymentCurrencySum;
//                cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Value = rowData[i].PaymentSum;

//                currentPosition++;
//            }
//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Interior.Color = Color.DeepSkyBlue;
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentCurrencySum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["CurrencyCode"] - 1] + (startCurrency) + ":" + vsS[HeaderColumn["CurrencyCode"] - 1] + (currentPosition - 1)].Interior.Color = Color.Aquamarine;

//            cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = "Всього:";
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentCurrencySum"] - 1], startCurrency, vsS[HeaderColumn["PaymentCurrencySum"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PaymentCurrencySum"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PaymentSum"] - 1], startCurrency, vsS[HeaderColumn["PaymentSum"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Font.Bold = true;

//            if (ReportIds.Count > 0)
//            {
//                foreach (var item in ReportIds)
//                {
//                    sumPosition = HeaderColumn["ReportId" + item.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startCurrency, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            #endregion

//            #region Summary step

//            currentPosition++;

//            cells[vsS[HeaderColumn["CountryName"] - 1] + currentPosition].Value = "Загалом:";
//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Interior.Color = Color.YellowGreen;

//            if (ReportIds.Count > 0)
//            {
//                foreach (var item in ReportIds)
//                {
//                    sumPosition = HeaderColumn["ReportId" + item.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.ReportId == item.Key).Sum(s => s.PaymentSum);
//                }
//            }

//            cells[vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].Value = rowData.Sum(s => s.PaymentSum);

//            #endregion

//            cells[vsS[HeaderColumn["CurrencyNum"]] + (startPosition + 3) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PaymentSum"] - 1] + (currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            var fileas = reportname;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", fileas);
//            RunXls(@"\Отчеты\Командировки\", fileas);
//            return true;
//        }

//        public bool GetBSTReportEmployeesByPeriod(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDateIn", startDate),
//                    new FbParameter("EndDateIn", endDate),
//                };

//            string procName = @"select * from ""BSTReportByEmployeesProc""(@StartDateIn, @EndDateIn)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportByEmployees>, List<BusinessTripsReportByEmployeesDTO>>(bstReportByEmployees.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportEmployeesByPeriod(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportEmployeesByPeriod(IEnumerable<BusinessTripsReportByEmployeesDTO> reportSource, DateTime start, DateTime end)
//        {
//            int recCount = reportSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BusinessTripsReportByEmployeesDTO> rowData = reportSource.ToList();

//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            IRange interval;
//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var reportname = "Звіт по відрядженням з " + start.ToShortDateString() + " по " + end.ToShortDateString();

//            string name = "Звіт по відрядженням";
//            var nameperiod = "";

//            if (start != DateTime.MinValue && end != DateTime.MaxValue)
//            {
//                var month = start.Month.ToString("MMM");
//                var year = start.Year.ToString("YYYY");
//                nameperiod = " за період з " + start.ToShortDateString() + " по " + end.ToShortDateString() + " рр.";
//                name = name + nameperiod;
//            }

//            int startPosition = 2, currentPosition = startPosition + 2;
//            byte startHeaderPosition = 1;

//            #region Generate report header


//            HeaderColumn.Add("RecordNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ з/п";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 4;

//            startHeaderPosition++;

//            HeaderColumn.Add("AccountNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Таб. ном.";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 20;

//            startHeaderPosition++;

//            HeaderColumn.Add("Fio", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "П.І.Б.";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 50;

//            startHeaderPosition++;

//            HeaderColumn.Add("StartDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Початкова дата";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;

//            startHeaderPosition++;

//            HeaderColumn.Add("EndDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Кінцева дата";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndDate"] - 1] + (startPosition + 1)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition - 1) + ":" + vsS[HeaderColumn["EndDate"] - 1] + (startPosition - 1)];
//            interval.Merge();
//            interval.Value = name;
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.Font.Bold = true;
//            interval.Font.Size = 14;

//            #endregion

//            #region Loop body

//            for (int i = 0; i < recCount; i++)
//            {
//                cells[vsS[HeaderColumn["RecordNumber"] - 1] + currentPosition].Value = rowData[i].RecID;
//                cells[vsS[HeaderColumn["AccountNumber"] - 1] + currentPosition].Value = rowData[i].AccountNumber;
//                cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = rowData[i].Fio;
//                cells[vsS[HeaderColumn["StartDate"] - 1] + currentPosition].Value = rowData[i].StartDate;
//                if (DateSystem.IsPublicHoliday(rowData[i].StartDate, CountryCode.UA) || DateSystem.IsWeekend(rowData[i].StartDate, CountryCode.UA))
//                {
//                    cells[vsS[HeaderColumn["StartDate"] - 1] + currentPosition].Interior.Color =Color.Yellow;
//                }

//                cells[vsS[HeaderColumn["EndDate"] - 1] + currentPosition].Value = rowData[i].EndDate;
//                if (DateSystem.IsPublicHoliday(rowData[i].EndDate, CountryCode.UA) || DateSystem.IsWeekend(rowData[i].EndDate, CountryCode.UA))
//                {
//                    cells[vsS[HeaderColumn["EndDate"] - 1] + currentPosition].Interior.Color = Color.Yellow;
//                }
                
//                currentPosition++;
//            }

//            #endregion

//            currentPosition--;

//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndDate"] - 1] + (currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            var fileas = reportname;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", fileas);
//            RunXls(@"\Отчеты\Командировки\", fileas);

//            return true;
//        }

//        public void PrintBusinessTripDecree(List<BusinessTripsJournalDTO> source)
//        {
//            Object missingObj = System.Reflection.Missing.Value;
//            Object trueObj = true;
//            Object falseObj = false;
                        
//            word = new Words.Application { CheckLanguage = true };

//            string reportname = "Наказ про відрядження №" + source[0].DecreeNumber.Replace("/", "_") + " від " + source[0].DecreeDate.Value.ToShortDateString();
            
//            try
//            {
//                const Words.WdParagraphAlignment alignCenter = Words.WdParagraphAlignment.wdAlignParagraphCenter;
//                const Words.WdParagraphAlignment alignLeft = Words.WdParagraphAlignment.wdAlignParagraphLeft;
//                document = word.Documents.Add();
//                document.Select();

//                var str = word.Selection;
//                str.TypeText("ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ");
//                var rng = document.Paragraphs[1].Range;
//                rng.LanguageID = Words.WdLanguageID.wdUkrainian;
//                rng.NoProofing = 0;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("НАУКОВО-ВИРОБНИЧА ФІРМА «ТЕХВАГОНМАШ»");
//                rng = document.Paragraphs[2].Range;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);

//                str.TypeText("НАКАЗ № " + source[0].DecreeNumber);
//                rng = document.Paragraphs[3].Range;
//                rng.Font.Bold = 0;
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("про відрядження ");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                var dat = source[0].DecreeDate.Value.ToString("dd MMMM yyyy", CultureInfo.CreateSpecificCulture("uk-UA"));
//                str.TypeText("м. Кременчук                                                                                                " + dat);
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(2);
//                rng = document.Paragraphs[6].Range;
//                rng.ParagraphFormat.LeftIndent = 12;

//                if (source[0].DecreeDate < new DateTime(2018, 3, 1))
//                    str.TypeText("Згідно п. 140.1.7 , п. 140.1 статті  140 ПКУ, та у відповідності до «Положення про  службові відрядження в межах України та за кордон»,  затвердженого наказом по підприємству  № 43/01 від 31.03.2011р.,");
//                else
//                    str.TypeText("Згідно п. 140.1.7 , п. 140.1 статті  140 ПКУ, та у відповідності до «Положення про  службові відрядження в межах України та за кордон»,  затвердженого наказом по підприємству  № 40 від 22.02.2018р.,");

//                str.ParagraphFormat.Alignment = alignLeft;

//                InsertLines(2);
//                str.TypeText("НАКАЗУЮ:");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("Відрядити:");
//                str.ParagraphFormat.Alignment = alignLeft;
//                var pad = new Ua();
//                var i = 1;

//                foreach (var item in source)
//                {                    
//                    InsertLines(1);
                                        
//                    var proffdative = (item.ProfessionNameGenitive != null) ? char.ToUpper(item.ProfessionNameGenitive[0]) + item.ProfessionNameGenitive.Substring(1) : String.Empty;

//                    var fio = pad.Q(item.Fio);

//                    //string lastName = pad.QSecondName("Ведмідь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string firstName = pad.QFirstName("Василь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string middleName = pad.QFirstName("Юрійович", NameCaseLib.NCL.Gender.Man)[3];

//                    //string fio = lastName + " " + firstName + " " + middleName;

//                    str.TypeText(i + ". " + proffdative + " " + fio[3] + " до " + item.FullCityName + ", " +
//                        (item.ContractorsID == 0 ? "" : item.ContractorName) + " з " + item.StartDate.Value.ToShortDateString() + "р. по " + item.EndDate.Value.ToShortDateString() + "р. з метою " + item.PurposeName + ".");
//                    str.ParagraphFormat.Alignment = alignLeft;
//                    i++;
//                }

//                InsertLines(4);
//                const string boss = "Валентин Кондрашов";
//                str.TypeText("Перший заступник директора                                                                  " + boss);
//                str.ParagraphFormat.Alignment = alignCenter;

//                if (SaveAsDoc(@"\Приказы о командировках\" + source[0].DecreeDate.Value.Year + @"\", reportname))
//                    word.Visible = true;
//            }
//            catch (Exception ex)
//            {
//                document.Close(ref falseObj, ref  missingObj, ref missingObj);
//                word.Quit(ref missingObj, ref  missingObj, ref missingObj);
//                document = null;
//                word = null;
//            }
//        }

//        public List<BusinessTripsOrderCustDTO> GetBusinessOrderCustByBTId(int id)
//        {
//            var receiptList = (from co in customerOrders.GetAll()
//                               join ct in contractors.GetAll() on co.ContractorId equals ct.Id into ctt
//                               from ct in ctt.DefaultIfEmpty()
//                               join btoc in businessTripsOrderCust.GetAll() on co.Id equals btoc.CustomerOrderId into nu
//                               from btoc in nu.DefaultIfEmpty()
//                               join bt in businessTrips.GetAll() on btoc.BusinessTripsId equals bt.ID into so
//                               from bt in so.DefaultIfEmpty()
//                               where bt.ID == id
//                               select new BusinessTripsOrderCustDTO()
//                               {
//                                   ID = btoc.ID,
//                                   BusinessTripsId = btoc.BusinessTripsId,
//                                   CustomerOrderId = btoc.CustomerOrderId,
//                                   OrderDate = co.OrderDate,
//                                   OrderNumber = co.OrderNumber,
//                                   ContractorName = ct.Name,
//                                   UserId = btoc.UserId

//                               }).ToList();

//            return receiptList;
//        }
////------------------------------------------------------------------
//        public void PrintBusinessTrip(BusinessTripsJournalDTO source)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\BusinessTripsTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
                     
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\BusinessTripsTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;
//            string strInn = "";
           
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();
 
//            Сells["K5"].Value = source.Doc_Number;
//            Сells["J7"].Value = source.Fio;
//            Сells["H10"].Value = source.ProfessionName;
//            Сells["L13"].Value = source.FullCityName;
//            Сells["H20"].Value = source.PurposeName;
//            Сells["J35"].Value = source.DecreeDate;
//            Сells["O35"].Value = source.DecreeNumber;
            
            
//            char sym;

//            //if (source.IdentNumber != "" && source.IdentNumber != null)
//            //{
//            //    strInn = source.IdentNumber;

//            //    sym = strInn[0];
//            //    Сells["A76"].Value = sym.ToString();
//            //    sym = strInn[1];
//            //    Сells["B76"].Value = sym.ToString();
//            //    sym = strInn[2];
//            //    Сells["C76"].Value = sym.ToString();
//            //    sym = strInn[3];
//            //    Сells["D76"].Value = sym.ToString();
//            //    sym = strInn[4];
//            //    Сells["E76"].Value = sym.ToString();
//            //    sym = strInn[5];
//            //    Сells["F76"].Value = sym.ToString();
//            //    sym = strInn[6];
//            //    Сells["G76"].Value = sym.ToString();
//            //    sym = strInn[7];
//            //    Сells["H76"].Value = sym.ToString();
//            //    sym = strInn[8];
//            //    Сells["I76"].Value = sym.ToString();
//            //    sym = strInn[9];
//            //    Сells["J76"].Value = sym.ToString();
//            //}
  
//                try
//                {
//                    string dateDecree = source.DecreeDate.ToString();
//                    string fileName = "Заявка на відрядження № " + source.Doc_Number;
//                    if (dateDecree != "")
//                    {
//                        int length = dateDecree.Length;
//                        string newdt = dateDecree.Remove(11, length - 11);
//                        string newFileName = fileName + " від " + newdt;
//                        Workbook.SaveAs(GeneratedReportsDir + newFileName + ".xls", FileFormat.Excel8);
//                        Process process = new Process();
//                        process.StartInfo.Arguments = "\"" + GeneratedReportsDir + newFileName + ".xls" + "\"";
//                        process.StartInfo.FileName = "Excel.exe";
//                        process.Start();
//                    }
//                    else
//                    {
//                        Workbook.SaveAs(GeneratedReportsDir + fileName + ".xls", FileFormat.Excel8);
//                        Process process = new Process();
//                        process.StartInfo.Arguments = "\"" + GeneratedReportsDir + fileName + ".xls" + "\"";
//                        process.StartInfo.FileName = "Excel.exe";
//                        process.Start();
//                    }
//                }

//                catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//                catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            
//        }
////----------------------------------------------------------------------------        
//        public void PrintBusinessTripDecreeCancel(List<BusinessTripsJournalDTO> source)
//        {
//            Object missingObj = System.Reflection.Missing.Value;
//            Object trueObj = true;
//            Object falseObj = false;

//            word = new Words.Application { CheckLanguage = true };

//            string reportname = "Наказ про відрядження №" + source[0].DecreeNumber.Replace("/", "_") + " від " + source[0].DecreeDate.Value.ToShortDateString();

//            try
//            {

//                const Words.WdParagraphAlignment alignCenter = Words.WdParagraphAlignment.wdAlignParagraphCenter;
//                const Words.WdParagraphAlignment alignLeft = Words.WdParagraphAlignment.wdAlignParagraphLeft;
//                document = word.Documents.Add();
//                document.Select();

//                var str = word.Selection;
//                str.TypeText("ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ");
//                var rng = document.Paragraphs[1].Range;
//                rng.LanguageID = Words.WdLanguageID.wdUkrainian;
//                rng.NoProofing = 0;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("НАУКОВО-ВИРОБНИЧА ФІРМА «ТЕХВАГОНМАШ»");
//                rng = document.Paragraphs[2].Range;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);

//                str.TypeText("НАКАЗ № " + source[0].DecreeNumber);
                
//                rng = document.Paragraphs[3].Range;
//                rng.Font.Bold = 0;
//                // подчеркивание ниже
//                //rng.Underline = Microsoft.Office.Interop.Word.WdUnderline.wdUnderlineSingle; 
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("про відміну відрядження ");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                var dat = source[0].DecreeDate.Value.ToString("dd MMMM yyyy", CultureInfo.CreateSpecificCulture("uk-UA"));
//                str.TypeText("м. Кременчук                                                                                                " + dat);
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(2);
//                rng = document.Paragraphs[6].Range;
//                rng.ParagraphFormat.LeftIndent = 12;
//                str.TypeText("В зв'язку зі зміною обставин");
//                str.ParagraphFormat.Alignment = alignLeft;

//                InsertLines(2);
//                str.TypeText("НАКАЗУЮ:");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("Відмінити відрядження:");
//                str.ParagraphFormat.Alignment = alignLeft;
//                var pad = new Ua();
//                var i = 1;

//                foreach (var item in source)
//                {
//                    InsertLines(1);

//                    var proffdative = (item.ProfessionNameGenitive != null) ? char.ToUpper(item.ProfessionNameGenitive[0]) + item.ProfessionNameGenitive.Substring(1) : String.Empty;

//                    var fio = pad.Q(item.Fio);

//                    //string lastName = pad.QSecondName("Ведмідь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string firstName = pad.QFirstName("Василь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string middleName = pad.QFirstName("Юрійович", NameCaseLib.NCL.Gender.Man)[3];

//                    //string fio = lastName + " " + firstName + " " + middleName;

//                    str.TypeText(i + ". " + proffdative + " " + fio[3] + " до " + item.FullCityName + ", " +
//                        (item.ContractorsID == 0 ? "" : item.ContractorName) + " з " + item.StartDate.Value.ToShortDateString() + "р. по " + item.EndDate.Value.ToShortDateString() + "р. з метою " + item.PurposeName + ".");
//                    str.ParagraphFormat.Alignment = alignLeft;
//                    i++;
//                }

//                InsertLines(4);
//                const string boss = "Валентин Кондрашов";
//                str.TypeText("Перший заступник директора                                                                  " + boss);
//                str.ParagraphFormat.Alignment = alignCenter;

//                if (SaveAsDoc(@"\Приказы о командировках\" + source[0].DecreeDate.Value.Year + @"\", reportname))
//                    word.Visible = true;
//            }
//            catch (Exception ex)
//            {
//                // MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                document.Close(ref falseObj, ref  missingObj, ref missingObj);
//                word.Quit(ref missingObj, ref  missingObj, ref missingObj);
//                document = null;
//                word = null;
//            }
//        }

//        public void PrintBusinessTripDecreeProlong(List<BusinessTripsJournalDTO> source)
//        {
//            Object missingObj = System.Reflection.Missing.Value;
//            Object trueObj = true;
//            Object falseObj = false;

//            word = new Words.Application { CheckLanguage = true };

//            string reportname = "Наказ про відрядження №" + source[0].DecreeNumber.Replace("/", "_") + " від " + source[0].DecreeDate.Value.ToShortDateString();

//            try
//            {
//                const Words.WdParagraphAlignment alignCenter = Words.WdParagraphAlignment.wdAlignParagraphCenter;
//                const Words.WdParagraphAlignment alignLeft = Words.WdParagraphAlignment.wdAlignParagraphLeft;
//                document = word.Documents.Add();
//                document.Select();

//                var str = word.Selection;
//                str.TypeText("ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ");
//                var rng = document.Paragraphs[1].Range;
//                rng.LanguageID = Words.WdLanguageID.wdUkrainian;
//                rng.NoProofing = 0;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("НАУКОВО-ВИРОБНИЧА ФІРМА «ТЕХВАГОНМАШ»");
//                rng = document.Paragraphs[2].Range;
//                rng.Font.Size = 12;
//                rng.Font.Bold = 1;
//                rng.Font.Name = "Times New Roman";
//                rng.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);

//                str.TypeText("НАКАЗ № " + source[0].DecreeNumber);
//                rng = document.Paragraphs[3].Range;
//                rng.Font.Bold = 0;
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("про зміну терміну відрядження ");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                var dat = source[0].DecreeDate.Value.ToString("dd MMMM yyyy", CultureInfo.CreateSpecificCulture("uk-UA"));
//                str.TypeText("м. Кременчук                                                                                                " + dat);
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(2);
//                rng = document.Paragraphs[6].Range;
//                rng.ParagraphFormat.LeftIndent = 12;
//                str.TypeText("В зв'язку з виробничою необхідністю");
//                str.ParagraphFormat.Alignment = alignLeft;

//                InsertLines(2);
//                str.TypeText("НАКАЗУЮ:");
//                str.ParagraphFormat.Alignment = alignCenter;

//                InsertLines(1);
//                str.TypeText("Змінити термін відрядження:");
//                str.ParagraphFormat.Alignment = alignLeft;
//                var pad = new Ua();
//                var i = 1;

//                foreach (var item in source)
//                {
//                    InsertLines(1);

//                    var proffdative = (item.ProfessionNameGenitive != null) ? char.ToUpper(item.ProfessionNameGenitive[0]) + item.ProfessionNameGenitive.Substring(1) : String.Empty;

//                    var fio = pad.Q(item.Fio);

//                    //string lastName = pad.QSecondName("Ведмідь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string firstName = pad.QFirstName("Василь", NameCaseLib.NCL.Gender.Man)[3];
//                    //string middleName = pad.QFirstName("Юрійович", NameCaseLib.NCL.Gender.Man)[3];

//                    //string fio = lastName + " " + firstName + " " + middleName;

//                    str.TypeText(i + ". " + proffdative + " " + fio[3] + " до " + item.FullCityName + ", " +
//                        (item.ContractorsID == 0 ? "" : item.ContractorName) + " з " + item.StartDate.Value.ToShortDateString() + "р. по " + item.EndDate.Value.ToShortDateString() + "р. з метою " + item.PurposeName + ".");
//                    str.ParagraphFormat.Alignment = alignLeft;
//                    i++;
//                }

//                InsertLines(4);
//                const string boss = "Валентин Кондрашов";
//                str.TypeText("Перший заступник директора                                                                  " + boss);
//                str.ParagraphFormat.Alignment = alignCenter;

//                if (SaveAsDoc(@"\Приказы о командировках\" + source[0].DecreeDate.Value.Year + @"\", reportname))
//                    word.Visible = true;
//            }
//            catch (Exception ex)
//            {
//                // MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                document.Close(ref falseObj, ref  missingObj, ref missingObj);
//                word.Quit(ref missingObj, ref  missingObj, ref missingObj);
//                document = null;
//                word = null;
//            }
//        }

//        public bool GetBSTReportByDepartments(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDateIn", startDate),
//                    new FbParameter("EndDateIn", endDate),
//                };

//            string procName = @"select * from ""BSTReportByDepartmentsProc""(@StartDateIn, @EndDateIn)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportByDepartments>, List<BusinessTripsReportByDepartmentsDTO>>(bstReportByDepartments.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportByDepartments(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportByDepartments(IEnumerable<BusinessTripsReportByDepartmentsDTO> reportSource, DateTime start, DateTime end)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = "Відрядження по відділам за період с " + start.ToShortDateString() + " по " + end.ToShortDateString();
//            var listname = "Відрядження по відділам";
//            var DateCol = 0;
//            var startRow = 0;
//            var activInterval = cells[startRow, DateCol, startRow, DateCol + 7];
//            activInterval.Merge();
//            activInterval.WrapText = true;
//            activInterval.Value = filename;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 16;
//            startRow = startRow + 2;
//            //cells[startRow, DateCol + 1, startRow + 2, DateCol + 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow, DateCol].Value = "№ п-п";
//            cells[startRow, DateCol].ColumnWidth = 4;

//            cells[startRow, DateCol + 1].Value = "П.І.Б. співробітника";
//            cells[startRow, DateCol + 1].ColumnWidth = 20;

//            cells[startRow, DateCol + 2].Value = "Табельний номер";
//            cells[startRow, DateCol + 2].ColumnWidth = 12;

//            cells[startRow, DateCol + 3].Value = "Посада";
//            cells[startRow, DateCol + 3].ColumnWidth = 50;

//            cells[startRow, DateCol + 4].Value = "Місто відрядження";
//            cells[startRow, DateCol + 4].ColumnWidth = 24;

//            cells[startRow, DateCol + 5].Value = "Дата початку";
//            cells[startRow, DateCol + 5].ColumnWidth = 14;

//            cells[startRow, DateCol + 6].Value = "Дата закінчення";
//            cells[startRow, DateCol + 6].ColumnWidth = 14;

//            cells[startRow, DateCol + 7].Value = "Кіл-ть днів";
//            cells[startRow, DateCol + 7].ColumnWidth = 6;

//            activInterval = cells[startRow, DateCol, startRow, DateCol + 7];
//            activInterval.WrapText = true;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 12;


//            int i = 1;
//            int u = 1;
//            int num = 1;
//            var listemp = reportSource.GroupBy(x => x.DepartmentID, (key, group) => group.FirstOrDefault()).ToList();

//            foreach (var item in listemp)
//            {
//                activInterval = cells[startRow + u, DateCol, startRow + u, DateCol + 7];
//                activInterval.Merge();
//                activInterval.WrapText = true;
//                activInterval.Value = item.Department;
//                activInterval.HorizontalAlignment = HAlign.Center;
//                activInterval.Font.Italic = true;
//                activInterval.Font.Bold = true;
//                activInterval.Font.Size = 11;
//                var item1 = item;
//                i = u + 1;
//                foreach (var r in reportSource.Where(x => x.DepartmentID == item1.DepartmentID))
//                {
//                    cells[startRow + i, DateCol].Value = num;
//                    cells[startRow + i, DateCol + 1].Value = r.Fio;
//                    cells[startRow + i, DateCol + 2].Value = r.AccountNumber;
//                    cells[startRow + i, DateCol + 2].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + i, DateCol + 3].Value = r.Profession;
//                    cells[startRow + i, DateCol + 4].Value = r.CityName + ", " + r.CountryName;
//                    cells[startRow + i, DateCol + 5].Value = r.StartDate;
//                    cells[startRow + i, DateCol + 5].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + i, DateCol + 6].Value = r.EndDate;
//                    cells[startRow + i, DateCol + 6].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + i, DateCol + 7].Value = r.AmountDays;
//                    cells[startRow + i, DateCol + 7].HorizontalAlignment = HAlign.Center;

//                    i++;
//                    num++;
//                }
//                u = i;
//            }
//            cells[2, 0, u + 1, DateCol + 7].Borders.LineStyle = LineStyle.Continous;

//            worksheet.Name = listname;
//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);
            
//            return true;            
//        }

//        public bool GetBSTReportPaymentsByAccountId(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartReportDate", startDate),
//                    new FbParameter("EndReportDate", endDate),
//                    new FbParameter("AccountId", accountId),
//                };

//            string procName = @"select * from ""BSTReportPaymentsByAccountId""(@StartReportDate, @EndReportDate, @AccountId)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPaymentsByAccountId>, List<BusinessTripsReportPaymentsByAccountIdDTO>>(bstReportPaymentsByAccountId.SQLExecuteProc(procName, Parameters));
            
//            return PrintBSTReportPaymentsByAccountId(dataSource, startDate, endDate, accountNum);
//        }

//        private bool PrintBSTReportPaymentsByAccountId(IEnumerable<BusinessTripsReportPaymentsByAccountIdDTO> reportSource, DateTime start, DateTime end, string accountNum)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            //foreach (var item in reportSource)
//            //{
//            //    item.
//            //}

//            List<BusinessTripsReportPaymentsByAccountIdDTO> rowData = reportSource.OrderBy(ord => ord.BusinessTripsDetailsID).ToList();
//            //List<BusinessTripsReportPaymentsByAccountIdDTO> rowData = reportSource.ToList();

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = String.Format("Звіт по бал.рах {0} у відрядженнях за період з {1} по {2}", accountNum, start.ToShortDateString(), end.ToShortDateString());
            
//            int DateCol = 0;
//            int startRow = 0;
//            int endRow = 0;

//            var activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.Merge();
//            activInterval.WrapText = true;
//            activInterval.Value = filename;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 14;
            
//            startRow = startRow + 2;
//            endRow = startRow;
            
//            cells[startRow, DateCol].Value = "№ з/п";
//            cells[startRow, DateCol].ColumnWidth = 4;

//            cells[startRow, DateCol + 1].Value = "П.І.Б. співробітника";
//            cells[startRow, DateCol + 1].ColumnWidth = 40;

//            cells[startRow, DateCol + 2].Value = "Сума";
//            cells[startRow, DateCol + 2].ColumnWidth = 18;

//            cells[startRow, DateCol + 3].Value = "Заказ";
//            cells[startRow, DateCol + 3].ColumnWidth = 18;

//            cells[startRow, DateCol + 4].Value = "Місце відрядження";
//            cells[startRow, DateCol + 4].ColumnWidth = 30;

//            cells[startRow, DateCol + 5].Value = "Дата початку";
//            cells[startRow, DateCol + 5].ColumnWidth = 12;

//            cells[startRow, DateCol + 6].Value = "Дата закінчення";
//            cells[startRow, DateCol + 6].ColumnWidth = 12;

//            cells[startRow, DateCol + 7].Value = "Дата звіту";
//            cells[startRow, DateCol + 7].ColumnWidth = 12;

//            cells[startRow, DateCol + 8].Value = "Країна";
//            cells[startRow, DateCol + 8].ColumnWidth = 20;

//            cells[startRow, DateCol + 9].Value = "Місто";
//            cells[startRow, DateCol + 9].ColumnWidth = 20;

//            activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.WrapText = true;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 12;

//            startRow++;

//            int k = 1;
//            int i = 0;
//            decimal paymentSum = 0;
           
//            int currentRow = 0;
             
//            int recordNumber = 1;
           
//            while (i < rowData.Count)
//            {

//                int kount = rowData.Count(bdsm => bdsm.BusinessTripsDetailsID == rowData[i].BusinessTripsDetailsID);
//                paymentSum = rowData.Where(o => o.BusinessTripsDetailsID == rowData[i].BusinessTripsDetailsID).Sum(o => o.Payment);
//                int countOrderBusinessTrips = GetBusinessOrderCustByBTId(rowData[i].BusinessTripsId).Count;

//                if (countOrderBusinessTrips == 0)
//                {
//                    ++countOrderBusinessTrips;
//                }

//                if (countOrderBusinessTrips > 1)
//                {
//                    List<BusinessTripsOrderCustDTO> businessTripsCust = GetBusinessOrderCustByBTId(rowData[i].BusinessTripsId);
//                    k = countOrderBusinessTrips - 1;
//                    cells["A" + ((startRow + currentRow) + 1) + ":" + "A" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["B" + ((startRow + currentRow) + 1) + ":" + "B" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["C" + ((startRow + currentRow) + 1) + ":" + "C" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["E" + ((startRow + currentRow) + 1) + ":" + "E" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["F" + ((startRow + currentRow) + 1) + ":" + "F" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["G" + ((startRow + currentRow) + 1) + ":" + "G" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["H" + ((startRow + currentRow) + 1) + ":" + "H" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["I" + ((startRow + currentRow) + 1) + ":" + "I" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["E" + ((startRow + currentRow) + 1) + ":" + "E" + ((startRow + currentRow) + k + 1)].Merge();
//                    cells["J" + ((startRow + currentRow) + 1) + ":" + "J" + ((startRow + currentRow) + k + 1)].Merge();

//                    for (int j = 0; j < countOrderBusinessTrips; ++j)
//                    {
//                        cells[startRow + currentRow + j, DateCol + 1].Value = rowData[i + j].Fio;
//                        cells[startRow + currentRow + j, DateCol + 1].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 2].Value = paymentSum / countOrderBusinessTrips;
//                        cells[startRow + currentRow + j, DateCol + 2].HorizontalAlignment = HAlign.Left;
//                        cells[startRow + currentRow + j, DateCol + 2].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 2].NumberFormat = "### ### ##0.00";
//                        cells[startRow + currentRow + j, DateCol + 3].Value = businessTripsCust[j].OrderNumber;
//                        cells[startRow + currentRow + j, DateCol + 3].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 3].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 4].Value = rowData[i + j].Name;
//                        cells[startRow + currentRow + j, DateCol + 4].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 5].Value = rowData[i + j].StartDate;
//                        cells[startRow + currentRow + j, DateCol + 5].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 5].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 6].Value = rowData[i + j].EndDate;
//                        cells[startRow + currentRow + j, DateCol + 6].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 6].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 7].Value = rowData[i + j].PaymentDate;
//                        cells[startRow + currentRow + j, DateCol + 7].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 7].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 8].Value = rowData[i + j].CountryName_UA;
//                        cells[startRow + currentRow + j, DateCol + 8].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 8].VerticalAlignment = VAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 9].Value = rowData[i + j].CityName_UA;
//                        cells[startRow + currentRow + j, DateCol + 9].HorizontalAlignment = HAlign.Center;
//                        cells[startRow + currentRow + j, DateCol + 9].VerticalAlignment = VAlign.Center;
//                    }


//                    cells[startRow + currentRow, DateCol].Value = recordNumber;
//                    cells[startRow + currentRow, DateCol].VerticalAlignment = VAlign.Center;

                    


//                }
//                else
//                {
//                    cells[startRow + currentRow, DateCol].Value = recordNumber;
//                    cells[startRow + currentRow, DateCol + 1].Value = rowData[i].Fio;
//                    cells[startRow + currentRow, DateCol + 2].Value = paymentSum;
//                    cells[startRow + currentRow, DateCol + 2].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + currentRow, DateCol + 2].VerticalAlignment = VAlign.Center;
//                    cells[startRow + currentRow, DateCol + 2].NumberFormat = "### ### ##0.00";
//                    cells[startRow + currentRow, DateCol + 3].Value = rowData[i].OrderNumber;
//                    cells[startRow + currentRow, DateCol + 4].Value = rowData[i].Name;
//                    cells[startRow + currentRow, DateCol + 5].Value = rowData[i].StartDate;
//                    cells[startRow + currentRow, DateCol + 5].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + currentRow, DateCol + 6].Value = rowData[i].EndDate;
//                    cells[startRow + currentRow, DateCol + 6].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + currentRow, DateCol + 7].Value = rowData[i].PaymentDate;
//                    cells[startRow + currentRow, DateCol + 7].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + currentRow, DateCol + 8].Value = rowData[i].CountryName_UA;
//                    cells[startRow + currentRow, DateCol + 8].HorizontalAlignment = HAlign.Center;
//                    cells[startRow + currentRow, DateCol + 9].Value = rowData[i].CityName_UA;
//                    cells[startRow + currentRow, DateCol + 9].HorizontalAlignment = HAlign.Center;

//                    File.AppendAllText("D:\\log.txt", rowData[i].Fio.ToString()+" ");
//                //    File.AppendAllText("D:\\log.txt", "\n");
//                }
               

//                currentRow = currentRow + countOrderBusinessTrips;
//                i = i + kount;

//                recordNumber++;

//                endRow = endRow + countOrderBusinessTrips;

                
//            }

//            endRow+=4;

//            cells[endRow, 0, endRow, DateCol + 9].Interior.Color = Color.Coral;
//            cells["B" + (endRow + 1)].HorizontalAlignment = HAlign.Left;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Bold = true;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Size = 12;
//            cells["B" + (endRow + 1)].Value = "Всього:";

//            cells["C" + (endRow + 1)].NumberFormat = "### ### ##0.00";

//            //cells["c" + (endRow + 1)].Value = paymentSum;

//            cells["C" + (endRow + 1)].Formula = "=SUM( C4:C" + (endRow-3) + ")";

//            cells[startRow - 1, 0, endRow, DateCol + 9].Borders.LineStyle = LineStyle.Continous;
                        
//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);
            
//            return true;
//        }

//        public bool GetBSTReportPaymentsByVatAccountId(DateTime startDate, DateTime endDate, int vatAccountId, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartReportDate", startDate),
//                    new FbParameter("EndReportDate", endDate),
//                    new FbParameter("VatAccountId", vatAccountId),
//                };

//            string procName = @"select * from ""BSTReportPaymentsByVatAccountId""(@StartReportDate, @EndReportDate, @VatAccountId)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPaymentsByAccountId>, List<BusinessTripsReportPaymentsByAccountIdDTO>>(bstReportPaymentsByAccountId.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportPaymentsByVatAccountId(dataSource, startDate, endDate, accountNum);
//        }

//        private bool PrintBSTReportPaymentsByVatAccountId(IEnumerable<BusinessTripsReportPaymentsByAccountIdDTO> reportSource, DateTime start, DateTime end, string accountNum)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            List<BusinessTripsReportPaymentsByAccountIdDTO> rowData = reportSource.ToList();

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = String.Format("Звіт по бал.рах {0} у відрядженнях за період з {1} по {2}", accountNum, start.ToShortDateString(), end.ToShortDateString());

//            int DateCol = 0;
//            int startRow = 0;
//            int endRow = 0;

//            var activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.Merge();
//            activInterval.WrapText = true;
//            activInterval.Value = filename;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 14;

//            startRow = startRow + 2;
//            endRow = startRow;

//            //cells[startRow, DateCol + 1, startRow + 2, DateCol + 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow, DateCol].Value = "№ з/п";
//            cells[startRow, DateCol].ColumnWidth = 4;

//            cells[startRow, DateCol + 1].Value = "П.І.Б. співробітника";
//            cells[startRow, DateCol + 1].ColumnWidth = 40;

//            cells[startRow, DateCol + 2].Value = "Сума";
//            cells[startRow, DateCol + 2].ColumnWidth = 18;

//            cells[startRow, DateCol + 3].Value = "Заказ";
//            cells[startRow, DateCol + 3].ColumnWidth = 18;

//            cells[startRow, DateCol + 4].Value = "Місце відрядження";
//            cells[startRow, DateCol + 4].ColumnWidth = 30;

//            cells[startRow, DateCol + 5].Value = "Дата початку";
//            cells[startRow, DateCol + 5].ColumnWidth = 12;

//            cells[startRow, DateCol + 6].Value = "Дата закінчення";
//            cells[startRow, DateCol + 6].ColumnWidth = 12;

//            cells[startRow, DateCol + 7].Value = "Дата звіту";
//            cells[startRow, DateCol + 7].ColumnWidth = 12;

//            cells[startRow, DateCol + 8].Value = "Країна";
//            cells[startRow, DateCol + 8].ColumnWidth = 20;

//            cells[startRow, DateCol + 9].Value = "Місто";
//            cells[startRow, DateCol + 9].ColumnWidth = 20;

//            activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.WrapText = true;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 12;

//            startRow++;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells[startRow + i, DateCol].Value = i + 1;
//                cells[startRow + i, DateCol + 1].Value = rowData[i].Fio;
//                cells[startRow + i, DateCol + 2].Value = rowData[i].Payment;
//                cells[startRow + i, DateCol + 2].NumberFormat = "### ### ##0.00";
//                cells[startRow + i, DateCol + 3].Value = rowData[i].OrderNumber;
//                cells[startRow + i, DateCol + 4].Value = rowData[i].Name;
//                cells[startRow + i, DateCol + 5].Value = rowData[i].StartDate;
//                cells[startRow + i, DateCol + 5].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 6].Value = rowData[i].EndDate;
//                cells[startRow + i, DateCol + 6].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 7].Value = rowData[i].PaymentDate;
//                cells[startRow + i, DateCol + 7].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 8].Value = rowData[i].CountryName_UA;
//                cells[startRow + i, DateCol + 8].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 9].Value = rowData[i].CityName_UA;
//                cells[startRow + i, DateCol + 9].HorizontalAlignment = HAlign.Center;

//                endRow++;
//            }

//            endRow++;

//            cells[endRow, 0, endRow, DateCol + 9].Interior.Color = Color.Coral;
//            cells["B" + (endRow + 1)].HorizontalAlignment = HAlign.Left;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Bold = true;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Size = 12;
//            cells["B" + (endRow + 1)].Value = "Всього:";

//            cells["C" + (endRow + 1)].NumberFormat = "### ### ##0.00";

//            cells["c" + (endRow + 1)].Value = rowData.Sum(s => s.Payment);

//            cells[startRow - 1, 0, endRow, DateCol + 9].Borders.LineStyle = LineStyle.Continous;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);

//            return true;
//        }

//        public bool GetBSTReportPrepaymentsByAccountId(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartReportDate", startDate),
//                    new FbParameter("EndReportDate", endDate),
//                    new FbParameter("AccountId", accountId),
//                };

//            string procName = @"select * from ""BSTReportPrepaymentsByAccountId""(@StartReportDate, @EndReportDate, @AccountId)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPrepaymentsByAccountId>, List<BusinessTripsReportPrepaymentsByAccountIdDTO>>(bstReportPrepaymentsByAccountId.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportPrepaymentsByAccountId(dataSource, startDate, endDate, accountNum);
//        }

//        private bool PrintBSTReportPrepaymentsByAccountId(IEnumerable<BusinessTripsReportPrepaymentsByAccountIdDTO> reportSource, DateTime start, DateTime end, string accountNum)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            List<BusinessTripsReportPrepaymentsByAccountIdDTO> rowData = reportSource.ToList();

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = String.Format("Звіт по бал.рах {0} у відрядженнях за період з {1} по {2}", accountNum, start.ToShortDateString(), end.ToShortDateString());

//            int DateCol = 0;
//            int startRow = 0;
//            int endRow = 0;

//            var activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.Merge();
//            activInterval.WrapText = true;
//            activInterval.Value = filename;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 14;

//            startRow = startRow + 2;
//            endRow = startRow;

//            //cells[startRow, DateCol + 1, startRow + 2, DateCol + 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow, DateCol].Value = "№ з/п";
//            cells[startRow, DateCol].ColumnWidth = 4;

//            cells[startRow, DateCol + 1].Value = "П.І.Б. співробітника";
//            cells[startRow, DateCol + 1].ColumnWidth = 40;

//            cells[startRow, DateCol + 2].Value = "Сума";
//            cells[startRow, DateCol + 2].ColumnWidth = 18;

//            cells[startRow, DateCol + 3].Value = "Заказ";
//            cells[startRow, DateCol + 3].ColumnWidth = 18;

//            cells[startRow, DateCol + 4].Value = "Місце відрядження";
//            cells[startRow, DateCol + 4].ColumnWidth = 30;

//            cells[startRow, DateCol + 5].Value = "Дата початку";
//            cells[startRow, DateCol + 5].ColumnWidth = 12;

//            cells[startRow, DateCol + 6].Value = "Дата закінчення";
//            cells[startRow, DateCol + 6].ColumnWidth = 12;

//            cells[startRow, DateCol + 7].Value = "Дата звіту";
//            cells[startRow, DateCol + 7].ColumnWidth = 12;

//            cells[startRow, DateCol + 8].Value = "Країна";
//            cells[startRow, DateCol + 8].ColumnWidth = 20;

//            cells[startRow, DateCol + 9].Value = "Місто";
//            cells[startRow, DateCol + 9].ColumnWidth = 20;

//            activInterval = cells[startRow, DateCol, startRow, DateCol + 9];
//            activInterval.WrapText = true;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 12;

//            startRow++;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells[startRow + i, DateCol].Value = i + 1;
//                cells[startRow + i, DateCol + 1].Value = rowData[i].Fio;
//                cells[startRow + i, DateCol + 2].Value = rowData[i].Prepayment;
//                cells[startRow + i, DateCol + 2].NumberFormat = "### ### ##0.00";
//                cells[startRow + i, DateCol + 3].Value = rowData[i].OrderNumber;
//                cells[startRow + i, DateCol + 4].Value = rowData[i].Name;
//                cells[startRow + i, DateCol + 5].Value = rowData[i].StartDate;
//                cells[startRow + i, DateCol + 5].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 6].Value = rowData[i].EndDate;
//                cells[startRow + i, DateCol + 6].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 7].Value = rowData[i].PrepaymentDate;
//                cells[startRow + i, DateCol + 7].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 8].Value = rowData[i].CountryName_UA;
//                cells[startRow + i, DateCol + 8].HorizontalAlignment = HAlign.Center;
//                cells[startRow + i, DateCol + 9].Value = rowData[i].CityName_UA;
//                cells[startRow + i, DateCol + 9].HorizontalAlignment = HAlign.Center;

//                endRow++;
//            }

//            endRow++;

//            cells[endRow, 0, endRow, DateCol + 9].Interior.Color = Color.Coral;
//            cells["B" + (endRow + 1)].HorizontalAlignment = HAlign.Left;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Bold = true;
//            cells[endRow, 0, endRow, DateCol + 9].Font.Size = 12;
//            cells["B" + (endRow + 1)].Value = "Всього:";

//            cells["C" + (endRow + 1)].NumberFormat = "### ### ##0.00";

//            cells["c" + (endRow + 1)].Value = rowData.Sum(s => s.Prepayment);

//            cells[startRow - 1, 0, endRow, DateCol + 9].Borders.LineStyle = LineStyle.Continous;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);
            
//            return true;
//        }


//        public bool GetBSTReportPrepaymentsSumByAccount313(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartReportDate", startDate),
//                    new FbParameter("EndReportDate", endDate)
//                };

//            string procName = @"select * from ""BSTReportPrepaymentByAccount313""(@StartReportDate, @EndReportDate)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPrepaymentsByAccountShort>, List<BusinessTripsReportPrepaymentsByAccountShortDTO>>(businessTripsReportPrepaymentsByAccountShort.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportPrepaymentsByAccountShort(dataSource, startDate, endDate, "313");
//        }

//        public bool GetBSTReportPrepaymentsSumByAccountShort(DateTime startDate, DateTime endDate, short accountId, string accountNumber)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartReportDate", startDate),
//                    new FbParameter("EndReportDate", endDate),
//                    new FbParameter("Account_Id", accountId)
//                };

//            string procName = @"select * from ""BSTReportPrepaymentAccountShort""(@StartReportDate, @EndReportDate, @Account_Id)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPrepaymentsByAccountShort>, List<BusinessTripsReportPrepaymentsByAccountShortDTO>>(businessTripsReportPrepaymentsByAccountShort.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportPrepaymentsByAccountShort(dataSource, startDate, endDate, accountNumber);
//        }

//        private bool PrintBSTReportPrepaymentsByAccountShort(IEnumerable<BusinessTripsReportPrepaymentsByAccountShortDTO> reportSource, DateTime start, DateTime end, string accountNumber)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            List<BusinessTripsReportPrepaymentsByAccountShortDTO> rowData = reportSource.ToList();

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = String.Format("Звіт по рах. {0} у відрядженнях за період з {1} по {2}",accountNumber, start.ToShortDateString(), end.ToShortDateString());

//            int DateCol = 0;
//            int startRow = 0;
//            int endRow = 0;

//            var activInterval = cells[startRow, DateCol, startRow, DateCol + 3];
//            activInterval.Merge();
//            activInterval.WrapText = true;
//            activInterval.Value = filename;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 14;

//            startRow = startRow + 2;
//            endRow = startRow;

//            //cells[startRow, DateCol + 1, startRow + 2, DateCol + 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow, DateCol].Value = "№ з/п";
//            cells[startRow, DateCol].ColumnWidth = 4;

//            cells[startRow, DateCol + 1].Value = "Номер рахунка";
//            cells[startRow, DateCol + 1].ColumnWidth = 25;
//            cells[startRow, DateCol + 1].HorizontalAlignment = HAlign.Center;

//            cells[startRow, DateCol + 2].Value = "П.І.Б. співробітника";
//            cells[startRow, DateCol + 2].ColumnWidth = 55;

//            cells[startRow, DateCol + 3].Value = "Сума";
//            cells[startRow, DateCol + 3].ColumnWidth = 25;
//            cells[startRow, DateCol + 3].HorizontalAlignment = HAlign.Justify;

//            activInterval = cells[startRow, DateCol, startRow, DateCol + 3];
//            activInterval.WrapText = true;
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval.VerticalAlignment = VAlign.Center;
//            activInterval.Font.Bold = true;
//            activInterval.Font.Size = 12;

//            startRow++;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells[startRow + i, DateCol].Value = i + 1;
//                cells[startRow + i, DateCol].HorizontalAlignment = HAlign.Center;

//                cells[startRow + i, DateCol + 1].Value = rowData[i].AccountName;
//                cells[startRow + i, DateCol + 1].HorizontalAlignment = HAlign.Center;

//                cells[startRow + i, DateCol + 2].Value = rowData[i].Fio;
//                cells[startRow + i, DateCol + 2].HorizontalAlignment = HAlign.Justify;


//                cells[startRow + i, DateCol + 3].Value = rowData[i].PrepaymentSum;
//                cells[startRow + i, DateCol + 3].NumberFormat = "### ### ##0.00";


//                endRow++;
//            }

//            endRow++;

//            cells[endRow, 0, endRow, DateCol + 3].Interior.Color = Color.Coral;
//            cells["C" + (endRow + 1)].HorizontalAlignment = HAlign.Left;
//            cells[endRow, 0, endRow, DateCol + 3].Font.Bold = true;
//            cells[endRow, 0, endRow, DateCol + 3].Font.Size = 12;
//            cells["C" + (endRow + 1)].Value = "Всього:";

//            cells["D" + (endRow + 1)].NumberFormat = "### ### ##0.00";

//            cells["D" + (endRow + 1)].Value = rowData.Sum(s => s.PrepaymentSum);

//            cells[startRow - 1, 0, endRow, DateCol + 3].Borders.LineStyle = LineStyle.Continous;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);

//            return true;
//        }


//        //private bool PrintBSTReportPrepaymentsByAccount313(IEnumerable<BusinessTripsReportPrepaymentsByAccountShortDTO> reportSource, DateTime start, DateTime end)
//        //{
//        //    if (reportSource.Count() == 0)
//        //        return false;

//        //    List<BusinessTripsReportPrepaymentsByAccountShortDTO> rowData = reportSource.ToList();

//        //    var workbook = Factory.GetWorkbook();
//        //    var worksheet = workbook.Worksheets[0];
//        //    var cells = worksheet.Cells;
//        //    var filename = String.Format("Звіт по рах. 313 у відрядженнях за період з {0} по {1}", start.ToShortDateString(), end.ToShortDateString());

//        //    int DateCol = 0;
//        //    int startRow = 0;
//        //    int endRow = 0;

//        //    var activInterval = cells[startRow, DateCol, startRow, DateCol + 3];
//        //    activInterval.Merge();
//        //    activInterval.WrapText = true;
//        //    activInterval.Value = filename;
//        //    activInterval.HorizontalAlignment = HAlign.Center;
//        //    activInterval.Font.Bold = true;
//        //    activInterval.Font.Size = 14;

//        //    startRow = startRow + 2;
//        //    endRow = startRow;

//        //    //cells[startRow, DateCol + 1, startRow + 2, DateCol + 1].Merge();//Y1,X1,Y2,X2 
//        //    cells[startRow, DateCol].Value = "№ з/п";
//        //    cells[startRow, DateCol].ColumnWidth = 4;

//        //    cells[startRow, DateCol + 1].Value = "Номер рахунка";
//        //    cells[startRow, DateCol + 1].ColumnWidth = 25;
//        //    cells[startRow, DateCol + 1].HorizontalAlignment = HAlign.Center;

//        //    cells[startRow, DateCol + 2].Value = "П.І.Б. співробітника";
//        //    cells[startRow, DateCol + 2].ColumnWidth = 55;

//        //    cells[startRow, DateCol + 3].Value = "Сума";
//        //    cells[startRow, DateCol + 3].ColumnWidth = 25;
//        //    cells[startRow, DateCol + 3].HorizontalAlignment = HAlign.Justify;

//        //    activInterval = cells[startRow, DateCol, startRow, DateCol + 3];
//        //    activInterval.WrapText = true;
//        //    activInterval.HorizontalAlignment = HAlign.Center;
//        //    activInterval.VerticalAlignment = VAlign.Center;
//        //    activInterval.Font.Bold = true;
//        //    activInterval.Font.Size = 12;

//        //    startRow++;

//        //    for (int i = 0; i < rowData.Count; i++)
//        //    {
//        //        cells[startRow + i, DateCol].Value = i + 1;
//        //        cells[startRow + i, DateCol].HorizontalAlignment = HAlign.Center;

//        //        cells[startRow + i, DateCol + 1].Value = rowData[i].AccountName;
//        //        cells[startRow + i, DateCol + 1].HorizontalAlignment = HAlign.Center;

//        //        cells[startRow + i, DateCol + 2].Value = rowData[i].Fio;
//        //        cells[startRow + i, DateCol + 2].HorizontalAlignment = HAlign.Justify;


//        //        cells[startRow + i, DateCol + 3].Value = rowData[i].PrepaymentSum;
//        //        cells[startRow + i, DateCol + 3].NumberFormat = "### ### ##0.00";


//        //        endRow++;
//        //    }

//        //    endRow++;

//        //    cells[endRow, 0, endRow, DateCol + 3].Interior.Color = Color.Coral;
//        //    cells["C" + (endRow + 1)].HorizontalAlignment = HAlign.Left;
//        //    cells[endRow, 0, endRow, DateCol + 3].Font.Bold = true;
//        //    cells[endRow, 0, endRow, DateCol + 3].Font.Size = 12;
//        //    cells["C" + (endRow + 1)].Value = "Всього:";

//        //    cells["D" + (endRow + 1)].NumberFormat = "### ### ##0.00";

//        //    cells["D" + (endRow + 1)].Value = rowData.Sum(s => s.PrepaymentSum);

//        //    cells[startRow - 1, 0, endRow, DateCol + 3].Borders.LineStyle = LineStyle.Continous;

//        //    SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//        //    RunXls(@"\Отчеты\Командировки\", filename);

//        //    return true;
//        //}

//        public bool GetBSTReportPaymentsByPeriod(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""BSTReportPaymentsByPeriod""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<BusinessTripsReportPaymentsByPeriod>, List<BusinessTripsReportPaymentsByPeriodDTO>>(bstReportPaymentsByPeriod.SQLExecuteProc(procName, Parameters));

//            return PrintBSTReportPaymentsByPeriod(dataSource, startDate, endDate);
//        }

//        private bool PrintBSTReportPaymentsByPeriod(IEnumerable<BusinessTripsReportPaymentsByPeriodDTO> reportSource, DateTime startDate, DateTime endDate)
//        {
//            if (reportSource.Count() == 0)
//                return false;

//            List<BusinessTripsReportPaymentsByPeriodDTO> rowData = reportSource.ToList();

//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var filename = String.Format("Звіти по відрядженням за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString());

//            int startRow = 0;
//            int bstdId = 0;
//            int recCounter = 1;
//            IRange activInterval;

//            cells["A1"].ColumnWidth = 8;
//            cells["B1"].ColumnWidth = 10;
//            cells["C1"].ColumnWidth = 30;
//            cells["D1"].ColumnWidth = 30;
//            cells["E1"].ColumnWidth = 10;
//            cells["F1"].ColumnWidth = 15;
//            cells["G1"].ColumnWidth = 8;
//            cells["H1"].ColumnWidth = 15;
//            cells["I1"].ColumnWidth = 10;
//            cells["J1"].ColumnWidth = 15;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (bstdId != rowData[i].BusinessTripsDetailId)
//                {
//                    if (bstdId != 0)
//                    {
//                        cells[startRow, 4].Value = "Всього:";
//                        cells[startRow, 5].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.VatPayment);
//                        cells[startRow, 7].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.CurrencyPayment);
//                        cells[startRow, 9].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.Payment);

//                        activInterval = cells[startRow, 0, startRow, 9];
//                        activInterval.HorizontalAlignment = HAlign.Right;
//                        activInterval.Interior.Color = Color.WhiteSmoke;
//                        activInterval.NumberFormat = "### ### ##0.00";
//                        activInterval.Font.Bold = true;

//                        cells[startRow - recCounter, 0, startRow, 9].Borders.LineStyle = LineStyle.Continous;

//                        activInterval = cells[startRow + 1, 0, startRow + 1, 9];
//                        activInterval.Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.DashDot;
                        
//                        startRow = startRow + 3;
//                    }

//                    bstdId = rowData[i].BusinessTripsDetailId;

//                    recCounter = 1;
                                        
//                    cells[startRow, 0].Value = rowData[i].Fio;
//                    cells[startRow, 0].Font.Bold = true;
//                    startRow++;
                    
//                    cells[startRow, 0].Value = "№ з/п";
//                    cells[startRow, 1].Value = "Дата звіту";
//                    cells[startRow, 2].Value = "Найменування документу";
//                    cells[startRow, 3].Value = "Примітка";
//                    cells[startRow, 4].Value = "Рах. ПДВ";
//                    cells[startRow, 5].Value = "Сума ПДВ";
//                    cells[startRow, 6].Value = "Валюта";
//                    cells[startRow, 7].Value = "Сума у валюті";
//                    cells[startRow, 8].Value = "Рахунок";
//                    cells[startRow, 9].Value = "Сума";

//                    activInterval = cells[startRow, 0, startRow, 9];
//                    activInterval.HorizontalAlignment = HAlign.Center;
//                    activInterval.Borders.LineStyle = LineStyle.Continous;
//                    activInterval.Font.Bold = true;

//                    startRow++;
//                }

//                cells[startRow, 0].HorizontalAlignment = HAlign.Center;
//                cells[startRow, 0].Value = recCounter;
//                cells[startRow, 1].Value = rowData[i].Payment_Date;
//                cells[startRow, 2].Value = rowData[i].ReportName;
//                cells[startRow, 3].Value = rowData[i].Comment;
//                cells[startRow, 4].HorizontalAlignment = HAlign.Right;
//                cells[startRow, 4].Value = rowData[i].VatAccountNum;
//                cells[startRow, 5].NumberFormat = "### ### ##0.00";
//                cells[startRow, 5].Value = rowData[i].VatPayment;
//                cells[startRow, 6].Value = rowData[i].CurrencyName;
//                cells[startRow, 7].NumberFormat = "### ### ##0.00";
//                cells[startRow, 7].Value = rowData[i].CurrencyPayment;
//                cells[startRow, 8].HorizontalAlignment = HAlign.Right;
//                cells[startRow, 8].Value = rowData[i].AccountNum;
//                cells[startRow, 9].NumberFormat = "### ### ##0.00";
//                cells[startRow, 9].Value = rowData[i].Payment;
                
//                recCounter++;
//                startRow++;

//            }

//            cells[startRow, 4].Value = "Всього:";
//            cells[startRow, 5].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.VatPayment);
//            cells[startRow, 7].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.CurrencyPayment);
//            cells[startRow, 9].Value = rowData.Where(w => w.BusinessTripsDetailId == bstdId).Sum(s => s.Payment);

//            activInterval = cells[startRow, 0, startRow, 9];
//            activInterval.HorizontalAlignment = HAlign.Right;
//            activInterval.Interior.Color = Color.WhiteSmoke;
//            activInterval.NumberFormat = "### ### ##0.00";
//            activInterval.Font.Bold = true;

//            cells[startRow - recCounter, 0, startRow, 9].Borders.LineStyle = LineStyle.Continous;

//            SaveAsXls(workbook, @"\Отчеты\Командировки\", filename);
//            RunXls(@"\Отчеты\Командировки\", filename);

//            return true;
        
//        }

//        public IEnumerable<BusinessTripsPaymentStatementDTO> GetBSTPaymentStatement(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };

//            string procName = @"select * from ""BSTPaymentStatementProc""(@StartDate, @EndDate)";


//            var dataSource = mapper.Map<IEnumerable<BusinessTripsPaymentStatement>, List<BusinessTripsPaymentStatementDTO>>(bstPaymentStatement.SQLExecuteProc(procName, Parameters));

//            return dataSource;
//        }

//        public bool PrintBSTPaymentStatement(List<BusinessTripsPaymentStatementDTO> source, DateTime start, DateTime end)
//        {
//            string templateName = @"\Templates\BusinessTripsPaymentStatementTemplate.xls";

//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            string statementDate = RuDateAndMoneyConverter.DateToTextLong(start);



//            IRange cells = Worksheet.Cells;
//            int recCount = source.Count();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();
//            int startPosition = 4, currentPosition = startPosition + 2;
//            byte startHeaderPosition = 1;

            

//            int currentColumn = 2;

//            Сells["A" + 4].Value = "за " + statementDate + " року";
//            Сells["A" + 4].HorizontalAlignment = HAlign.Center;

      

            
//            int startWith = 15;
//            int k = startWith; 




//            for (int i = 0; i < source.Count; i++)
//            {

                

//                Сells["" + startWith + ":" + startWith].Insert();
                

//                Сells["A" + startWith].Value = (i+1);
//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;

//                Сells["B" + startWith + ":" + "C" + startWith].Merge();
//                Сells["B" + startWith + ":" + "C" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["B" + startWith + ":" + "C" + startWith].Value = source[i].AccountNumber;

//                Сells["D" + startWith + ":" + "G" + startWith].Merge();
//                Сells["D" + startWith + ":" + "G" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["D" + startWith + ":" + "G" + startWith].Value = source[i].Fio;

//                Сells["H" + startWith + ":" + "I" + startWith].Merge();
//                Сells["H" + startWith + ":" + "I" + startWith].HorizontalAlignment = HAlign.Right;
//                Сells["H" + startWith].NumberFormat = "### ### ##0.00";
//                Сells["H" + startWith].Value = source[i].CreditEnd;

//                Сells["J" + startWith + ":" + "K" + startWith].Merge();
//                Сells["J" + startWith + ":" + "K" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["J" + startWith + ":" + "K" + startWith].Borders.LineStyle = LineStyle.Continuous;
//                Сells["J" + startWith].Value = source[i].IdentNumber;

//                ++startWith;

//            }

//            startWith += 7;
//            cells["H" + startWith].Formula = "=SUM(" + "H" + k + ":" + "H" + (--startWith) + ")"; //строка,столбец
//            Сells["H" + startWith].HorizontalAlignment = HAlign.Center;
//            Сells["H" + startWith].NumberFormat = "### ### ##0.00";

//            // convert number to words - cell all Credit = G6
//            double convertPayment = Convert.ToDouble(source.Sum(s => s.CreditEnd));
//            Сells["E" + 6].Value =  RuDateAndMoneyConverter.CurrencyToTxt(convertPayment, true);
//            Сells["E" + 6].HorizontalAlignment = HAlign.Center;


//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Відомість на виплату за " + start.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість на виплату за " + start.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }

//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкрито!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


//            return true;
//        }


//        #endregion

//        #region CashBook report's


//        public bool GetCashBookJournalRegistrationByPeriod(DateTime startDate, DateTime endDate, decimal saldo)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""GetCashBookRegJournalByPeriod""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<CashBookRecordJournalByYear>, List<CashBookRecordJournalByYearDTO>>(cashBookRecordJournalByYear.SQLExecuteProc(procName, Parameters));

//            return PrintCashBookJournalRegistrationByPeriod(dataSource, startDate, endDate, saldo);
//        }

//        public bool PrintCashBookJournalRegistrationByPeriod(List<CashBookRecordJournalByYearDTO> cashBookRecordJournalByYear, DateTime startDate, DateTime endDate, decimal saldo)
//        {

//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookJournalRegistrationTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookJournalRegistrationTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;
//            decimal SumDebit = 0;
//            decimal SumCredit = 0;

//            SumDebit += saldo;

//            int numberRecord = 1;

//            Сells["C" + 11].Value = startDate.Year;
//            Сells["C" + 11].HorizontalAlignment = HAlign.Center;

//            Сells["A" + 17].Value = numberRecord;
//            Сells["A" + 17].HorizontalAlignment = HAlign.Center;


//            Сells["B" + 17].Value = "Залишок на " + cashBookRecordJournalByYear.Min(m=>m.PageDate).ToShortDateString();
//            Сells["B" + 17].HorizontalAlignment = HAlign.Center;

//            Сells["D" + 17].Value = saldo;
//            Сells["D" + 17].HorizontalAlignment = HAlign.Center;
            
//            ++numberRecord;

//            int startWithDebit = 17;
//            int startWithCredit = startWithDebit;

//            var debit = cashBookRecordJournalByYear.Where(cbrjby => cbrjby.CurrencyTypeId == 0).OrderBy(x => x.PageDate).ThenBy(x => x.DocumentNumber).ToList();

//            var credit = cashBookRecordJournalByYear.Where(cbrjby => cbrjby.CurrencyTypeId == 1).OrderBy(x => x.PageDate).ThenBy(x => x.DocumentNumber).ToList();

//            for (int i = 0; i < debit.Count; i++)
//            {

//                Сells["A" + startWithDebit].Value = numberRecord;
//                Сells["A" + startWithDebit].HorizontalAlignment = HAlign.Center;

//                Сells["B" + startWithDebit].Value = debit[i].PageDate;
//                Сells["B" + startWithDebit].HorizontalAlignment = HAlign.Center;

//                Сells["C" + startWithDebit].Value = debit[i].DocumentNumber;
//                Сells["C" + startWithDebit].HorizontalAlignment = HAlign.Center;

//                Сells["D" + startWithDebit].Value = debit[i].Payment;
//                Сells["D" + startWithDebit].HorizontalAlignment = HAlign.Center;

//                    if (debit[i].BasisType == null)
//                    {
//                        Сells["E" + startWithDebit].Value = "----------";
//                    }
//                    else if (debit[i].CashBookContractorName.Substring(0, 3) == "ПАТ")
//                    {

//                        Сells["E" + startWithDebit].Value = "ПАТ \"ПОЛТАВА-БАНК\"";
//                    }
//                    else
//                    {
//                        Сells["E" + startWithDebit].Value = debit[i].BasisType;
//                    }

//                Сells["E" + startWithDebit].HorizontalAlignment = HAlign.Center;
//                SumDebit += debit[i].Payment;

//                Сells["" + (startWithDebit+1) + ":" + (startWithDebit+1)].Insert();

//                ++startWithDebit;
//                ++numberRecord;
//            }

//            for (int i = 0; i < credit.Count; i++)
//            {

//                Сells["F" + startWithCredit].Value = credit[i].PageDate;
//                Сells["F" + startWithCredit].HorizontalAlignment = HAlign.Center;

//                Сells["G" + startWithCredit].Value = credit[i].DocumentNumber;
//                Сells["G" + startWithCredit].HorizontalAlignment = HAlign.Center;

//                Сells["H" + startWithCredit].Value = credit[i].Payment;
//                Сells["H" + startWithCredit].HorizontalAlignment = HAlign.Center;

//                if (credit[i].BasisType == null)
//                    Сells["I" + startWithCredit].Value = "----------";
//                else
//                    Сells["I" + startWithCredit].Value = credit[i].BasisType;
//                Сells["I" + startWithCredit].HorizontalAlignment = HAlign.Center;
//                SumCredit += credit[i].Payment;

//                ++startWithCredit;

//            }


//            Сells["D" + (++startWithDebit)].Value = SumDebit;
//            Сells["H" + (startWithDebit)].Value = SumCredit;

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Журнал з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Журнал з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкрито", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;
//        }

//        public void PrintCashBookCreditAct(CashBookPageDTO cashBookPageDTO, CashBookRecordJournalDTO cashBookRecordJournalDTO)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookCreditOrderActTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookCreditOrderActTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            //string[] strFullName = model.EmployeeFullName.Split(new Char[] { ' ' });

//            Сells["D" + 18].Value = "від " + RuDateAndMoneyConverter.DateToTextLong(cashBookPageDTO.PageDate);
//            Сells["D" + 18].HorizontalAlignment = HAlign.Center;

//            Сells["A" + 20].Value = 1;
//            Сells["A" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["D" + 20].Value = cashBookRecordJournalDTO.DocumentNumber;
//            Сells["D" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["J" + 20].Value = cashBookPageDTO.PageDate;
//            Сells["J" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["S" + 20].Value = cashBookRecordJournalDTO.BalanceAccountNumber;
//            Сells["S" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["AK" + 20].Value = cashBookRecordJournalDTO.Payment;
//            Сells["AK" + 16].HorizontalAlignment = HAlign.Center;

//            Сells["H" + 22].Value = cashBookRecordJournalDTO.CashBookContractorName;
//            Сells["H" + 22].HorizontalAlignment = HAlign.Center;

//            Сells["I" + 25].Value = cashBookRecordJournalDTO.BasisType;
//            Сells["I" + 25].HorizontalAlignment = HAlign.Center;

//            Сells["H" + 31].Value = cashBookRecordJournalDTO.NameAdditionalType;
//            Сells["H" + 31].HorizontalAlignment = HAlign.Center;

//            Сells["H" + 33].Value = "";
//            Сells["H" + 33].HorizontalAlignment = HAlign.Center;

//            double convertPayment = Convert.ToDouble(cashBookRecordJournalDTO.Payment);

//            Сells["G" + 27].Value = RuDateAndMoneyConverter.CurrencyToTxt(convertPayment, true);


//            Сells["G" + 27].HorizontalAlignment = HAlign.Center;

//            //Сells["A" + startWith].Value = RuDateAndMoneyConverter.CurrencyToTxt(totalSum, true);

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Видатковий касовий ордер №" + cashBookRecordJournalDTO.DocumentNumber +".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Видатковий касовий ордер №"+ cashBookRecordJournalDTO.DocumentNumber+".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintCashBookDebitAct(CashBookPageDTO cashBookPageDTO, CashBookRecordJournalDTO cashBookRecordJournalDTO)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookDebitOrderActTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookDebitOrderActTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            //string[] strFullName = model.EmployeeFullName.Split(new Char[] { ' ' });

//            Сells["Y" + 13].Value = cashBookRecordJournalDTO.DocumentNumber;
//            Сells["Y" + 13].HorizontalAlignment = HAlign.Center;

//            Сells["H" + 15].Value = "від " + RuDateAndMoneyConverter.DateToTextLong(cashBookPageDTO.PageDate);
//            Сells["H" + 15].HorizontalAlignment = HAlign.Center;

//            Сells["A" + 21].Value = 1;
//            Сells["A" + 21].HorizontalAlignment = HAlign.Center;

//            Сells["G" + 21].Value = cashBookRecordJournalDTO.BalanceAccountNumber;
//            Сells["G" + 21].HorizontalAlignment = HAlign.Center;

//            Сells["R" + 21].Value = cashBookRecordJournalDTO.Payment;
//            Сells["R" + 21].HorizontalAlignment = HAlign.Center;

//            Сells["N" + 23].Value = cashBookRecordJournalDTO.CashBookContractorName;
//            Сells["N" + 23].HorizontalAlignment = HAlign.Center;

//            Сells["G" + 25].Value = cashBookRecordJournalDTO.BasisType;
//            Сells["G" + 25].HorizontalAlignment = HAlign.Center;


//            double convertPayment = Convert.ToDouble(cashBookRecordJournalDTO.Payment);

//            Сells["J" + 27].Value = RuDateAndMoneyConverter.CurrencyToTxt(convertPayment, true);
//            Сells["J" + 27].HorizontalAlignment = HAlign.Center;

//            Сells["L" + 31].Value = cashBookRecordJournalDTO.NameAdditionalType;
//            Сells["L" + 31].HorizontalAlignment = HAlign.Center;



//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Прибутковий касовий ордер №" + cashBookRecordJournalDTO.DocumentNumber + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Прибутковий касовий ордер №" + cashBookRecordJournalDTO.DocumentNumber + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже выдкрито!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintCashBookPage(CashBookPageDTO cashBookPageDTO, List<CashBookRecordJournalDTO> source, CashBookBalanceDTO cashBookBalanceDTO)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookPageTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookPageTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;


//            decimal SumDebit = 0;
//            decimal SumCredit = 0;

//            Сells["C" + 2].Value = RuDateAndMoneyConverter.DateToTextLong(cashBookPageDTO.PageDate);
//            Сells["C" + 2].HorizontalAlignment = HAlign.Center;

//            Сells["L" + 2].Value = cashBookPageDTO.PageNumber;
//            Сells["L" + 2].HorizontalAlignment = HAlign.Center;

//            Сells["L" + 8].Value = cashBookBalanceDTO.SumBeginDay;
//            Сells["L" + 8].HorizontalAlignment = HAlign.Center;

//            int startWith = 9;

//            source = source.OrderBy(s=>s.CurrencyTypeId).ThenBy(x=>x.DocumentNumber).ToList();

//            for (int i = 0; i < source.Count; i++)
//            {
//                Сells["A" + startWith].Value = source[i].DocumentNumber;
//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;

//                Сells["B" + startWith].Value = source[i].CashBookContractorName;
//                Сells["B" + startWith].HorizontalAlignment = HAlign.Left;

//                Сells["K" + startWith].Value = source[i].BalanceAccountNumber;
//                Сells["K" + startWith].HorizontalAlignment = HAlign.Center;

//                if (source[i].CurrencyTypeId == 0)
//                    Сells["L" + startWith].Value = source[i].Payment;
//                else
//                    Сells["M" + startWith].Value = source[i].Payment;


//                startWith++;
//            }

//            Сells["L" + 20].Value = source.Where(s=>s.CurrencyTypeId == 0).Sum(s => s.Debit);
//            Сells["L" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["M" + 20].Value = source.Where(s => s.CurrencyTypeId == 1).Sum(s => s.Credit);
//            Сells["M" + 20].HorizontalAlignment = HAlign.Center;

//            Сells["L" + 21].Value = cashBookBalanceDTO.SumEndDay;
//            Сells["L" + 21].HorizontalAlignment = HAlign.Center;
//            if(source.Count(s => s.CurrencyTypeId == 0) > 0)
//                Сells["I" + 26].Value = RuDateAndMoneyConverter.NumeralsToTxt(source.Count(s => s.CurrencyTypeId == 0), Utils.TextCase.Nominative ,true,true);
//            Сells["I" + 26].HorizontalAlignment = HAlign.Center;
//            if (source.Count(s => s.CurrencyTypeId == 1) > 0)
//                Сells["I" + 28].Value = RuDateAndMoneyConverter.NumeralsToTxt(source.Count(s => s.CurrencyTypeId == 1), Utils.TextCase.Prepositional, true, true); 
//            Сells["I" + 28].HorizontalAlignment = HAlign.Center;

//            try
//            {
//                /*Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString + " по " + endDate.ToShortDateString + ".xls", FileFormat.Excel8);
//                */
//                Workbook.SaveAs(GeneratedReportsDir + "Каса за " + cashBookPageDTO.PageDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Каса за " + cashBookPageDTO.PageDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintCashBookTittle(List<CashBookPageDTO> cashBookPaheList)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookTitleTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\CashBookTitleTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;

//            DateTime minDate = cashBookPaheList.Min(bdsm=>bdsm.PageDate);
//            DateTime maxDate = cashBookPaheList.Max(bdsm => bdsm.PageDate);

//            Сells["D" + 19].Value = minDate.Year.ToString();
//            Сells["D" + 19].HorizontalAlignment = HAlign.Center;
//            Сells["D" + 19].Font.Size = 20;

//            Сells["G" + 23].Value = cashBookPaheList.Count;
//            Сells["G" + 23].HorizontalAlignment = HAlign.Center;
//            Сells["G" + 23].Font.Size = 12;

//            Сells["C" + 26].Value = RuDateAndMoneyConverter.DateToTextLong(minDate) + " - " + RuDateAndMoneyConverter.DateToTextLong(maxDate);
//            Сells["C" + 26].HorizontalAlignment = HAlign.Center;
//            Сells["C" + 26].Font.Size = 14;
            

//            try
//            {

//                Workbook.SaveAs(GeneratedReportsDir + "Касова книга за " + RuDateAndMoneyConverter.DateQuarter(minDate) + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Касова книга за " + RuDateAndMoneyConverter.DateQuarter(minDate) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }



//        #endregion

//        #region CashPayments report's

//        public bool GetCPReportByAccounts(DateTime startDate, DateTime endDate)
//        {
//            string procName;
         
//            //Report body

//            FbParameter[] ParametersAccounts =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };

//            procName = @"select * from ""CPReportByAccountsProc""(@StartDate, @EndDate)";
            
//            var dataSourceBody = mapper.Map<IEnumerable<CashPaymentsReportByAccounts>, List<CashPaymentsReportByAccountsDTO>>(cpReportByAccounts.SQLExecuteProc(procName, ParametersAccounts));

//            //Saldo body

//            FbParameter[] ParametersSaldo =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };
            
//            procName = @"select * from ""GetCashPaymentsSaldoBalance""(@StartDate, @EndDate)";

//            var dataSourceSaldo = mapper.Map<IEnumerable<CashPaymentsSaldoBalance>, List<CashPaymentsSaldoBalanceDTO>>(cashPaymentsSaldoBalance.SQLExecuteProc(procName, ParametersSaldo));

//            //Period body

//            FbParameter[] ParametersPeriod =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };

//            procName = @"select * from ""GetCashPaymentsPeriodBalance""(@StartDate, @EndDate)";

//            var dataSourcePeriod = mapper.Map<IEnumerable<CashPaymentsPeriodBalance>, List<CashPaymentsPeriodBalanceDTO>>(cashPaymentsPeriodBalance.SQLExecuteProc(procName, ParametersPeriod));


//            return PrintCPReportByAccounts(dataSourceBody, dataSourceSaldo, dataSourcePeriod, startDate, endDate);
//        }

//        private bool PrintCPReportByAccounts(IEnumerable<CashPaymentsReportByAccountsDTO> reportSource, IEnumerable<CashPaymentsSaldoBalanceDTO> saldoSource, IEnumerable<CashPaymentsPeriodBalanceDTO> periodSource, DateTime start, DateTime end)
//        {
//            int recCount = reportSource.Count();
//            //if (recCount == 0)
//            //    return false;

//            List<CashPaymentsReportByAccountsDTO> rowData = reportSource.ToList();
//            List<CashPaymentsPeriodBalanceDTO> rowPeriodData = periodSource.ToList();
//            List<CashPaymentsSaldoBalanceDTO> rowSaldoData = saldoSource.ToList();

//            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            // В связи с тем что нужно было из суб-счетов(313/13, 313/99.....) сделать один 313 было убрано все суб-счета и добавлено один 313
//            // с id = 9999 в словарь счетов, дле дебетовых.
//            // с id = 1000 в словарь счетов, дле кредитовых.
//            // В колекции получнной из процедуры все суб-счета были заменены на 313 и посчитана общая сума .
//            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                    decimal sumOf313AccountsDebit = rowPeriodData.Where(bdsm => (bdsm.PeriodAccountNum.Contains("313/") && bdsm.FlagDebitCredit == 1)).Sum(hard => hard.PeriodPayment);// && (bdsm.FlagDebitCredit.Equals(1))
//                    decimal sumOf313AccountsCredit = rowPeriodData.Where(bdsm => (bdsm.PeriodAccountNum.Contains("313/") && bdsm.FlagDebitCredit == -1)).Sum(hard => hard.PeriodPayment);// && (bdsm.FlagDebitCredit.Equals(1))
//                    rowPeriodData.RemoveAll(bdsm => bdsm.PeriodAccountNum.Contains("313"));
//                    rowPeriodData.Add(new CashPaymentsPeriodBalanceDTO
//                    {
//                        FlagDebitCredit = 1,
//                        PeriodAccountId = 9999,
//                        PeriodAccountNum = "313",
//                        PeriodPayment = sumOf313AccountsDebit,
//                        RecId = 0
//                    });
//                    rowPeriodData.Add(new CashPaymentsPeriodBalanceDTO
//                    {
//                        FlagDebitCredit = -1,
//                        PeriodAccountId = 1000,
//                        PeriodAccountNum = "313",
//                        PeriodPayment = sumOf313AccountsCredit,
//                        RecId = 0
//                    });
//            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//            IRange interval;
//            var workbook = Factory.GetWorkbook();
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;
//            var reportname = "ОСВ господарських потреб";

//            string name = "Оборотно-сальдова відомість господарських потреб";
//            var nameperiod = "";
//            if (start != DateTime.MinValue && end != DateTime.MaxValue)
//            {
//                var month = start.Month.ToString("MMM");
//                var year = start.Year.ToString("YYYY");
//                nameperiod = " за період з " + start.ToShortDateString() + " по " + end.ToShortDateString() + " р.";
//                name = name + nameperiod;
//            }


//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<int, string> VatAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int startVatAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;
//            int endVatAccount = 0;

//            int startPosition = 2, currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;


//            #region Generate report header

//            var Debit_Accounts = reportSource.Select(c => new
//            {
//                AccountNum = c.PrepaymentAccountNum,
//                AccountId = c.PrepaymentAccountId
//            }).Where(p => p.AccountId > 0).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = reportSource.Select(c => new
//            {
//                AccountNum = c.PaymentAccountNum,
//                AccountId = c.PaymentAccountId
//            }).Where(p => p.AccountId > 0).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            var Vat_Accounts = reportSource.Where(c => c.VatAccountId > 0).Select(c => new
//            {
//                AccountNum = c.VatAccountNum,
//                AccountId = c.VatAccountId
//            }).Where(p => p.AccountId > 0).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Vat_Accounts)
//                VatAcc.Add(dict.AccountId, dict.AccountNum);


//            HeaderColumn.Add("RecordNumber", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ з/п";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 4;

//            startHeaderPosition++;

//            HeaderColumn.Add("Fio", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "П.І.Б. працівника";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 20;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Кредит";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Аванс";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Аванс";
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PrepaymentDate", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дата";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            HeaderColumn.Add("PrepaymentPrice", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Сумма";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Звіт";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + CreditAcc.Count + VatAcc.Count - 2] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Звіт";
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + CreditAcc.Count - 2] + (startPosition + 1)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Балансові рахунки";

//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;

//                if (VatAcc.Count > 0)
//                {
//                    cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + VatAcc.Count - 2] + (startPosition + 1)].Merge();
//                    cells[startPosition, startHeaderPosition - 1].Value = "Рахунки ПДВ";

//                    startVatAccount = startHeaderPosition;
//                    foreach (var vat_account in VatAcc)
//                    {
//                        HeaderColumn.Add("VatAccount" + vat_account.Key.ToString(), startHeaderPosition);
//                        cells[startPosition + 1, startHeaderPosition - 1].Value = vat_account.Value;
//                        cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//                        startHeaderPosition++;
//                    }
//                    endVatAccount = startHeaderPosition;
//                }
//            }
                                   
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Кредит";
//            cells[startPosition + 1, startHeaderPosition - 1].ColumnWidth = 13;
//            startHeaderPosition++;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (startPosition + 2)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            interval = cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition - 1) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (startPosition - 1)];
//            interval.Merge();
//            interval.Value = name;
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.Font.Bold = true;
//            interval.Font.Size = 14;

//            #endregion

//            #region Loop body

//            int employeeId = 0;
//            int cashPrepaymentId = 0;

//            string debitAccount = "";
//            string creditAccount = "";
//            string vatAccount = "";
            
//            int startEmployee = currentPosition;
//            int sumPosition = 0;
//            int employeesPrintNumber = 1;

//            for (int i = 0; i < recCount; i++)
//            {
//                if (employeeId != rowData[i].EmployeesId)
//                {
//                    employeeId = rowData[i].EmployeesId;
//                    cashPrepaymentId = rowData[i].CashPrepaymentId;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition)].Interior.Color = Color.LemonChiffon;
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
                        
//                        cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = "Всього:";
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startEmployee, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startEmployee, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startEmployee, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startEmployee, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PrepaymentPrice"] - 1], startEmployee, vsS[HeaderColumn["PrepaymentPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Font.Bold = true;
                        
//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (VatAcc.Count > 0)
//                        {
//                            foreach (var dict in VatAcc)
//                            {
//                                sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }

//                        currentPosition++;
//                        startEmployee = currentPosition;
//                    }

//                    cells[vsS[HeaderColumn["RecordNumber"] - 1] + currentPosition].Value = employeesPrintNumber;
//                    cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = rowData[i].Fio;
//                    //
//                    cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].DebitStart;
//                    cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].CreditStart;
//                    //
//                    if (rowData[i].PrepaymentAccountId > 0)
//                    {
//                        cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Value = rowData[i].PrepaymentPrice;
//                        cells[vsS[HeaderColumn["PrepaymentDate"] - 1] + currentPosition].Value = rowData[i].PrepaymentDate;

//                        debitAccount = "DebitAccount" + rowData[i].PrepaymentAccountId.ToString();
//                        cells[vsS[HeaderColumn[debitAccount] - 1] + currentPosition].Value = rowData[i].PrepaymentPrice;
//                    }

//                    if (rowData[i].PaymentAccountId > 0)
//                    {
//                        creditAccount = "CreditAccount" + rowData[i].PaymentAccountId.ToString();
//                        cells[vsS[HeaderColumn[creditAccount] - 1] + currentPosition].Value = rowData[i].PaymentPrice;

//                        if (rowData[i].VatAccountId > 0)
//                        {
//                            vatAccount = "VatAccount" + rowData[i].VatAccountId.ToString();
//                            cells[vsS[HeaderColumn[vatAccount] - 1] + currentPosition].Value = rowData[i].VatPrice;
//                        }
//                    }
//                    //
//                    cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].DebitEnd;
//                    cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].CreditEnd;

//                    employeesPrintNumber++;
//                }
//                else
//                {
//                    if (rowData[i].PrepaymentAccountId > 0)
//                    {
//                        if (cashPrepaymentId != rowData[i].CashPrepaymentId)
//                        {
//                            cashPrepaymentId = rowData[i].CashPrepaymentId;
//                            cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Value = rowData[i].PrepaymentPrice;
//                            cells[vsS[HeaderColumn["PrepaymentDate"] - 1] + currentPosition].Value = rowData[i].PrepaymentDate;

//                            debitAccount = "DebitAccount" + rowData[i].PrepaymentAccountId.ToString();
//                            cells[vsS[HeaderColumn[debitAccount] - 1] + currentPosition].Value = rowData[i].PrepaymentPrice;
//                        }
//                    }

//                    if (rowData[i].PaymentAccountId > 0)
//                    {
//                        creditAccount = "CreditAccount" + rowData[i].PaymentAccountId.ToString();
//                        cells[vsS[HeaderColumn[creditAccount] - 1] + currentPosition].Value = rowData[i].PaymentPrice;

//                        if (rowData[i].VatAccountId > 0)
//                        {
//                            vatAccount = "VatAccount" + rowData[i].VatAccountId.ToString();
//                            cells[vsS[HeaderColumn[vatAccount] - 1] + currentPosition].Value = rowData[i].VatPrice;
//                        }
//                    }
//                }
//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (currentPosition) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition)].Interior.Color = Color.LemonChiffon;
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.AntiqueWhite;
            
//            cells[vsS[HeaderColumn["Fio"] - 1] + currentPosition].Value = "Всього";
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startEmployee, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startEmployee, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startEmployee, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startEmployee, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PrepaymentPrice"] - 1], startEmployee, vsS[HeaderColumn["PrepaymentPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Font.Bold = true;
            
//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (VatAcc.Count > 0)
//            {
//                foreach (var dict in VatAcc)
//                {
//                    //cells[vsS[HeaderColumn["VatAccount" + dict.Key] - 1] + (startEmployee) + ":" + vsS[HeaderColumn["VatAccount" + dict.Key] - 1] + (currentPosition - 1)].Interior.Color = Color.Khaki;
//                    sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startEmployee, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Interior.Color = Color.Coral;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition] + currentPosition].Font.Size = 12;
//            cells["B" + currentPosition].Value = "Разом:";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["PrepaymentDate"] - 2] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 2] + currentPosition].NumberFormat = "### ### ##0.00";

//            var summaryData = rowData.GroupBy(g => g.EmployeesId).Select(n => new
//            {
//                n.Key,
//                TotalDebitStart = n.Max(s => s.DebitStart),
//                TotalCreditStart = n.Max(s => s.CreditStart),
//                TotalDebitEnd = n.Max(s => s.DebitEnd),
//                TotalCreditEnd = n.Max(s => s.CreditEnd)
//            }).ToList();

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalDebitStart);
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalDebitEnd);
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalCreditStart);
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = summaryData.Sum(s => s.TotalCreditEnd);

//            var summaryPrepayments = rowData.GroupBy(g => g.CashPrepaymentId).Select(n => new
//            {
//                n.Key,
//                TotalPrepayments = n.Max(s => s.PrepaymentPrice)
//            }).ToList();

//            cells[vsS[HeaderColumn["PrepaymentPrice"] - 1] + currentPosition].Value = summaryPrepayments.Sum(x => x.TotalPrepayments);

//            var summaryDebitPrepayments = rowData.GroupBy(g => new {g.CashPrepaymentId, g.PrepaymentAccountId}).Select(n => new
//            {
//                n.Key,
//                MaxAccountId = n.Max(s => s.PrepaymentAccountId),
//                TotalPrepayments = n.Max(s => s.PrepaymentPrice)
//            }).ToList();

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = summaryDebitPrepayments.Where(w => w.MaxAccountId == dict.Key).Sum(x => x.TotalPrepayments);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.PaymentAccountId == dict.Key).Sum(x => x.PaymentPrice);
//                }
//            }
//            if (VatAcc.Count > 0)
//            {
//                foreach (var dict in VatAcc)
//                {
//                    sumPosition = HeaderColumn["VatAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.VatAccountId == dict.Key).Sum(x => x.VatPrice);
//                }
//            }

//            #endregion
                 
//            cells[vsS[HeaderColumn["RecordNumber"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = 4;

//            worksheet.WindowInfo.FreezePanes = true;

//            #region Period balance

//            startHeaderPosition = 2;
//            startPosition = currentPosition + 4;
//            currentPosition = startPosition;

//            #region Generate period header

//            Dictionary<int, string> PeriodDebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> PeriodCreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> PeriodHeaderColumn = new Dictionary<string, byte>();

//            /////////////////////////////////////////////////////////////////////////////////////////////
//            // до объедениние всех 313

//            //var PeriodDebit_Accounts = periodSource.Where(w => w.FlagDebitCredit == 1).Select(c => new
//            //{
//            //    AccountNum = c.PeriodAccountNum,
//            //    AccountId = c.PeriodAccountId
//            //}).Distinct().OrderBy(c => c.AccountNum);

//            ////////////////////////////////////////////////////////////////////////////////////////////


//            var PeriodDebit_Accounts = rowPeriodData.Where(w => w.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.PeriodAccountNum,
//                AccountId = c.PeriodAccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in PeriodDebit_Accounts)
//                PeriodDebitAcc.Add(dict.AccountId, dict.AccountNum);

//            /////////////////////////////////////////////////////////////////////////////////////////////
//            // до объедениние всех 313

//            //var PeriodCredit_Accounts = periodSource.Where(w => w.FlagDebitCredit == -1).Select(c => new
//            //{
//            //    AccountNum = c.PeriodAccountNum,
//            //    AccountId = c.PeriodAccountId
//            //}).Distinct().OrderBy(c => c.AccountNum);

//            ////////////////////////////////////////////////////////////////////////////////////////////

//            var PeriodCredit_Accounts = rowPeriodData.Where(w => w.FlagDebitCredit == -1).Select(c => new
//            {
//                AccountNum = c.PeriodAccountNum,
//                AccountId = c.PeriodAccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in PeriodCredit_Accounts)
//                PeriodCreditAcc.Add(dict.AccountId, dict.AccountNum);

//            if (PeriodDebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + startPosition].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по Д-т 372";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + (PeriodDebitAcc.Count - 2)] + startPosition].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по Д-т 372";

//                startDebitAccount = startHeaderPosition;

//                foreach (var debit_account in PeriodDebitAcc)
//                {
//                    HeaderColumn.Add("PeriodDebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition, startHeaderPosition - 1].Value = debit_account.Value;
//                    cells[startPosition, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("DebitSummary", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;
//            startHeaderPosition++;

//            if (PeriodCreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + startPosition].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по К-т 372";
//                cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 13;
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + (PeriodCreditAcc.Count - 2)] + startPosition].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти по К-т 372";

//                startCreditAccount = startHeaderPosition;

//                foreach (var credit_account in PeriodCreditAcc)
//                {
//                    HeaderColumn.Add("PeriodCreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition, startHeaderPosition - 1].Value = credit_account.Value;
//                    cells[startPosition, startHeaderPosition - 1].ColumnWidth = 13;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("CreditSummary", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього";
//            cells[startPosition - 1, startHeaderPosition - 1].ColumnWidth = 12;

//            interval = cells[vsS[1] + (startPosition) + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 1)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            #endregion

//            #region Period body

//            currentPosition = currentPosition + 2;



        

//            for (int i = 0; i < rowPeriodData.Count; i++)
//            {
//                if (rowPeriodData[i].FlagDebitCredit > 0)
//                {
//                    debitAccount = "PeriodDebitAccount" + rowPeriodData[i].PeriodAccountId.ToString();
//                    cells[vsS[HeaderColumn[debitAccount] - 1] + currentPosition].Value = rowPeriodData[i].PeriodPayment;
//                }
//                else
//                {
//                    creditAccount = "PeriodCreditAccount" + rowPeriodData[i].PeriodAccountId.ToString();
//                    cells[vsS[HeaderColumn[creditAccount] - 1] + currentPosition].Value = rowPeriodData[i].PeriodPayment;
//                }
//            }


//            cells[vsS[HeaderColumn["DebitSummary"] - 1] + currentPosition].Value = rowPeriodData.Where(w => w.FlagDebitCredit > 0).Sum(s => s.PeriodPayment);
//            cells[vsS[HeaderColumn["CreditSummary"] - 1] + currentPosition].Value = rowPeriodData.Where(w => w.FlagDebitCredit < 0).Sum(s => s.PeriodPayment);

//            #endregion

//            cells[vsS[1] + currentPosition + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[1] + startPosition + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            #endregion

//            #region Saldo

//            startPosition = currentPosition + 3;

//            cells[vsS[1] + startPosition + ":" + vsS[2] + startPosition].Merge();
//            cells[startPosition - 1, 1].Value = "Залишок на " + start.ToShortDateString();
//            cells[startPosition, 1].Value = "Д-т";
//            cells[startPosition, 2].Value = "К-т";

//            interval = cells[vsS[1] + startPosition + ":" + vsS[2] + (startPosition + 1)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;
            
//            cells[startPosition + 1, 1].Value = rowSaldoData[0].DebitStart;
//            cells[startPosition + 1, 2].Value = rowSaldoData[0].CreditStart;

//            cells[vsS[1] + (startPosition + 2) + ":" + vsS[2] + (startPosition + 2)].NumberFormat = "### ### ##0.00";
//            cells[vsS[1] + startPosition + ":" + vsS[2] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;

//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + startPosition + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + startPosition].Merge();
//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + startPosition].Value = "Залишок на " + end.AddDays(1).ToShortDateString();
//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + (startPosition + 1)].Value = "Д-т";
//            cells[vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 1)].Value = "К-т";

//            interval = cells[vsS[HeaderColumn["CreditSummary"] - 2] + startPosition + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 1)];
//            interval.VerticalAlignment = VAlign.Center;
//            interval.HorizontalAlignment = HAlign.Center;
//            interval.WrapText = true;
//            interval.Font.Bold = true;
//            interval.Font.Size = 12;

//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + (startPosition + 2)].Value = rowSaldoData[0].DebitEnd;
//            cells[vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 2)].Value = rowSaldoData[0].CreditEnd;

//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + (startPosition + 2) + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 2)].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["CreditSummary"] - 2] + startPosition + ":" + vsS[HeaderColumn["CreditSummary"] - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;

//            #endregion

//            worksheet.Name = reportname.Trim();
//            var fileas = reportname + nameperiod;

//            SaveAsXls(workbook, @"\Звіти\Господарські потреби\", fileas);
//            RunXls(@"\Звіти\Господарські потреби\", fileas);
            
//            return true;
//        }

//        #endregion

//        #region CalcWithBuyers report's

//        public IEnumerable<CalcWithBuyersReportDTO> GetCWB(DateTime startDate, DateTime endDate, int accountId)
//        {
//            string defaultDate = "31.12.2014";

//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("SelectionDate", defaultDate),
//                    new FbParameter("PurposeAccountId", accountId)
//                };

//            string procName = @"select * from ""CWBReportProc""(@StartDate, @EndDate, @PurposeAccountId, @SelectionDate)";
//            return mapper.Map<IEnumerable<CalcWithBuyersReport>, List<CalcWithBuyersReportDTO>>(calcWithBuyersReport.SQLExecuteProc(procName, Parameters));
//        }
//        public bool GetCWBReport(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            string defaultDate = "31.12.2014";

//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("SelectionDate", defaultDate),
//                    new FbParameter("PurposeAccountId", accountId)
//                };

//            string procName = @"select * from ""CWBReportProc""(@StartDate, @EndDate, @PurposeAccountId, @SelectionDate)";

//            var dataSource = mapper.Map<IEnumerable<CalcWithBuyersReport>, List<CalcWithBuyersReportDTO>>(calcWithBuyersReport.SQLExecuteProc(procName, Parameters));

//            bool currencyStatus = (accountNum == "362") ? true : false;

//            if (currencyStatus)
//                return PrintCWBReportCurrency(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId);
//            else 
//                return PrintCWBReport(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId);

//        }

//        private bool PrintCWBReportCurrency(IEnumerable<CalcWithBuyersReportDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<CalcWithBuyersReportDTO> rowData = dataSource.ToList();
            
//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var Debit_Accounts = rowData.Where(c => c.FlagDebitCredit > 0).Select(c => new
//            {
//                AccountNum = c.Num,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = rowData.Where(c => c.FlagDebitCredit < 0).Select(c => new
//            {
//                AccountNum = c.Num,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            HeaderColumn.Add("PartnerSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код/таб.номер";

//            startHeaderPosition++;

//            HeaderColumn.Add("PartnerName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            HeaderColumn.Add("CurrencyName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування валюти";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            HeaderColumn.Add("Comment", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Коментар";

//            startHeaderPosition++;

//            HeaderColumn.Add("CalcDocument", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер документу";

//            startHeaderPosition++;

//            HeaderColumn.Add("CalcDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("В д-т рах. {0} з к-та рах", accountNum);
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("В д-т рах. {0} з к-та рах.", accountNum);
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("CalcPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;
//            startHeaderPosition++;

//            HeaderColumn.Add("CalcRate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("DebitSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            HeaderColumn.Add("Purpose", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Призначення платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("BankNum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("BankDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. {0} в д-т рах.", accountNum);
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. {0} в д-т рах.", accountNum);
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("BankPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("BankRate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("CreditSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";

//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;

//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["D" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            #region Loop variables

//            int contractorId = 0;
//            int employeesId = 0;
//            int currencyId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            decimal startDebit = 0, startDebitCurrencyRUB = 0, startDebitCurrencyEUR = 0, startDebitCurrencyUSD = 0,
//                    startCredit = 0, startCreditCurrencyRUB = 0, startCreditCurrencyEUR = 0, startCreditCurrencyUSD = 0,
//                    endDebit = 0, endDebitCurrencyRUB = 0, endDebitCurrencyEUR = 0, endDebitCurrencyUSD = 0,
//                    endCredit = 0, endCreditCurrencyRUB = 0, endCreditCurrencyEUR = 0, endCreditCurrencyUSD = 0;

//            #endregion

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].ContractorsId || employeesId != rowData[i].EmployeesId)
//                {
//                    contractorId = rowData[i].ContractorsId;
//                    employeesId = rowData[i].EmployeesId;
//                    currencyId = rowData[i].CurrencyId;

//                    if (i > 0)
//                    {
//                        #region Set style and formul's for current row

//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;

//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startContractor, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startContractor, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");

//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startContractor, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startContractor, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");

//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CalcPrice"] - 1], startContractor, vsS[HeaderColumn["CalcPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["BankPrice"] - 1], startContractor, vsS[HeaderColumn["BankPrice"] - 1], currentPosition - 1, "SUM");

//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;

//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;

//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Font.Bold = true;

//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                                cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                                cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;

//                        #endregion
//                    }
//                    cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].Value = rowData[i].PartnerSrn;
//                    cells[vsS[HeaderColumn["PartnerName"] - 1] + currentPosition].Value = rowData[i].PartnerName;
//                    cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].Value = rowData[i].CurrencyName;
//                    cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                    //
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["StartDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartDebitCurrency;
//                    cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["StartCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartCreditCurrency;
//                    cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;
//                    //
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].HorizontalAlignment = HAlign.Right;
//                        //cells[vsS[HeaderColumn["Comment"] - 1] + currentPosition].Value = rowData[i].Comment;
//                        cells[vsS[HeaderColumn["Comment"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["CalcDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["CalcRate"] - 1] + currentPosition].Value = rowData[i].Rate;

//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].HorizontalAlignment = HAlign.Right;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].Value = rowData[i].Purpose;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["BankDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["BankRate"] - 1] + currentPosition].Value = rowData[i].Rate;

//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    //

//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["EndDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndDebitCurrency;
//                    cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["EndCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndCreditCurrency;
//                    cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;

//                    startDebit += rowData[i].StartDebit;
//                    startDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartDebitCurrency : 0;
//                    startDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartDebitCurrency : 0;
//                    startDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartDebitCurrency : 0;

//                    startCredit += rowData[i].StartCredit;
//                    startCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartCreditCurrency : 0;
//                    startCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartCreditCurrency : 0;
//                    startCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartCreditCurrency : 0;

//                    endDebit += rowData[i].EndDebit;
//                    endDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndDebitCurrency : 0;
//                    endDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndDebitCurrency : 0;
//                    endDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndDebitCurrency : 0;

//                    endCredit += rowData[i].EndCredit;
//                    endCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndCreditCurrency : 0;
//                    endCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndCreditCurrency : 0;
//                    endCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndCreditCurrency : 0;
//                }
//                else
//                {
//                    if (currencyId != rowData[i].CurrencyId)
//                    {
//                        currencyId = rowData[i].CurrencyId;

//                        cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].Value = rowData[i].CurrencyName;
//                        cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                        //
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["StartDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartDebitCurrency;
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["StartCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartCreditCurrency;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;

//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["EndDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndDebitCurrency;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["EndCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndCreditCurrency;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;

//                        startDebit += rowData[i].StartDebit;
//                        startDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartDebitCurrency : 0;
//                        startDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartDebitCurrency : 0;
//                        startDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartDebitCurrency : 0;

//                        startCredit += rowData[i].StartCredit;
//                        startCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartCreditCurrency : 0;
//                        startCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartCreditCurrency : 0;
//                        startCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartCreditCurrency : 0;

//                        endDebit += rowData[i].EndDebit;
//                        endDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndDebitCurrency : 0;
//                        endDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndDebitCurrency : 0;
//                        endDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndDebitCurrency : 0;

//                        endCredit += rowData[i].EndCredit;
//                        endCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndCreditCurrency : 0;
//                        endCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndCreditCurrency : 0;
//                        endCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndCreditCurrency : 0;

//                    }
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        //cells[vsS[HeaderColumn["Comment"] - 1] + currentPosition].Value = rowData[i].Comment;
//                        cells[vsS[HeaderColumn["Comment"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["CalcDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["CalcRate"] - 1] + currentPosition].Value = rowData[i].Rate;

//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].Value = rowData[i].Purpose;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["BankDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["BankRate"] - 1] + currentPosition].Value = rowData[i].Rate;

//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                }
//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startContractor, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startContractor, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startContractor, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startContractor, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], startContractor, vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CalcPrice"] - 1], startContractor, vsS[HeaderColumn["CalcPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["BankPrice"] - 1], startContractor, vsS[HeaderColumn["BankPrice"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Font.Bold = true;

//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Font.Bold = true;

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                    cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                    cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["C" + currentPosition].Value = "Всього";
//            cells["C" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["D" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["D" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = startDebit;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = endDebit;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = startCredit;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = endCredit;
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Value = startDebitCurrencyUSD;
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Value = startDebitCurrencyEUR;
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Value = startDebitCurrencyRUB;
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Value = endDebitCurrencyUSD;
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Value = endDebitCurrencyEUR;
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Value = endDebitCurrencyRUB;
//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Value = startCreditCurrencyUSD;
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Value = startCreditCurrencyEUR;
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Value = startCreditCurrencyRUB;
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Value = endCreditCurrencyUSD;
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Value = endCreditCurrencyEUR;
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Value = endCreditCurrencyRUB;

//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0).Sum(x => x.PeriodPrice);

//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }

//            PrintSignatures(cells, currentPosition + 2);

//            #endregion

//            #region Report caption and frore rows

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            cells["A" + captionPosition].Value = String.Format("Відомість аналитичного обліку розрахунків з покупцями та замовниками(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString());
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по замовникам (до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        private bool PrintCWBReport(List<CalcWithBuyersReportDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<CalcWithBuyersReportDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var Debit_Accounts = rowData.Where(c => c.FlagDebitCredit > 0).Select(c => new
//            {
//                AccountNum = c.Num,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = rowData.Where(c => c.FlagDebitCredit < 0).Select(c => new
//            {
//                AccountNum = c.Num,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            HeaderColumn.Add("PartnerSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код/таб.номер";
//            cells[startPosition - 1, startHeaderPosition - 1].NumberFormat = "@";

//            startHeaderPosition++;

//            HeaderColumn.Add("PartnerName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;
            
//            HeaderColumn.Add("CalcDocument", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер документу";

//            startHeaderPosition++;

//            HeaderColumn.Add("CalcDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("В д-т рах. {0} з к-та рах.", accountNum);
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("В д-т рах. {0} з к-та рах.", accountNum);
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + 3] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "ПДВ";

//            HeaderColumn.Add("VatPayment6412", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 2) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "641/2";
            
//            startHeaderPosition++;

//            HeaderColumn.Add("VatPayment643", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 2) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "643";

//            startHeaderPosition++;

//            HeaderColumn.Add("VatTotalSum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 2) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Разом";

//            startHeaderPosition++;

//            HeaderColumn.Add("CalcPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривнях (без ПДВ)";
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("PeriodTotalPriceWithVat", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього в гривнях (з ПДВ)";
//            cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("Purpose", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Призначення платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("BankNum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("BankDate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. {0} в д-т рах.", accountNum);
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. {0} в д-т рах.", accountNum);
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("BankPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["C" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            #region Loop variables

//            int contractorId = 0;
//            int employeesId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            decimal startDebit = 0, startCredit = 0, endDebit = 0, endCredit = 0;

//            #endregion


//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].ContractorsId || employeesId != rowData[i].EmployeesId)
//                {
//                    contractorId = rowData[i].ContractorsId;
//                    employeesId = rowData[i].EmployeesId;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;

//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startContractor, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startContractor, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startContractor, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startContractor, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CalcPrice"] - 1], startContractor, vsS[HeaderColumn["CalcPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatPayment6412"] - 1], startContractor, vsS[HeaderColumn["VatPayment6412"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatPayment643"] - 1], startContractor, vsS[HeaderColumn["VatPayment643"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatTotalSum"] - 1], startContractor, vsS[HeaderColumn["VatTotalSum"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1], startContractor, vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["BankPrice"] - 1], startContractor, vsS[HeaderColumn["BankPrice"] - 1], currentPosition - 1, "SUM");

//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Font.Bold = true;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Font.Bold = true;

//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                                cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                                cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;
//                    }


//                    if (rowData[i].PartnerSrn != null)
//                    {
//                        cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].NumberFormat = "@";
//                        cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].Value = rowData[i].PartnerSrn;
//                    }
//                    cells[vsS[HeaderColumn["PartnerName"] - 1] + currentPosition].Value = rowData[i].PartnerName;
//                    //
//                    cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                    cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;
//                    //
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].HorizontalAlignment = HAlign.Right;
//                        cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Value = rowData[i].VatPayment6412;
//                        cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Value = rowData[i].VatPayment643;
//                        cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Value = rowData[i].VatTotalSum;
//                        cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Value = rowData[i].PeriodTotalPriceWithVat;
//                        cells[vsS[HeaderColumn["CalcDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].HorizontalAlignment = HAlign.Right;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].Value = rowData[i].Purpose;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["BankDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    //
//                    cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                    cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;

//                    startDebit += rowData[i].StartDebit;
//                    startCredit += rowData[i].StartCredit;
//                    endDebit += rowData[i].EndDebit;
//                    endCredit += rowData[i].EndCredit;

//                }
//                else
//                {
//                    if (rowData[i].FlagDebitCredit > 0)
//                    {
//                        cells[vsS[HeaderColumn["CalcDocument"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["CalcDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Value = rowData[i].VatPayment6412;
//                        cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Value = rowData[i].VatPayment643;
//                        cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Value = rowData[i].VatTotalSum;
//                        cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Value = rowData[i].PeriodTotalPriceWithVat;
//                        cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    else if (rowData[i].FlagDebitCredit < 0)
//                    {
//                        cells[vsS[HeaderColumn["BankNum"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["BankDate"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].Value = rowData[i].Purpose;
//                        cells[vsS[HeaderColumn["Purpose"] - 1] + currentPosition].WrapText = false;
//                        cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit > 0)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                }

//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CalcPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], startContractor, vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], startContractor, vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], startContractor, vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], startContractor, vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CalcPrice"] - 1], startContractor, vsS[HeaderColumn["CalcPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["BankPrice"] - 1], startContractor, vsS[HeaderColumn["BankPrice"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatPayment6412"] - 1], startContractor, vsS[HeaderColumn["VatPayment6412"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatPayment643"] - 1], startContractor, vsS[HeaderColumn["VatPayment643"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["VatTotalSum"] - 1], startContractor, vsS[HeaderColumn["VatTotalSum"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1], startContractor, vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Font.Bold = true;
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Font.Bold = true;

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                    cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                    cells[vsS[sumPosition - 1] + currentPosition].Font.Bold = true;
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["C" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["C" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = startDebit;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = endDebit;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = startCredit;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = endCredit;

//            cells[vsS[HeaderColumn["VatPayment6412"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.VatPayment6412);
//            cells[vsS[HeaderColumn["VatPayment643"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.VatPayment643);
//            cells[vsS[HeaderColumn["VatTotalSum"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.VatTotalSum);
//            cells[vsS[HeaderColumn["PeriodTotalPriceWithVat"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.PeriodTotalPriceWithVat);

//            cells[vsS[HeaderColumn["CalcPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["BankPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0).Sum(x => x.PeriodPrice);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit > 0 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit < 0 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }

//            PrintSignatures(cells, currentPosition + 2);

//            #endregion

//            #region Report caption and froze row

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            cells["A" + captionPosition].Value = String.Format("Відомість аналитичного обліку розрахунків з покупцями та замовниками(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString());
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по замовникам (до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetCWBShortReport(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            string defaultDate = "31.12.2014";

//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("SelectionDate", defaultDate),
//                    new FbParameter("PurposeAccountId", accountId)
//                };

//            string procName = @"select * from ""CWBShortReportProc""(@StartDate, @EndDate, @PurposeAccountId, @SelectionDate)";

//            var dataSource = mapper.Map<IEnumerable<CalcWithBuyersShortReport>, List<CalcWithBuyersShortReportDTO>>(calcWithBuyersShortReport.SQLExecuteProc(procName, Parameters));

//            bool currencyStatus = (accountNum == "362") ? true : false;

//            if (currencyStatus)
//                return PrintCWBShortReportCurrency(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId);
//            else
//                return PrintCWBShortReport(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId);
//        }

//        private bool PrintCWBShortReportCurrency(IEnumerable<CalcWithBuyersShortReportDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<CalcWithBuyersShortReportDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;


//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            HeaderColumn.Add("PartnerSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код/таб.номер";

//            startHeaderPosition++;

//            HeaderColumn.Add("PartnerName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            HeaderColumn.Add("CurrencyName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування валюти";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти за період";
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("DebitPeriod", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("DebitPeriodCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("DebitPeriodCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("DebitPeriodCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("CreditPeriod", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("CreditPeriodCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("CreditPeriodCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("CreditPeriodCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            //cells[vsS[HeaderColumn["DebitPeriod"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на конець періоду";
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;

//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["D" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            #region Loop variables

//            int contractorId = 0;
//            int employeesId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            decimal startDebit = 0, startDebitCurrencyRUB = 0, startDebitCurrencyEUR = 0, startDebitCurrencyUSD = 0,
//                    startCredit = 0, startCreditCurrencyRUB = 0, startCreditCurrencyEUR = 0, startCreditCurrencyUSD = 0,
//                    endDebit = 0, endDebitCurrencyRUB = 0, endDebitCurrencyEUR = 0, endDebitCurrencyUSD = 0,
//                    endCredit = 0, endCreditCurrencyRUB = 0, endCreditCurrencyEUR = 0, endCreditCurrencyUSD = 0,
//                    debitPeriod = 0, debitPeriodCurrencyRUB = 0, debitPeriodCurrencyEUR = 0, debitPeriodCurrencyUSD = 0,
//                    creditPeriod = 0, creditPeriodCurrencyRUB = 0, creditPeriodCurrencyEUR = 0, creditPeriodCurrencyUSD = 0;

//            #endregion

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].ContractorsId || employeesId != rowData[i].EmployeesId)
//                {
//                    contractorId = rowData[i].ContractorsId;
//                    employeesId = rowData[i].EmployeesId;
//                }

//                if (rowData[i].PartnerSrn != null)
//                {
//                    cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].NumberFormat = "@";
//                    cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].Value = rowData[i].PartnerSrn.ToString();
//                }

//                cells[vsS[HeaderColumn["PartnerName"] - 1] + currentPosition].Value = rowData[i].PartnerName;
//                cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].Value = rowData[i].CurrencyName;
//                cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].HorizontalAlignment = HAlign.Center;
//                //
//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["StartDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartDebitCurrency;
//                cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["StartCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartCreditCurrency;
//                cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;

//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["DebitPeriodCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].DebitPeriodCurrency;
//                cells[vsS[HeaderColumn["DebitPeriod"] - 1] + currentPosition].Value = rowData[i].DebitPeriod;
//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["CreditPeriodCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].CreditPeriodCurrency;
//                cells[vsS[HeaderColumn["CreditPeriod"] - 1] + currentPosition].Value = rowData[i].CreditPeriod;


//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["EndDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndDebitCurrency;
//                cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                if (rowData[i].CurrencyId > 1)
//                    cells[vsS[HeaderColumn["EndCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndCreditCurrency;
//                cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;

//                startDebit += rowData[i].StartDebit;
//                startDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartDebitCurrency : 0;
//                startDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartDebitCurrency : 0;
//                startDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartDebitCurrency : 0;

//                startCredit += rowData[i].StartCredit;
//                startCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].StartCreditCurrency : 0;
//                startCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].StartCreditCurrency : 0;
//                startCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].StartCreditCurrency : 0;

//                debitPeriod += rowData[i].DebitPeriod;
//                debitPeriodCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].DebitPeriodCurrency : 0;
//                debitPeriodCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].DebitPeriodCurrency : 0;
//                debitPeriodCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].DebitPeriodCurrency : 0;

//                creditPeriod += rowData[i].CreditPeriod;
//                creditPeriodCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].CreditPeriodCurrency : 0;
//                creditPeriodCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].CreditPeriodCurrency : 0;
//                creditPeriodCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].CreditPeriodCurrency : 0;

//                endDebit += rowData[i].EndDebit;
//                endDebitCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndDebitCurrency : 0;
//                endDebitCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndDebitCurrency : 0;
//                endDebitCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndDebitCurrency : 0;

//                endCredit += rowData[i].EndCredit;
//                endCreditCurrencyRUB += (rowData[i].CurrencyName == "RUB") ? rowData[i].EndCreditCurrency : 0;
//                endCreditCurrencyEUR += (rowData[i].CurrencyName == "EUR") ? rowData[i].EndCreditCurrency : 0;
//                endCreditCurrencyUSD += (rowData[i].CurrencyName == "USD") ? rowData[i].EndCreditCurrency : 0;
                
//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;

//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["C" + currentPosition].Value = "Всього";
//            cells["C" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["D" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["D" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["DebitPeriod"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditPeriodCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = startDebit;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = endDebit;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = startCredit;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = endCredit;
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Value = startDebitCurrencyUSD;
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Value = startDebitCurrencyEUR;
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Value = startDebitCurrencyRUB;
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Value = endDebitCurrencyUSD;
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Value = endDebitCurrencyEUR;
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Value = endDebitCurrencyRUB;

//            cells[vsS[HeaderColumn["CreditPeriod"] - 1] + currentPosition].Value = creditPeriod;
//            cells[vsS[HeaderColumn["DebitPeriod"] - 1] + currentPosition].Value = debitPeriod;
//            cells[vsS[HeaderColumn["DebitPeriodCurrencyUSD"] - 1] + currentPosition].Value = debitPeriodCurrencyUSD;
//            cells[vsS[HeaderColumn["DebitPeriodCurrencyEUR"] - 1] + currentPosition].Value = debitPeriodCurrencyEUR;
//            cells[vsS[HeaderColumn["DebitPeriodCurrencyRUB"] - 1] + currentPosition].Value = debitPeriodCurrencyRUB;
//            cells[vsS[HeaderColumn["CreditPeriodCurrencyUSD"] - 1] + currentPosition].Value = debitPeriodCurrencyUSD;
//            cells[vsS[HeaderColumn["CreditPeriodCurrencyEUR"] - 1] + currentPosition].Value = debitPeriodCurrencyEUR;
//            cells[vsS[HeaderColumn["CreditPeriodCurrencyRUB"] - 1] + currentPosition].Value = debitPeriodCurrencyRUB;

//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Value = startCreditCurrencyUSD;
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Value = startCreditCurrencyEUR;
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Value = startCreditCurrencyRUB;
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Value = endCreditCurrencyUSD;
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Value = endCreditCurrencyEUR;
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Value = endCreditCurrencyRUB;


//            PrintSignatures(cells, currentPosition + 2);


//            #endregion

//            #region Report caption and froze rows

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            cells["A" + captionPosition].Value = String.Format("Відомість аналитичного обліку розрахунків з покупцями та замовниками (скорочено)(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString());
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по замовникам (скорочено)(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return true; }
//        }

//        private bool PrintCWBShortReport(IEnumerable<CalcWithBuyersShortReportDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<CalcWithBuyersShortReportDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            HeaderColumn.Add("PartnerSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код/таб.номер";

//            startHeaderPosition++;

//            HeaderColumn.Add("PartnerName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Обороти за період";

//            HeaderColumn.Add("DebitPeriod", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("CreditPeriod", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            //cells[vsS[HeaderColumn["DebitPeriod"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["C" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            #region Loop variables

//            int contractorId = 0;
//            int employeesId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            decimal startDebit = 0, startCredit = 0, endDebit = 0, endCredit = 0, debitPeriod = 0, creditPeriod = 0;

//            #endregion


//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].ContractorsId || employeesId != rowData[i].EmployeesId)
//                {
//                    contractorId = rowData[i].ContractorsId;
//                    employeesId = rowData[i].EmployeesId;
//                }

//                if (rowData[i].PartnerSrn != null)
//                {
//                    cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].NumberFormat = "@";
//                    cells[vsS[HeaderColumn["PartnerSrn"] - 1] + currentPosition].Value = rowData[i].PartnerSrn.ToString();
//                }

//                cells[vsS[HeaderColumn["PartnerName"] - 1] + currentPosition].Value = rowData[i].PartnerName;

//                cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;

//                cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;

//                cells[vsS[HeaderColumn["DebitPeriod"] - 1] + currentPosition].Value = rowData[i].DebitPeriod;
//                cells[vsS[HeaderColumn["CreditPeriod"] - 1] + currentPosition].Value = rowData[i].CreditPeriod;


//                startDebit += rowData[i].StartDebit;
//                startCredit += rowData[i].StartCredit;
//                endDebit += rowData[i].EndDebit;
//                endCredit += rowData[i].EndCredit;
//                debitPeriod += rowData[i].DebitPeriod;
//                creditPeriod += rowData[i].CreditPeriod;

//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            //cells[vsS[HeaderColumn["DebitPeriod"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPeriod"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;

//            //cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;

//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["C" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["C" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["DebitPeriod"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditPeriod"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = startDebit;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = endDebit;
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = startCredit;
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = endCredit;

//            cells[vsS[HeaderColumn["DebitPeriod"] - 1] + currentPosition].Value = debitPeriod;
//            cells[vsS[HeaderColumn["CreditPeriod"] - 1] + currentPosition].Value = creditPeriod;

//            PrintSignatures(cells, currentPosition + 2);

//            #endregion

//            #region Report caption and froze row

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            cells["A" + captionPosition].Value = String.Format("Відомість аналитичного обліку розрахунків з покупцями та замовниками (скорочено)(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString());
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по замовникам (скорочено)(до рахунку {0}) з {1} по {2} ", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        #endregion

//        #region Expenditures report's

//        public bool GetExpenditureForProjectByPeriod(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""SHReportExpenditureForProject""(@StartDate, @EndDate)";


//            var dataSource = mapper.Map<IEnumerable<ExpenditureForProjectReport>, List<ExpenditureForProjectReportDTO>>(expenditureForProjectReport.SQLExecuteProc(procName, Parameters));

//            return PrintExpendituresForProjectsByPeriod(dataSource, startDate.Date.ToShortDateString(), endDate.Date.ToShortDateString());
//        }

//        public bool PrintExpendituresForProjectsByPeriod(List<ExpenditureForProjectReportDTO> reportList, string StartDate, string EndDate)
//        {
//            SpreadsheetGear.IWorkbook Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ExpendituresForProjects.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Cells = Worksheet.Cells;

//            var Worksheet1 = Workbook.Worksheets[1];
//            var Cells1 = Worksheet1.Cells;

//            int captionPosition = 6;
//            int startWith1 = captionPosition + 1;

//            int fontSize = 12;

//            int startWith = captionPosition + 1;
//            int a = 0;

//            Cells1["A" + captionPosition].Value += StartDate + " по " + EndDate;

//            for (int i = 0; i < reportList.Count; i++)
//            {
//                if (i == 0 || reportList[i].ProjectNum.ToString().Trim() != reportList[i - 1].ProjectNum.ToString().Trim())
//                {
//                    a = 0;
//                    startWith++;
//                    Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                    Cells["D" + startWith].Value = "Cтверджую";
//                    Cells["D" + startWith].Font.Size = 14;
//                    Cells["D" + startWith].Font.Bold = true;
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    startWith++;
//                    Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                    Cells["D" + startWith + ":" + "F" + startWith].Value = "_______________________________";
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    startWith++;
//                    Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                    Cells["D" + startWith + ":" + "F" + startWith].Value = "_______________________________";
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    startWith++;
//                    Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                    Cells["A" + startWith + ":" + "G" + startWith].Value = "Реєстр";
//                    Cells["A" + startWith + ":" + "G" + startWith].Font.Size = 16;
//                    Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    startWith++;
//                    Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                    Cells["A" + startWith + ":" + "G" + startWith].Value = "на списання матеріалів";
//                    Cells["A" + startWith].Font.Size = 14;
//                    Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    startWith++;
//                    Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                    Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + reportList[i].ProjectNum.ToString().Trim() + " за період " + StartDate.ToString() + "-" + EndDate.ToString();
//                    Cells["A" + startWith].Font.Size = 14;
//                    Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    //
//                    //
//                    startWith++;
//                    Cells["A" + startWith].Value = "№ п/п";
//                    Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["A" + startWith].Font.Bold = true;
//                    //
//                    Cells["B" + startWith].Value = "Ном. номер";
//                    Cells["B" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["B" + startWith].Font.Bold = true;
//                    //
//                    Cells["C" + startWith].Value = "Найменування матеріалу";
//                    Cells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["C" + startWith].Font.Bold = true;
//                    //
//                    Cells["D" + startWith].Value = "Од. вим.";
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["D" + startWith].Font.Bold = true;
//                    //
//                    Cells["E" + startWith].Value = "Кіл-ть";
//                    Cells["E" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["E" + startWith].Font.Bold = true;
//                    //
//                    Cells["F" + startWith].Value = "Ціна за од.";
//                    Cells["F" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["F" + startWith].Font.Bold = true;
//                    //
//                    Cells["G" + startWith].Value = "Сума";
//                    Cells["G" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["G" + startWith].Font.Bold = true;
//                }

//                a++;
//                startWith++;
//                Cells["A" + startWith].Value = a;
//                Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["A" + startWith].Font.Size = fontSize;

//                Cells["B" + startWith].Value = reportList[i].Nomenclature;
//                Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["B" + startWith].Font.Size = fontSize;

//                Cells["C" + startWith].Value = reportList[i].Name;
//                Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["C" + startWith].Font.Size = fontSize;

//                Cells["D" + startWith].Value = reportList[i].Measure;
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["D" + startWith].Font.Size = fontSize;

//                Cells["E" + startWith].Value = reportList[i].Quantity;
//                Cells["E" + startWith].NumberFormat = "### ##0.0##";
//                Cells["E" + startWith].HorizontalAlignment = HAlign.Right;
//                Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["E" + startWith].Font.Size = fontSize;

//                Cells["F" + startWith].Value = reportList[i].UnitPrice;
//                Cells["F" + startWith].NumberFormat = "### ### ##0.00";
//                Cells["F" + startWith].HorizontalAlignment = HAlign.Right;
//                Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["F" + startWith].Font.Size = fontSize;

//                Cells["G" + startWith].Value = reportList[i].Price;
//                Cells["G" + startWith].NumberFormat = "### ### ##0.00";
//                Cells["G" + startWith].HorizontalAlignment = HAlign.Right;
//                Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["G" + startWith].Font.Size = fontSize;

//                if ((i < reportList.Count - 1 && reportList[i].ProjectNum.ToString() != reportList[i + 1].ProjectNum.ToString() || i == reportList.Count - 1))
//                {
//                    startWith++;
//                    Cells["E" + startWith + ":" + "F" + startWith].Merge();
//                    Cells["E" + startWith].Font.Size = fontSize;

//                    Cells["E" + startWith].Value = "Разом по " + reportList[i].ProjectNum.ToString() + ":";
//                    Cells["E" + startWith].Font.Bold = true;
//                    Cells["E" + startWith].Font.Size = fontSize;

//                    Cells["G" + startWith].Formula = SetFormula("G", (startWith - a), "G", (startWith - 1), "SUM");
//                    Cells["G" + startWith].NumberFormat = "### ### ##0.00";
//                    Cells["G" + startWith].Font.Bold = true;
//                    Cells["G" + startWith].Interior.Color = Color.LightGreen;
//                    Cells["G" + startWith].Font.Size = fontSize;

//                    Cells["E" + startWith + ":" + "G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["E" + startWith].Font.Size = fontSize;

//                    //
//                    //
//                    startWith1++;
//                    Cells1["A" + startWith1].Value = reportList[i].ProjectNum.ToString();
//                    Cells1["A" + startWith1].Borders.LineStyle = LineStyle.Continous;
//                    Cells1["B" + startWith1].Value = Math.Round(Convert.ToDouble(Cells["G" + startWith].Value.ToString()), 2);
//                    Cells1["B" + startWith1].NumberFormat = "### ### ##0.00";
//                    Cells1["B" + startWith1].HorizontalAlignment = HAlign.Right;
//                    Cells1["B" + startWith1].Borders.LineStyle = LineStyle.Continous;
//                    //
//                    //

//                    startWith++;
//                    // Page Break
//                    SetPageBreak(Worksheet, startWith, 0);
//                }
//            }

//            //
//            startWith1++;
//            Cells1["A" + startWith1].Value = "Разом:";
//            Cells1["A" + startWith1].Font.Bold = true;
//            Cells1["A" + startWith1].Borders.LineStyle = LineStyle.Continous;
//            Cells1["B" + startWith1].Formula = SetFormula("B", 3, "B", (startWith1 - 1), "SUM");
//            Cells1["B" + startWith1].NumberFormat = "### ### ##0.00";
//            Cells1["B" + startWith1].Font.Bold = true;
//            Cells1["B" + startWith1].HorizontalAlignment = HAlign.Right;
//            Cells1["B" + startWith1].Interior.Color = Color.LightGreen;
//            Cells1["B" + startWith1].Borders.LineStyle = LineStyle.Continous;
//            //
//            startWith1++;
//            Cells1["A" + startWith1].Value = "Разом по проектам:";
//            Cells1["A" + startWith1].Font.Bold = true;
//            Cells1["A" + startWith1].Borders.LineStyle = LineStyle.Continous;
//            Cells1["B" + startWith1].Formula = "=B" + (startWith1 - 1) + "-B3";
//            Cells1["B" + startWith1].NumberFormat = "### ### ##0.00";
//            Cells1["B" + startWith1].Font.Bold = true;
//            Cells1["B" + startWith1].HorizontalAlignment = HAlign.Right;
//            Cells1["B" + startWith1].Interior.Color = Color.LightGreen;
//            Cells1["B" + startWith1].Borders.LineStyle = LineStyle.Continous;
//            //

//            PrintSignatures(Cells, startWith + 3);
//            PrintSignatures(Cells1, startWith1 + 3);

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Реєстр на списання за період з " + StartDate + " по " + EndDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Реєстр на списання за період з " + StartDate + " по " + EndDate + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//                return true;
//            }
//            catch (System.IO.IOException)
//            {
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception)
//            {
//                MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }

//        #endregion

//        #region AccountClothes report's

//        public void PrintAccountClothesCard(AccountClothesInfoDTO model, List<AccountClothesMaterialsDTO> source)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ClothesAccountTemplates.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n"+ ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return ;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ClothesAccountTemplates.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            string [] strFullName = model.EmployeeFullName.Split(new Char[] {' '});

//            Сells["R" + 10].Value = model.DocNumber;
//            Сells["R" + 10].HorizontalAlignment = HAlign.Center;

//            Сells["D" + 14].Value = strFullName[0];
//            Сells["D" + 14].HorizontalAlignment = HAlign.Center;

//            Сells["B" + 15].Value = strFullName[1];
//            Сells["B" + 15].HorizontalAlignment = HAlign.Center;
            
//            Сells["I" + 15].Value = strFullName[2];
//            Сells["I" + 15].HorizontalAlignment = HAlign.Center;

//            Сells["F" + 16].Value = model.AccountNumber;
//            Сells["F" + 16].HorizontalAlignment = HAlign.Center;

//            Сells["C" + 18].Value = model.Department;
//            Сells["C" + 18].HorizontalAlignment = HAlign.Center;

//            Сells["D" + 19].Value = model.Profession;
//            Сells["D" + 19].HorizontalAlignment = HAlign.Center;

//            Worksheet = Workbook.Worksheets[1];
//            Сells = Worksheet.Cells;
//            int startWith = 9;


//            for (int i = 0; i < source.Count; i++)
//            {
//                Сells["A" + startWith].Value = source[i].NomenclatureName;
//                Сells["B" + startWith].Value = source[i].NomenclatureNumber;
//                if (source[i].DateOutput != null)
//                    Сells["D" + startWith].Value = source[i].DateOutput.Value.ToShortDateString();
//                Сells["E" + startWith].Value = source[i].QuantityOutput;
//                Сells["F" + startWith].Value = source[i].UnitPrice;
//                Сells["G" + startWith].Value = source[i].TotalPrice;
//                Сells["H" + startWith].Value = source[i].PercentageOutput;
//                if (source[i].DateReturn != null)
//                    Сells["J" + startWith].Value = source[i].DateReturn.Value.ToShortDateString() ?? " ";
//                Сells["K" + startWith].Value = source[i].QuantityReturn;
//                Сells["L" + startWith].Value = source[i].PercentageReturn;
 
//                Сells["A" + startWith + ":" + ("N" + startWith).ToString()].Borders.LineStyle = LineStyle.Continous;
//                Сells["A" + startWith + ":" + ("N" + startWith).ToString()].Font.Size=7;

//                Сells["A" + startWith].HorizontalAlignment = HAlign.Left;
//                Сells["B" + startWith + ":" + ("L" + startWith).ToString()].HorizontalAlignment = HAlign.Center;

//                startWith++;
//            }


//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Особова картка " + model.DocNumber + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Особова картка " + model.DocNumber + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintAccountClothesJournalCard(List<AccountClothesJournalDTO> source, DateTime startDate, DateTime endDate)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountClothesJournalTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountClothesJournalTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 20;

//            for (int i = 0; i < source.Count; i++)
//            {
//                Сells["A" + startWith].Value = source[i].DocDate;
//                Сells["B" + startWith].Value = source[i].EmployeeFullName;
//                Сells["C" + startWith].Value = source[i].AccountNumber;
//                Сells["D" + startWith].Value = source[i].NomenclatureName;
//                Сells["E" + startWith].Value = source[i].NomenclatureNumber;
//                Сells["F" + startWith].Value = source[i].UnitLocalName;
//                Сells["G" + startWith].Value = source[i].UnitCode;
//                Сells["H" + startWith].Value = source[i].QuantityOutput;



//                if (source[i].DateOutput != null)
//                    Сells["I" + startWith].Value = source[i].DateOutput;

//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Borders.LineStyle = LineStyle.Continous;
//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Font.Size = 8;

//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["B" + startWith + ":" + ("K" + startWith).ToString()].HorizontalAlignment = HAlign.Center;

//                startWith++;
//            }


//            try
//            {
//                /*Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString + " по " + endDate.ToShortDateString + ".xls", FileFormat.Excel8);
//                */
//                Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintAccountClothesJournalWriteOff(List<AccountClothesJournalDTO> source, DateTime startDate, DateTime endDate)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountJournalWriteOffTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountJournalWriteOffTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 29;

//            IRange cells = Worksheet.Cells;

//            for (int i = 0; i < source.Count; i++)
//            {
//                cells["" + startWith + ":" + startWith].Insert();
//                Сells["A" + startWith].Value = source[i].NomenclatureName;
//                Сells["B" + startWith].Value = source[i].NomenclatureNumber;
//                Сells["C" + startWith].NumberFormat = "@";
//                Сells["C" + startWith].Value = source[i].OrderNumber;
//                Сells["D" + startWith].Value = source[i].UnitCode;
//                Сells["E" + startWith].Value = source[i].UnitLocalName;
//                Сells["F" + startWith].Value = source[i].QuantityReturn;
//                Сells["G" + startWith].Value = source[i].OrderDate;
//                Сells["H" + startWith].Value = source[i].UnitPrice;
//                Сells["I" + startWith + ":" + "J" + startWith].Merge();
//                Сells["I" + startWith].NumberFormat = "#,###.00";
//                Сells["I" + startWith].Value = source[i].TotalPrice;
//                Сells["K" + startWith + ":" + "L" + startWith].Merge();
//                Сells["K" + startWith].NumberFormat = "#,###.00";

//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Borders.LineStyle = LineStyle.Continous;
//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Font.Size = 8;

//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["B" + startWith + ":" + ("K" + startWith).ToString()].HorizontalAlignment = HAlign.Center;
                
//                startWith++;
//            }


//            try
//            {
//                /*Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString + " по " + endDate.ToShortDateString + ".xls", FileFormat.Excel8);
//                */
//                Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintToolMaterialsJournalWriteOff(List<ToolActMaterialsJournalDTO> source, DateTime startDate, DateTime endDate)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ToolsJournalWriteOffTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ToolsJournalWriteOffTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 29;

//            IRange cells = Worksheet.Cells;

//            for (int i = 0; i < source.Count; i++)
//            {
//                cells["" + startWith + ":" + startWith].Insert();
//                Сells["A" + startWith].Value = source[i].NomenclatureName;
//                Сells["B" + startWith].Value = source[i].Nomenclature;
//                Сells["C" + startWith].NumberFormat = "@";
//                Сells["C" + startWith].Value = "";
//                //Сells["C" + startWith].Value = source[i].OrderNumber;
//                Сells["D" + startWith].Value = source[i].UnitCode;
//                Сells["E" + startWith].Value = source[i].UnitLocalName;
//                //Сells["F" + startWith].Value = source[i].QuantityReturn;

//                Сells["F" + startWith].Value = source[i].Quantity;
//                Сells["G" + startWith].Value = source[i].OrderDate;
//                Сells["H" + startWith].NumberFormat = "#,###.00";
//                Сells["H" + startWith].Value = source[i].UnitPrice;
//                Сells["I" + startWith + ":" + "J" + startWith].Merge();
//                Сells["I" + startWith].NumberFormat = "#,###.00";
//                Сells["I" + startWith].Value = source[i].TotalPriceQuantity;
//                Сells["K" + startWith + ":" + "L" + startWith].Merge();
//                Сells["K" + startWith].NumberFormat = "#,###.00";

//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Borders.LineStyle = LineStyle.Continous;
//                Сells["A" + startWith + ":" + ("K" + startWith).ToString()].Font.Size = 8;

//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["B" + startWith + ":" + ("K" + startWith).ToString()].HorizontalAlignment = HAlign.Center;

//                startWith++;
//            }


//            try
//            {
//                /*Workbook.SaveAs(GeneratedReportsDir + "Відомість обліку видачі з " + startDate.ToShortDateString + " по " + endDate.ToShortDateString + ".xls", FileFormat.Excel8);
//                */
//                Workbook.SaveAs(GeneratedReportsDir + "Акт на списання з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт на списання з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        #endregion

//        #region InvoiceRequirement report's               

//        public void InvoiceRequirement(List<InvoiceRequirementMaterialsInfoDTO> source, string number, string date, string responsiblePerson)
//        {
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\InvoiceRequirement.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;

//            int startWith = 25;

//            double totalSum = Convert.ToDouble(source.Sum(s => s.TotalPrice));
//            double totalQunatity = Convert.ToDouble(source.Sum(s => s.RequiredQuantity));

//            Сells["A" + 16].Value = number;
//            Сells["C" + 16].Value = date;
//            Сells["B" + 20].Value = responsiblePerson;

//            for (int i = 0; i < source.Count; i++)
//            {
//                Сells["A" + startWith].Value = source[i].BalanceAccountNum;
//                Сells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["B" + startWith].Value = source[i].ExpenAccountNum;
//                Сells["C" + startWith].Value = source[i].NomenclatureName;
//                Сells["D" + startWith].Value = source[i].Nomenclature;
//                Сells["F" + startWith].Value = source[i].UnitLocalName;
//                Сells["G" + startWith].Value = source[i].RequiredQuantity;
//                Сells["H" + startWith].Value = source[i].ExpenQuantity;
//                Сells["I" + startWith].Value = source[i].UnitPrice;
//                Сells["J" + startWith].Value = source[i].TotalPrice;
//                Сells["K" + startWith].Value = source[i].InventoryNumber;

//                Сells["M" + startWith + ":" + ("N" + startWith).ToString()].Merge();
//                Сells["M" + startWith].Value = source[i].ReceiptNum;
//                Сells["M" + startWith].HorizontalAlignment = HAlign.Right;
//                Сells["M" + startWith].NumberFormat = "@";
                
//                startWith++;
//            }

//            Сells["A" + 25 + ":" + ("N" + (startWith - 1)).ToString()].Borders.LineStyle = LineStyle.Continous;

//            startWith++;
//            Сells["A" + startWith].Value = "Всього відпущено";
//            Сells["A" + startWith].HorizontalAlignment = HAlign.Left;

//            Сells["C" + startWith + ":" + ("G" + startWith).ToString()].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            Сells["C" + startWith].Value = RuDateAndMoneyConverter.NumeralsDoubleToTxt(totalQunatity, 2, Utils.TextCase.Accusative, true);
//            Сells["C" + startWith].HorizontalAlignment = HAlign.Left;
//            Сells["H" + startWith].Value = "найменувань, на суму  ";
//            Сells["K" + startWith + ":" + ("N" + startWith).ToString()].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;

//            startWith++;
//            startWith++;
//            Сells["A" + startWith].Value = RuDateAndMoneyConverter.CurrencyToTxt(totalSum, true);
//            Сells["A" + startWith].HorizontalAlignment = HAlign.Left;
//            Сells["A" + startWith + ":" + ("M" + startWith).ToString()].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//            Сells["N" + startWith].Value = "грн.";

//            startWith++;
//            startWith++;
//            Сells["A" + startWith].Value = "Відпуск дозволив";
//            startWith++;
//            Сells["A" + startWith].Value = "Головний інженер";
//            Сells["C" + startWith].Value = "__________________________";
//            Сells["H" + startWith].Value = "Головний бухгалтер________________________";
//            startWith++;
//            startWith++;
//            Сells["A" + startWith].Value = "Здав (відпустив)";
//            Сells["C" + startWith].Value = "_________________________________";
//            Сells["D" + startWith].Value = "Прийняв (одержав) ";
//            Сells["G" + startWith].Value = responsiblePerson;
//            Сells["G" + startWith].Font.Underline = UnderlineStyle.Single;


//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Накладна вимога " + Convert.ToDateTime(date).Month + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Накладна вимога " + Convert.ToDateTime(date).Month + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void InvoicesForFixedAssets(List<InvoicesFixedAssetsInfoDTO> SourseDataTable, string startDate, string endDate)
//        {
//            if (SourseDataTable.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;

//            //Var
//            int captionPosition = 9;
//            int startRowIndex = captionPosition + 2;
//            int activRowIndex = startRowIndex;
//            int sumColIndex = 16;
//            string nameLastCol = vsS[sumColIndex - 1];

//            //Head

//            cells["A" + (captionPosition - 2) + ":" + "P" + (captionPosition - 2)].Merge();
//            cells["A" + (captionPosition - 2) + ":" + "P" + (captionPosition - 2)].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["A" + (captionPosition - 2)].Value = "Відомість основних засобів у вимогах";

//            cells["A" + (captionPosition - 1) + ":" + "P" + (captionPosition - 1)].Merge();
//            cells["A" + (captionPosition - 1) + ":" + "P" + (captionPosition - 1)].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["A" + (captionPosition - 1)].Value = "за період з " + startDate + " по " + endDate;
            
//            cells["A" + captionPosition].ColumnWidth = 15.14;
//            cells["B" + captionPosition].ColumnWidth = 46.29;
//            cells["C" + captionPosition].ColumnWidth = 26.86;
//            cells["D" + captionPosition].ColumnWidth = 43.86;
//            cells["E" + captionPosition].ColumnWidth = 27.83;
//            cells["F" + captionPosition].ColumnWidth = 15.86;
//            cells["G" + captionPosition].ColumnWidth = 10.86;
//            cells["H" + captionPosition].ColumnWidth = 70.00;
//            cells["I" + captionPosition].ColumnWidth = 13.86;
//            cells["J" + captionPosition].ColumnWidth = 12.5;
//            cells["K" + captionPosition].ColumnWidth = 13.86;
//            cells["L" + captionPosition].ColumnWidth = 36.86;
//            cells["M" + captionPosition].ColumnWidth = 10.86;
//            cells["N" + captionPosition].ColumnWidth = 15.86;
//            cells["O" + captionPosition].ColumnWidth = 14.86;
//            cells["P" + captionPosition].ColumnWidth = 14.56;

//            cells["A" + captionPosition+":"+"E" + captionPosition].Merge();
//            cells["A" + captionPosition + ":" + "E" + captionPosition].HorizontalAlignment = SpreadsheetGear.HAlign.Center; 
//            cells["A" + captionPosition].Value = "Основні засоби";


//            cells["F" + captionPosition + ":" + "P" + captionPosition].Merge();
//            cells["F" + captionPosition + ":" + "P" + captionPosition].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["F" + captionPosition].Value = "Вимоги";

//            ++captionPosition;
//            cells["A" + captionPosition + ":" + "P" + captionPosition].RowHeight = 31.50;
//            cells["A" + captionPosition + ":" + "P" + captionPosition].WrapText = true;
//            cells["A" + (captionPosition - 3) + ":" + "P" + captionPosition].Font.Size = 12;
//            cells["A" + (captionPosition - 3) + ":" + "P" + captionPosition].Font.Bold = true;
//            cells["A" + (captionPosition - 1) + ":" + "P" + captionPosition].Borders.LineStyle = LineStyle.Continous;

 
//            cells["A" + captionPosition].Value = "Інв. номер ОЗ";
//            cells["B" + captionPosition].Value = "Найменування ОЗ";
//            cells["C" + captionPosition].Value = "Група ОЗ";
//            cells["D" + captionPosition].Value = "Відповідальна особа";
//            cells["E" + captionPosition].Value = "Інформація";
//            cells["F" + captionPosition].Value = "Ном. надходження";
//            cells["G" + captionPosition].Value = "Номенкл. номер";
//            cells["H" + captionPosition].Value = "Найменування";
//            cells["I" + captionPosition].Value = "Бал. рах.";
//            cells["J" + captionPosition].Value = "Номер";
//            cells["K" + captionPosition].Value ="Дата";
//            cells["L" + captionPosition].Value = "Відповідальна особа";
//            cells["M" + captionPosition].Value = "Кільк-сть";
//            cells["N" + captionPosition].Value = "Ціна";
//            cells["O" + captionPosition].Value = "Сума";
//            cells["P" + captionPosition].Value = "Кредит. рахунок";

//            //Body
//            foreach (var item in SourseDataTable)
//            {     
//                cells[String.Format("{0}{1}", vsS[0], activRowIndex)].Value = item.InventoryNumber;
//                cells[String.Format("{0}{1}", vsS[1], activRowIndex)].Value = item.InventoryName;
//                cells[String.Format("{0}{1}", vsS[2], activRowIndex)].Value = item.GroupName;
//                cells[String.Format("{0}{1}", vsS[3], activRowIndex)].Value = item.FixedSupplierFullName;
//                cells[String.Format("{0}{1}", vsS[4], activRowIndex)].Value = item.Description;
//                cells[String.Format("{0}{1}", vsS[5], activRowIndex)].Value = item.ReceiptNum;
//                cells[String.Format("{0}{1}", vsS[6], activRowIndex)].Value = item.Nomenclature;
//                cells[String.Format("{0}{1}", vsS[7], activRowIndex)].Value = item.NomenclatureName;
//                cells[String.Format("{0}{1}", vsS[8], activRowIndex)].Value = item.BalanceAccountNum;
//                cells[String.Format("{0}{1}", vsS[8], activRowIndex)].HorizontalAlignment = SpreadsheetGear.HAlign.Right;
//                cells[String.Format("{0}{1}", vsS[9], activRowIndex)].NumberFormat = "@";
//                cells[String.Format("{0}{1}", vsS[9], activRowIndex)].Value = item.Number;
//                cells[String.Format("{0}{1}", vsS[10], activRowIndex)].Value = item.Date;
//                cells[String.Format("{0}{1}", vsS[11], activRowIndex)].Value = item.InvoiceSupplierFullName;
//                cells[String.Format("{0}{1}", vsS[12], activRowIndex)].Value = item.Quantity;
//                cells[String.Format("{0}{1}", vsS[13], activRowIndex)].Value = item.UnitPrice;
//                cells[String.Format("{0}{1}", vsS[13], activRowIndex)].NumberFormat = "### ### ##0.00";
//                cells[String.Format("{0}{1}", vsS[14], activRowIndex)].Value = item.TotalPrice;
//                cells[String.Format("{0}{1}", vsS[14], activRowIndex)].NumberFormat = "### ### ##0.00";
//                cells[String.Format("{0}{1}", vsS[15], activRowIndex)].Value = item.CreditAccountNum;

//                activRowIndex++;
//            }

//            PrintSignatures(cells, activRowIndex + 3);

//            cells[String.Format("A{0}:{1}{2}", startRowIndex, nameLastCol, (activRowIndex - 1))].Borders.LineStyle = LineStyle.Continous;
//            cells[String.Format("A{0}:{1}{2}", startRowIndex, nameLastCol, (activRowIndex - 1))].Font.Size = 12;

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Відомість ОЗ у вимогах за період з " + startDate + " по " + endDate + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість ОЗ у вимогах за період з " + startDate + " по " + endDate + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        #endregion

//        #region Production report's

//        public bool ExpendituresForProject(List<ExpedinturesAccountantDTO> source, DateTime startDate, DateTime endDate)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            }
//            catch (Exception ex)
//            {
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Cells = Worksheet.Cells;

//            int captionPosition = 10;
//            int startWith1 = captionPosition + 1;
//            int fontSize = 12;
//            int startWith = captionPosition + 1;

            

//            List<string> customerOrdersGroupList = source.Select(bdsm => bdsm.CustomerOrderNumber).Distinct().ToList();

//            foreach (var item in customerOrdersGroupList)
//            {
//                //var customerOrders = source.Where(srt => srt.CustomerOrderId == item.Value).ToList();
//                var customerOrders = source.Where(srt => srt.CustomerOrderNumber == item.ToString()).ToList();
//                int a = 0;

              

//                Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                Cells["D" + startWith].Value = "Cтверджую";
//                Cells["D" + startWith].Font.Size = 14;
//                Cells["D" + startWith].Font.Bold = true;
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                startWith++;
//                Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                Cells["D" + startWith + ":" + "F" + startWith].Value = "_______________________________";
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                startWith++;
//                Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                Cells["D" + startWith + ":" + "F" + startWith].Value = "_______________________________";
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
                
//                //
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "Реєстр";
//                Cells["A" + startWith + ":" + "G" + startWith].Font.Size = 16;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "на списання матеріалів";
//                Cells["A" + startWith].Font.Size = 14;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                //startWith++;
//                //Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                //Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + source.First(srt => srt.CustomerOrderId == item.Value).CustomerOrderNumber + " за період " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                //Cells["A" + startWith].Font.Size = 14;
//                //Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + source.First(srt => srt.CustomerOrderNumber == item).CustomerOrderNumber + " за період " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                Cells["A" + startWith].Font.Size = 14;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                //
//                startWith++;
//                Cells["A" + startWith].Value = "№ п/п";
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["A" + startWith].ColumnWidth = 3.14;
//                Cells["A" + startWith].Font.Bold = true;
//                //
//                Cells["B" + startWith].Value = "Ном. номер";
//                Cells["B" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["B" + startWith].ColumnWidth = 14.14;
//                Cells["B" + startWith].Font.Bold = true;
//                //
//                Cells["C" + startWith].Value = "Найменування матеріалу";
//                Cells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["C" + startWith].ColumnWidth = 40.57;
//                Cells["C" + startWith].Font.Bold = true;
//                //
//                Cells["D" + startWith].Value = "Од. вим.";
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["D" + startWith].ColumnWidth = 9.14;
//                Cells["D" + startWith].Font.Bold = true;
//                //
//                Cells["E" + startWith].Value = "Кіл-ть";
//                Cells["E" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["E" + startWith].ColumnWidth = 8.43;
//                Cells["E" + startWith].Font.Bold = true;
//                ////
//                Cells["F" + startWith].Value = "Номер";
//                Cells["F" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["F" + startWith].ColumnWidth = 5.86;
//                Cells["F" + startWith].Font.Bold = true;

//                Cells["G" + startWith].Value = "Ціна";
//                Cells["G" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["G" + startWith].ColumnWidth = 10.86;
//                Cells["G" + startWith].Font.Bold = true;

//                Cells["H" + startWith].Value = "Сума";
//                Cells["H" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["H" + startWith].ColumnWidth = 10.86;
//                Cells["H" + startWith].Font.Bold = true;

//                foreach (var itemOrder in customerOrders)
//                {
//                    a++;
//                    startWith++;
//                    Cells["A" + startWith].Value = a;
//                    Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["A" + startWith].Font.Size = fontSize;

//                    Cells["B" + startWith].Value = itemOrder.Nomenclature;
//                    Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["B" + startWith].Font.Size = fontSize;

//                    Cells["C" + startWith].Value = itemOrder.NomenclatureName;
//                    Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["C" + startWith].Font.Size = fontSize;

//                    Cells["D" + startWith].Value = itemOrder.UnitLocalName;
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["D" + startWith].Font.Size = fontSize;

//                    Cells["E" + startWith].Value = itemOrder.QUANTITY;
//                    Cells["E" + startWith].NumberFormat = "### ##0.0##";
//                    Cells["E" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["E" + startWith].Font.Size = fontSize;

//                    Cells["F" + startWith].Value = itemOrder.ReceiptNum;
//                    Cells["F" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["F" + startWith].Font.Size = fontSize;

//                    Cells["G" + startWith].Value = itemOrder.UnitPrice;
//                    Cells["G" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["G" + startWith].Font.Size = fontSize;

//                    Cells["H" + startWith].Value = Math.Round((Decimal)(itemOrder.PRICE ), 2);
//                    Cells["H" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["H" + startWith].Font.Size = fontSize;

//                }

//                startWith++;
//            }

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Реєстр на списання за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Реєстр на списання за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;
//        }


//        public bool ExpendituresForProject(List<ExpenditureInfoDTO> source)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            }
//            catch (Exception ex)
//            {
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Cells = Worksheet.Cells;

//            int captionPosition = 6;
//            int startWith1 = captionPosition + 1;
//            int fontSize = 12;
//            int startWith = captionPosition + 1;



//            List<string> customerOrdersGroupList = source.Select(bdsm => bdsm.CustomerOrderNumber).Distinct().ToList();

//            foreach (var item in customerOrdersGroupList)
//            {
//                var customerOrders = source.Where(srt => srt.CustomerOrderNumber == item.ToString()).ToList();
//                int a = 0;

//                decimal totalPrice = 0;

//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "Реєстр";
//                Cells["A" + startWith + ":" + "G" + startWith].Font.Size = 16;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "на списання матеріалів";
//                Cells["A" + startWith].Font.Size = 14;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                //startWith++;
//                //Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                //Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + source.First(srt => srt.CustomerOrderId == item.Value).CustomerOrderNumber + " за період " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                //Cells["A" + startWith].Font.Size = 14;
//                //Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + source.First(srt => srt.CustomerOrderNumber == item).CustomerOrderNumber;
//                Cells["A" + startWith].Font.Size = 14;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                //
//                startWith++;
//                Cells["A" + startWith].Value = "№ п/п";
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["A" + startWith].ColumnWidth = 3.14;
//                Cells["A" + startWith].Font.Bold = true;
//                //
//                Cells["B" + startWith].Value = "Ном. номер";
//                Cells["B" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["B" + startWith].ColumnWidth = 14.14;
//                Cells["B" + startWith].Font.Bold = true;
//                //
//                Cells["C" + startWith].Value = "Найменування матеріалу";
//                Cells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["C" + startWith].ColumnWidth = 40.57;
//                Cells["C" + startWith].Font.Bold = true;
//                //
//                Cells["D" + startWith].Value = "Од. вим.";
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["D" + startWith].ColumnWidth = 9.14;
//                Cells["D" + startWith].Font.Bold = true;
//                //
//                Cells["E" + startWith].Value = "Кіл-ть";
//                Cells["E" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["E" + startWith].ColumnWidth = 8.43;
//                Cells["E" + startWith].Font.Bold = true;
//                ////
//                Cells["F" + startWith].Value = "Номер";
//                Cells["F" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["F" + startWith].ColumnWidth = 5.86;
//                Cells["F" + startWith].Font.Bold = true;

//                Cells["G" + startWith].Value = "Ціна";
//                Cells["G" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["G" + startWith].ColumnWidth = 10.86;
//                Cells["G" + startWith].Font.Bold = true;

//                Cells["H" + startWith].Value = "Сума";
//                Cells["H" + startWith].HorizontalAlignment = HAlign.Center;
//                Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Cells["H" + startWith].ColumnWidth = 10.86;
//                Cells["H" + startWith].Font.Bold = true;

//                foreach (var itemOrder in customerOrders)
//                {
//                    a++;
//                    startWith++;
//                    Cells["A" + startWith].Value = a;
//                    Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["A" + startWith].Font.Size = fontSize;

//                    Cells["B" + startWith].Value = itemOrder.Nomenclature;
//                    Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["B" + startWith].Font.Size = fontSize;

//                    Cells["C" + startWith].Value = itemOrder.Name;
//                    Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["C" + startWith].Font.Size = fontSize;

//                    Cells["D" + startWith].Value = itemOrder.UnitLocalName;
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["D" + startWith].Font.Size = fontSize;

//                    Cells["E" + startWith].Value = itemOrder.Quantity;
//                    Cells["E" + startWith].NumberFormat = "### ##0.0##";
//                    Cells["E" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["E" + startWith].Font.Size = fontSize;

//                    Cells["F" + startWith].Value = itemOrder.ReceiptNum;
//                    Cells["F" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["F" + startWith].Font.Size = fontSize;

//                    Cells["G" + startWith].Value = itemOrder.UnitPrice;
//                    Cells["G" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["G" + startWith].Font.Size = fontSize;

//                    Cells["H" + startWith].Value = Math.Round((Decimal)(itemOrder.ExpPrice), 2);
//                    Cells["H" + startWith].HorizontalAlignment = HAlign.Right;
//                    Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["H" + startWith].Font.Size = fontSize;

//                    totalPrice += Math.Round((Decimal)(itemOrder.ExpPrice), 2);

//                }
//                startWith++;

//                Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                Cells["D" + startWith].Value = "Всього: ";
//                Cells["D" + startWith].Font.Size = 14;
//                Cells["D" + startWith].Font.Bold = true;
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Right;

//                Cells["G" + startWith + ":" + "H" + startWith].Merge();
//                Cells["G" + startWith].Value = totalPrice;
//                Cells["G" + startWith].NumberFormat = "### ##0.0##";
//                Cells["G" + startWith].HorizontalAlignment = HAlign.Left;
//                Cells["G" + startWith].Font.Size = fontSize;

//                startWith++;
//            }

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Реєстр на списання заказу № " + source.First().CustomerOrderNumber + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Реєстр на списання заказу № " + source.First().CustomerOrderNumber + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;
//        }

//        public bool ExpendituresForProjectWithTotalPrice(List<ExpedinturesAccountantDTO> source, DateTime startDate, DateTime endDate, bool materialPrint)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            }
//            catch (Exception ex)
//            {
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Cells = Worksheet.Cells;

//            int captionPosition = 10;
//            int startWith1 = captionPosition + 1;
//            int fontSize = 12;
//            int startWith = captionPosition + 1;

//            List<string> customerOrdersGroupList = source.Select(bdsm => bdsm.ProdCustomerNumber).Distinct().ToList();

//            foreach (var item in customerOrdersGroupList)
//            {
//                //var customerOrders = source.Where(srt => srt.CustomerOrderId == item.Value).ToList();
//                var customerOrders = source.Where(srt => srt.ProdCustomerNumber == item.ToString()).ToList();
//                int a = 0;
//                decimal totalPrice = 0;
//                decimal totalPriceSum = 0;


//                //

//                //
//                //startWith++;
//                //Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                //Cells["A" + startWith + ":" + "G" + startWith].Value = "за замовленням " + source.First(srt => srt.CustomerOrderId == item.Value).CustomerOrderNumber + " за період " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                //Cells["A" + startWith].Font.Size = 14;
//                //Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                startWith++;
//                Cells["A" + startWith + ":" + "G" + startWith].Merge();
//                Cells["A" + startWith + ":" + "G" + startWith].Value = "Заказ " + source.First(srt => srt.ProdCustomerNumber == item).ProdCustomerNumber + " за період " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                Cells["A" + startWith].Font.Size = 14;
//                Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                //
//                //
//                if (materialPrint)
//                {

//                    startWith++;
//                    Cells["A" + startWith].Value = "№ п/п";
//                    Cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["A" + startWith].ColumnWidth = 3.14;
//                    Cells["A" + startWith].Font.Bold = true;
//                    //
//                    Cells["B" + startWith].Value = "Ном. номер";
//                    Cells["B" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["B" + startWith].ColumnWidth = 14.14;
//                    Cells["B" + startWith].Font.Bold = true;
//                    //
//                    Cells["C" + startWith].Value = "Найменування матеріалу";
//                    Cells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["C" + startWith].ColumnWidth = 40.57;
//                    Cells["C" + startWith].Font.Bold = true;
//                    //
//                    Cells["D" + startWith].Value = "Од. вим.";
//                    Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["D" + startWith].ColumnWidth = 9.14;
//                    Cells["D" + startWith].Font.Bold = true;
//                    //
//                    Cells["E" + startWith].Value = "Кіл-ть";
//                    Cells["E" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["E" + startWith].ColumnWidth = 8.43;
//                    Cells["E" + startWith].Font.Bold = true;
//                    ////
//                    Cells["F" + startWith].Value = "Номер";
//                    Cells["F" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["F" + startWith].ColumnWidth = 5.86;
//                    Cells["F" + startWith].Font.Bold = true;

//                    Cells["G" + startWith].Value = "Ціна";
//                    Cells["G" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["G" + startWith].ColumnWidth = 10.86;
//                    Cells["G" + startWith].Font.Bold = true;

//                    Cells["H" + startWith].Value = "Сума";
//                    Cells["H" + startWith].HorizontalAlignment = HAlign.Center;
//                    Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    Cells["H" + startWith].ColumnWidth = 10.86;
//                    Cells["H" + startWith].Font.Bold = true;
//                }

//                foreach (var itemOrder in customerOrders)
//                {
//                    totalPrice = Math.Round((Decimal)(itemOrder.PRICE * itemOrder.QUANTITY), 2);
//                    totalPriceSum += totalPrice;

//                    if (materialPrint)
//                    {
//                        a++;
//                        startWith++;

//                        Cells["A" + startWith].Value = a;
//                        Cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["A" + startWith].Font.Size = fontSize;

//                        Cells["B" + startWith].Value = itemOrder.Nomenclature;
//                        Cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["B" + startWith].Font.Size = fontSize;

//                        Cells["C" + startWith].Value = itemOrder.NomenclatureName;
//                        Cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["C" + startWith].Font.Size = fontSize;

//                        Cells["D" + startWith].Value = itemOrder.UnitLocalName;
//                        Cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                        Cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["D" + startWith].Font.Size = fontSize;

//                        Cells["E" + startWith].Value = itemOrder.QUANTITY;
//                        Cells["E" + startWith].NumberFormat = "### ##0.0##";
//                        Cells["E" + startWith].HorizontalAlignment = HAlign.Right;
//                        Cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["E" + startWith].Font.Size = fontSize;

//                        Cells["F" + startWith].Value = itemOrder.ReceiptNum;
//                        Cells["F" + startWith].HorizontalAlignment = HAlign.Right;
//                        Cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["F" + startWith].Font.Size = fontSize;

//                        Cells["G" + startWith].Value = itemOrder.PRICE;
//                        Cells["G" + startWith].HorizontalAlignment = HAlign.Right;
//                        Cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["G" + startWith].Font.Size = fontSize;


//                        Cells["H" + startWith].Value = totalPrice;
//                        Cells["H" + startWith].HorizontalAlignment = HAlign.Right;
//                        Cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                        Cells["H" + startWith].Font.Size = fontSize;
//                    }

//                }

//                startWith++;

//                Cells["D" + startWith + ":" + "F" + startWith].Merge();
//                Cells["D" + startWith].Value = "Всього: ";
//                Cells["D" + startWith].Font.Size = 14;
//                Cells["D" + startWith].Font.Bold = true;
//                Cells["D" + startWith].HorizontalAlignment = HAlign.Right;

//                Cells["G" + startWith + ":" + "H" + startWith].Merge();
//                Cells["G" + startWith].Value = totalPriceSum;
//                Cells["G" + startWith].NumberFormat = "### ##0.0##";
//                Cells["G" + startWith].HorizontalAlignment = HAlign.Left;
//                Cells["G" + startWith].Font.Size = fontSize;

//                startWith++;
//            }

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Реєстр на списання за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Реєстр на списання за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;



//        }

//        #endregion

//        #region BankPayments report's

//        public bool GetBPReportTrialBalance(DateTime startDate, DateTime endDate, int accountId, string accountNum, string bankName)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("BankAccountId", accountId)
//                };

//            string procName = @"select * from ""BPReportTrialBalanceProc""(@StartDate, @EndDate, @BankAccountId)";

//            var dataSource = mapper.Map<IEnumerable<BankPaymentsReportTrialBalance>, List<BankPaymentsReportTrialBalanceDTO>>(bankPaymentsReportTrialBalance.SQLExecuteProc(procName, Parameters));
            
//            return PrintBPReportTrialBalance(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId, bankName);
//        }

//        public List<BankPaymentsReportTrialBalanceAll313DTO> GetBPReportTrialBalanceShort(DateTime startDate, DateTime endDate, int accountId)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("BankAccountId", accountId)
//                };

//            string procName = @"select * from ""BPReportTrialBalanceShortProc""(@StartDate, @EndDate, @BankAccountId)";

//            List<BankPaymentsReportTrialBalanceAll313DTO> dataSource = mapper.Map<IEnumerable<BankPaymentsReportTrialBalanceAll313>, List<BankPaymentsReportTrialBalanceAll313DTO>>(bankPaymentsReportTrialBalanceAll313.SQLExecuteProc(procName, Parameters).ToList());

//            return  dataSource;
//        }




//        public bool PrintBPReportTrialBalanceShortAllAccount313(List<BankPaymentsReportTrialBalanceAll313DTO> dataSource, DateTime startDate, DateTime endDate)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\BankPaymentTrialBalanceAll313Template.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

            
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\BankPaymentTrialBalanceAll313Template.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;

//            IRange cells = Worksheet.Cells;

//            string statementDate = RuDateAndMoneyConverter.DateToTextShort(endDate);

//            Сells["A" + 6].Value = "за " + statementDate + " року";
//            Сells["A" + 6].HorizontalAlignment = HAlign.Center;

//            int startWith = 9;
//            int k = startWith;
//            int counterRow = 1;
//            decimal prevSaldo = 0;
//            decimal endSaldo = 0;


//            int currentBankAccountId = dataSource[0].Bank_Account_Id;

//            for (int i = 0; i < dataSource.Count; i++)
//            {     
//                Сells["D" + startWith + ":" + "L" + startWith].NumberFormat = "### ### ##0.00";

//                if ((dataSource[i].Bank_Account_Id != currentBankAccountId)) 
//                {
//                    Сells["A" + startWith].Value = counterRow;
//                    Сells["B" + startWith].Value = dataSource[i - 1].AccountNum;
//                    Сells["C" + startWith].Value = dataSource[i - 1].AccountNumDescription;

//                    cells["H" + startWith].Formula = "=SUM(" + "F" + startWith + ":" + "G" + startWith + ")";
//                    cells["K" + startWith].Formula = "=SUM(" + "I" + startWith + ":" + "J" + startWith + ")";

//                    if (prevSaldo >= 0)
//                    {
//                        Сells["D" + startWith].Value = Math.Abs(prevSaldo);
//                        Сells["E" + startWith].Value = 0;
//                    }
//                    else
//                    {
//                        Сells["D" + startWith].Value = 0;
//                        Сells["E" + startWith].Value = Math.Abs(prevSaldo);
//                    }

//                    if (endSaldo >= 0)
//                    {
//                        Сells["L" + startWith].Value = Math.Abs(endSaldo);
//                        Сells["M" + startWith].Value = 0;
//                    }
//                    else
//                    {
//                        Сells["L" + startWith].Value = 0;
//                        Сells["M" + startWith].Value = Math.Abs(endSaldo);
//                    }

//                    prevSaldo = 0;
//                    endSaldo = 0;

//                    ++startWith;
//                    ++counterRow;

//                    Сells["" + startWith + ":" + startWith].Insert();
//                    currentBankAccountId = dataSource[i].Bank_Account_Id;

//                }

//                switch (dataSource[i].PurposeAccountNum)
//                {
//                    case "311/2":
//                        Сells["G" + startWith].Value = dataSource[i].DebitFromPeriod;
//                        Сells["H" + startWith].Value = dataSource[i].DebitFromPeriod;
//                        Сells["J" + startWith].Value = Math.Abs(dataSource[i].CreditFromPeriod);

//                        prevSaldo += dataSource[i].DebitPrewPeriod;
//                        prevSaldo -= dataSource[i].CreditPrewPeriod;

//                        endSaldo += dataSource[i].DebitEndPeriod;
//                        endSaldo -= dataSource[i].CreditEndPeriod;


//                        break;
//                    case "372":
//                    case "373":
//                        Сells["F" + startWith].Value = Math.Abs(dataSource[i].DebitFromPeriod);
//                        Сells["I" + startWith].Value = Math.Abs(dataSource[i].CreditFromPeriod);

//                        prevSaldo += dataSource[i].DebitPrewPeriod;
//                        prevSaldo -= dataSource[i].CreditPrewPeriod;

//                        endSaldo += dataSource[i].DebitEndPeriod;
//                        endSaldo -= dataSource[i].CreditEndPeriod;

//                        break;
//                    default:
//                        break;
//                }

//                if (i == dataSource.Count - 1)
//                {
//                    Сells["A" + startWith].Value = counterRow;
//                    Сells["B" + startWith].Value = dataSource[i].AccountNum;
//                    Сells["C" + startWith].Value = dataSource[i].AccountNumDescription;

//                    cells["H" + startWith].Formula = "=SUM(" + "F" + startWith + ":" + "G" + startWith + ")";
//                    cells["K" + startWith].Formula = "=SUM(" + "I" + startWith + ":" + "J" + startWith + ")";

//                    if (prevSaldo >= 0)
//                    {
//                        Сells["D" + startWith].Value = Math.Abs(prevSaldo);
//                        Сells["E" + startWith].Value = 0;
//                    }
//                    else
//                    {
//                        Сells["D" + startWith].Value = 0;
//                        Сells["E" + startWith].Value = Math.Abs(prevSaldo);
//                    }

//                    if (endSaldo >= 0)
//                    {
//                        Сells["L" + startWith].Value = Math.Abs(endSaldo);
//                        Сells["M" + startWith].Value = 0;
//                    }
//                    else
//                    {
//                        Сells["L" + startWith].Value = 0;
//                        Сells["M" + startWith].Value = Math.Abs(endSaldo);
//                    }
//                }
//            }

//            startWith += 7;

//            counterRow = counterRow + 8;

//            int lastStr = startWith + 6;
//            int lastStrAllSum = startWith + 9;
//            int lastStrAllSumEndPeriod = startWith + 10;
//            ////sum prevdebit everybody of working of employees
//            cells["D" + lastStr].Formula = "=SUM(" + vsS[3] + 9 + ":" + vsS[3] + counterRow + ")";
//            Сells["D" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["D" + lastStr].NumberFormat = "### ### ##0.00";

//            //sum prevcredit everybody of working of employees
//            cells["E" + lastStr].Formula = "=SUM(" + vsS[4] + 9 + ":" + vsS[4] + counterRow + ")";
//            Сells["E" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["E" + lastStr].NumberFormat = "### ### ##0.00";

//            //sum of credit account number 372
//            cells["F" + lastStr].Formula = "=SUM(" + vsS[5] + 9 + ":" + vsS[5] + counterRow + ")";
//            Сells["F" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["F" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum of credit account number 311/2
//            cells["G" + lastStr].Formula = "=SUM(" + vsS[6] + 9 + ":" + vsS[6] + counterRow + ")";
//            Сells["G" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["G" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum of credit account number 311/2 all debit's
//            cells["H" + lastStr].Formula = "=SUM(" + vsS[7] + 9 + ":" + vsS[7] + counterRow + ")";
//            Сells["H" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["H" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum of debit account number 372
//            cells["I" + lastStr].Formula = "=SUM(" + vsS[8] + 9 + ":" + vsS[8] + counterRow + ")";
//            Сells["I" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["I" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum of debit account number 311/2
//            cells["J" + lastStr].Formula = "=SUM(" + vsS[9] + 9 + ":" + vsS[9] + counterRow + ")";
//            Сells["J" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["J" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum of debit account number 311/2 and debit account number 372
//            cells["K" + lastStr].Formula = "=SUM(" + vsS[10] + 9 + ":" + vsS[10] + counterRow + ")";
//            Сells["K" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["K" + lastStr].NumberFormat = "### ### ##0.00";

//            ////sum debit everybody of working of employees end period
//            cells["L" + lastStr].Formula = "=SUM(" + vsS[11] + 9 + ":" + vsS[11] + counterRow + ")";
//            Сells["L" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["L" + lastStr].NumberFormat = "### ### ##0.00";

//            ///sum credit everybody of working of employees end period
//            cells["M" + lastStr].Formula = "=SUM(" + vsS[12] + 9 + ":" + vsS[12] + counterRow + ")";
//            Сells["M" + lastStr].HorizontalAlignment = HAlign.Center;
//            Сells["M" + lastStr].NumberFormat = "### ### ##0.00";


//            ///sum all debit from start period
//            cells["D" + lastStrAllSum].Formula = "=SUM(" + vsS[3] + 9 + ":" + vsS[3] + counterRow + ")"; 
//            Сells["D" + lastStrAllSum].HorizontalAlignment = HAlign.Center;
//            Сells["D" + lastStrAllSum].NumberFormat = "### ### ##0.00";
//            Сells["D" + lastStrAllSum].Font.Bold = true;
             
//            //sum all debit end period
//            cells["D" + lastStrAllSumEndPeriod].Formula = "=SUM(" + vsS[11] + 9 + ":" + vsS[11] + counterRow + ")";
//            Сells["D" + lastStrAllSumEndPeriod].HorizontalAlignment = HAlign.Center;
//            Сells["D" + lastStrAllSumEndPeriod].NumberFormat = "### ### ##0.00";
//            Сells["D" + lastStrAllSumEndPeriod].Font.Bold = true;

//            ///sum all credit from start period
//            cells["E" + lastStrAllSum].Formula = "=SUM(" + vsS[4] + 9 + ":" + vsS[4] + counterRow + ")";
//            Сells["E" + lastStrAllSum].HorizontalAlignment = HAlign.Center;
//            Сells["E" + lastStrAllSum].NumberFormat = "### ### ##0.00";
//            Сells["E" + lastStrAllSum].Font.Bold = true;

//            //sum all credit end period
//            cells["E" + lastStrAllSumEndPeriod].Formula = "=SUM(" + vsS[12] + 9 + ":" + vsS[12] + counterRow + ")";
//            Сells["E" + lastStrAllSumEndPeriod].HorizontalAlignment = HAlign.Center;
//            Сells["E" + lastStrAllSumEndPeriod].NumberFormat = "### ### ##0.00";
//            Сells["E" + lastStrAllSumEndPeriod].Font.Bold = true;

//            //try
//            //{
//            //    string documentAddresName = GeneratedReportsDir +
//            //                                String.Format("Зведена оборотносальдова відомість до рахунку 313 за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//            //    workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//            //    Process process = new Process();
//            //    process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//            //    process.StartInfo.FileName = "Excel.exe";
//            //    process.Start();

//            //}
//            //catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            //catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            //string name = string.Format("Зведена оборотносальдова відомість до рахунку 313 за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString());


//            try
//            {

//                string fileName = String.Format("Зведена обігово-сальдова по рахунку 313 за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString());
//                Workbook.SaveAs(GeneratedReportsDir + fileName + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + fileName + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//            }

//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкрито!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


//            //try
//            //{
//            //    Workbook.SaveAs(GeneratedReportsDir + name + ".xls", FileFormat.Excel8);

//            //    Process process = new Process();
//            //    process.StartInfo.Arguments = "\"" + GeneratedReportsDir + name + ".xls" + "\"";
//            //    process.StartInfo.FileName = "Excel.exe";
//            //    process.Start();
//            //}

//            //catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            //catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


            



//            return true;

//             //   return true;
//        }



//        private bool PrintBPReportTrialBalance(IEnumerable<BankPaymentsReportTrialBalanceDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId, string bankName)
//        {            
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BankPaymentsReportTrialBalanceDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            var allPeriods = (from allData in rowData
//                              group allData by allData.Bank_Account_Id into GroupOutData
//                              select new
//                              {
//                                  DebitControlSumBefore = GroupOutData.Sum(x => x.DebitPrewPeriod) + GroupOutData.Sum(x => x.DebitFromPeriod),
//                                  DebitEndPeriod = GroupOutData.Sum(x => x.DebitEndPeriod),
//                                  DebitPrewPeriod = GroupOutData.Sum(x => x.DebitPrewPeriod),

//                                  CreditControlSumBefore = GroupOutData.Sum(x => x.CreditPrewPeriod) + GroupOutData.Sum(x => x.CreditFromPeriod),
//                                  CreditEndPeriod = GroupOutData.Sum(x => x.CreditEndPeriod),
//                                  CreditPrewPeriod = GroupOutData.Sum(x => x.CreditPrewPeriod)
//                              }).ToList().ToList();

//            if ((allPeriods.First().CreditEndPeriod != allPeriods.First().CreditControlSumBefore) || (allPeriods.First().DebitEndPeriod != allPeriods.First().DebitControlSumBefore))
//            {
//                MessageBox.Show("Помилка Е2342. Зверніться до програміста!");
//            }

//            var debitData = (from iDebitData in rowData
//                             where iDebitData.DebitFromPeriod != 0
//                             group iDebitData by iDebitData.PurposeAccountNum into GroupOutData
//                             select new { Num = GroupOutData.Key }).ToList();
//            var creditData = (from iDebitData in rowData
//                              where iDebitData.CreditFromPeriod != 0
//                              group iDebitData by iDebitData.PurposeAccountNum into GroupOutData
//                              select new { Num = GroupOutData.Key }).ToList();

//            var dataDebitCredit = (from iData in rowData
//                                   where (iData.DebitFromPeriod != 0 || iData.CreditFromPeriod != 0)
//                                   select iData).ToList();

//            const byte DateCol = 0;
//            int startDebitCol = DateCol + 1;
//            int startCreditCol = DateCol + 1;

//            int startRow = 10;

//            int currentRow = startRow + 1;
//            int currentDebitCol = 1;
//            int currentCreditCol = 4;
                        
//            //  cells[0,0, 0, 1].Merge();//Y1,X1,Y2,X2
//            Dictionary<string, string> listNumColDebit = new Dictionary<string, string>();
//            Dictionary<string, string> listNumColcCredit = new Dictionary<string, string>();
//            string num_name;
//            string intervalSelect;
//            DateTime activDate = new DateTime(1000, 1, 1);

//            //***
//            currentDebitCol = startDebitCol;
//            foreach (var item in debitData)
//            {
//                num_name = item.Num;
//                try
//                {
//                    var ColNameFromNum = listNumColDebit.First(x => x.Value == num_name);
//                }
//                catch (System.InvalidOperationException)
//                {
//                    cells[vsS[currentDebitCol] + currentRow].Value = num_name;
//                    listNumColDebit.Add(vsS[currentDebitCol], num_name);
//                    currentDebitCol++;
//                }
//            }
//            cells[vsS[currentDebitCol] + currentRow].Value = "Всього";
//            startCreditCol = currentDebitCol + 1;

//            //CreditColums
//            currentCreditCol = startCreditCol;
//            foreach (var item in creditData)
//            {
//                num_name = item.Num;
//                try
//                {
//                    var ColNameFromNum = listNumColcCredit.First(x => x.Value == num_name);
//                }
//                catch (System.InvalidOperationException)
//                {
//                    cells[vsS[currentCreditCol] + currentRow].Value = num_name;
//                    listNumColcCredit.Add(vsS[currentCreditCol], num_name);
//                    currentCreditCol++;
//                }
//            }
//            cells[vsS[currentCreditCol] + currentRow].Value = "Всього";
//            //SetDataTable
//            currentRow = startRow + 2;
//            currentRow--;
//            foreach (var item in dataDebitCredit)
//            {
//                if (activDate != item.Payment_Date)
//                {
//                    activDate = item.Payment_Date;
//                    currentRow++;
//                    cells[vsS[DateCol] + currentRow.ToString()].Value = (item.Payment_Date).ToString("dd.MM.yyyy");
//                    if (currentDebitCol > startDebitCol)
//                    {
//                        cells[vsS[currentDebitCol] + currentRow].Formula = SetFormula(vsS[startDebitCol], currentRow, vsS[currentDebitCol - 1], currentRow, "SUM");
//                    }
//                    else
//                    {
//                        cells[vsS[currentDebitCol] + currentRow].Value = 0;
//                    }

//                    if (currentCreditCol > startCreditCol)
//                    {
//                        cells[vsS[currentCreditCol] + currentRow].Formula = SetFormula(vsS[startCreditCol], currentRow, vsS[currentCreditCol - 1], currentRow, "SUM");
//                    }
//                    else
//                    {
//                        cells[vsS[currentCreditCol] + currentRow].Value = 0;
//                    }
//                }


//                //Debit
//                if (item.DebitFromPeriod != 0)
//                {
//                    var ColNameFromNum = listNumColDebit.First(x => x.Value == item.PurposeAccountNum);
//                    cells[ColNameFromNum.Key + currentRow.ToString()].Value = item.DebitFromPeriod;
//                }
//                //Credit
//                if (item.CreditFromPeriod != 0)
//                {
//                    var ColNameFromNum = listNumColcCredit.First(x => x.Value == item.PurposeAccountNum);
//                    cells[ColNameFromNum.Key + currentRow.ToString()].Value = item.CreditFromPeriod;
//                }
//            }

//            //SUM 2
//            currentRow++;
//            var activIntervalSum = cells[vsS[DateCol] + currentRow.ToString()];
//            activIntervalSum.Value = "Сума";
//            activIntervalSum.Font.Bold = true;

//            for (var i = DateCol + 1; i <= currentCreditCol; i++)
//            {
//                activIntervalSum = cells[vsS[i] + currentRow.ToString()];
//                if (dataDebitCredit.Count > 0)
//                    activIntervalSum.Formula = SetFormula(vsS[i], startRow + 2, vsS[i], currentRow - 1, "SUM");
//                else
//                {
//                    activIntervalSum.Value = 0;
//                    activIntervalSum.Font.Bold = true;
//                }
//            }
//            //ShapkaTop
            
//            var activInterval1 = cells[startRow - 3, DateCol, startRow - 3, currentCreditCol];
//            activInterval1.Merge();//Y1,X1,Y2,X2
//            activInterval1.WrapText = true;
//            activInterval1.Value = "Рахунок " + accountNum + ", " + bankName;
//            activInterval1.HorizontalAlignment = HAlign.Center;
//            activInterval1.Font.Bold = true;
//            activInterval1.Font.Size = 14;

//            var activInterval2 = cells[startRow - 2, DateCol, startRow - 2, currentCreditCol];
//            activInterval2.Merge();//Y1,X1,Y2,X2
//            activInterval2.WrapText = true;
//            activInterval2.Value = "За період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//            activInterval2.HorizontalAlignment = HAlign.Center;
//            activInterval2.Font.Bold = true;
//            activInterval2.Font.Size = 14;

//            //ShapkaTabl

//            cells[vsS[DateCol] + startRow].Value = "Дата";
//            cells[startRow - 1, DateCol, startRow + 1 - 1, DateCol].Merge();//Y1,X1,Y2,X2
//            //*
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Value = "З Д-ту в к-т рахунків";
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Merge();//Y1,X1,Y2,X2
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Value = "З К-ту в д-т рахунків";

//            //ShapkaTable_SchetNom
//            intervalSelect = vsS[DateCol] + startRow.ToString() + ":" + vsS[currentCreditCol] + (startRow + 1).ToString();
//            cells[intervalSelect].WrapText = true;
//            cells[intervalSelect].Font.Bold = true;
//            cells[intervalSelect].HorizontalAlignment = HAlign.Center;
//            cells[intervalSelect].VerticalAlignment = VAlign.Center;
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;
//            cells[intervalSelect].Columns.AutoFit();
//            //worksheet.Cells["7:9"].Rows.AutoFit();

//            //Text
//            intervalSelect = vsS[DateCol] + (startRow + 2).ToString() + ":" + vsS[currentCreditCol] + currentRow.ToString();
//            cells[intervalSelect].NumberFormat = "### ### ##0.00";
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;
//            cells[intervalSelect].Columns.AutoFit();
//            cells[intervalSelect].HorizontalAlignment = HAlign.Right;
//            cells[intervalSelect].ColumnWidth = 12.5;

//            //Saldo
//            //SaldoTableElement_Top
//            currentRow = currentRow + 2;
//            var activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = "Дебет";// "Кредит";
//            activInterval.HorizontalAlignment = HAlign.Center;
//            /* //04.02.2015
//            activInterval = cells[vsS[DateCol + 3] + currentRow.ToString()];
//            activInterval.Value = "Дебет";
//            activInterval.HorizontalAlignment = HAlign.Center;
//             */
//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoStart = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoStart.Merge();//Y1,X1,Y2,X2
//            saldoStart.WrapText = true;
//            saldoStart.Value = "Сальдо на початок періоду";
//            saldoStart.HorizontalAlignment = HAlign.Right;
//            saldoStart.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine1
//            decimal saldo = allPeriods.First().DebitPrewPeriod - allPeriods.First().CreditPrewPeriod;

//            activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = String.Format("{0:0,0.00}", saldo);
//            activInterval.HorizontalAlignment = HAlign.Right;

//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoEnd = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoEnd.Merge();//Y1,X1,Y2,X2
//            saldoEnd.WrapText = true;
//            saldoEnd.Value = "Сальдо на кінець періоду";
//            saldoEnd.HorizontalAlignment = HAlign.Right;
//            saldoEnd.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine2
//            saldo = allPeriods.First().DebitEndPeriod - allPeriods.First().CreditEndPeriod;

//            activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = String.Format("{0:0,0.00}", saldo);
//            activInterval.HorizontalAlignment = HAlign.Right;

//            PrintSignatures(cells, currentRow + 3);

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по банку {0} та рахункам за період з {1} по {2}", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetBPReportForCustomBill(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("PurposeAccountId", accountId)
//                };

//            string procName = @"select * from ""BPReportForCustomBillProc""(@StartDate, @EndDate, @PurposeAccountId)";

//            var dataSource = mapper.Map<IEnumerable<BankPaymentsReportForCustomBill>, List<BankPaymentsReportForCustomBillDTO>>(bankPaymentsReportForCustomBill.SQLExecuteProc(procName, Parameters));

//            return PrintBPReportForCustomBill(dataSource, startDate, endDate, accountNum);
//        }

//        private bool PrintBPReportForCustomBill(IEnumerable<BankPaymentsReportForCustomBillDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BankPaymentsReportForCustomBillDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;
                        
//            var allPeriods = (from allData in rowData
//                              group allData by allData.Purpose_Account_Id into GroupOutData
//                              select new
//                              {
//                                  DebitControlSumBefore = GroupOutData.Sum(x => x.DebitPrewPeriod) + GroupOutData.Sum(x => x.DebitFromPeriod),
//                                  DebitEndPeriod = GroupOutData.Sum(x => x.DebitEndPeriod),
//                                  DebitPrewPeriod = GroupOutData.Sum(x => x.DebitPrewPeriod),

//                                  CreditControlSumBefore = GroupOutData.Sum(x => x.CreditPrewPeriod) + GroupOutData.Sum(x => x.CreditFromPeriod),
//                                  CreditEndPeriod = GroupOutData.Sum(x => x.CreditEndPeriod),
//                                  CreditPrewPeriod = GroupOutData.Sum(x => x.CreditPrewPeriod)
//                              }).ToList().ToList();

//            if ((allPeriods.First().CreditEndPeriod != allPeriods.First().CreditControlSumBefore) || (allPeriods.First().DebitEndPeriod != allPeriods.First().DebitControlSumBefore))
//            {
//                MessageBox.Show("Помилка Е2342. Зверніться до програміста!");
//            }

//            var debitData = (from iDebitData in rowData
//                             where iDebitData.DebitFromPeriod != 0
//                             group iDebitData by iDebitData.BankAccountNum into GroupOutData
//                             select new { Num = GroupOutData.Key }).ToList();
//            var creditData = (from iDebitData in rowData
//                              where iDebitData.CreditFromPeriod != 0
//                              group iDebitData by iDebitData.BankAccountNum into GroupOutData
//                              select new { Num = GroupOutData.Key }).ToList();

//            var dataDebitCredit = (from iData in rowData
//                                   where (iData.DebitFromPeriod != 0 || iData.CreditFromPeriod != 0)
//                                   select iData).ToList();

//            const byte DateCol = 0;
//            int startDebitCol = DateCol + 1;
//            int startCreditCol = DateCol + 1;
//            int startRow = 10;

//            int currentRow = startRow + 1;
//            int currentDebitCol = 1;
//            int currentCreditCol = 4;
            
//            //  cells[0,0, 0, 1].Merge();//Y1,X1,Y2,X2
//            Dictionary<string, string> listNumColDebit = new Dictionary<string, string>();
//            Dictionary<string, string> listNumColcCredit = new Dictionary<string, string>();
//            string num_name;
//            string intervalSelect;
//            DateTime activDate = new DateTime(1000, 1, 1);

//            //***
//            currentDebitCol = startDebitCol;
//            foreach (var item in debitData)
//            {
//                num_name = item.Num;
//                try
//                {
//                    var ColNameFromNum = listNumColDebit.First(x => x.Value == num_name);
//                }
//                catch (System.InvalidOperationException)
//                {
//                    cells[vsS[currentDebitCol] + currentRow].Value = num_name;
//                    listNumColDebit.Add(vsS[currentDebitCol], num_name);
//                    currentDebitCol++;
//                }
//            }
//            cells[vsS[currentDebitCol] + currentRow].Value = "Всього";
//            startCreditCol = currentDebitCol + 1;

//            //CreditColums
//            currentCreditCol = startCreditCol;
//            foreach (var item in creditData)
//            {
//                num_name = item.Num;
//                try
//                {
//                    var ColNameFromNum = listNumColcCredit.First(x => x.Value == num_name);
//                }
//                catch (System.InvalidOperationException)
//                {
//                    cells[vsS[currentCreditCol] + currentRow].Value = num_name;
//                    listNumColcCredit.Add(vsS[currentCreditCol], num_name);
//                    currentCreditCol++;
//                }
//            }
//            cells[vsS[currentCreditCol] + currentRow].Value = "Всього";
//            //SetDataTable
//            currentRow = startRow + 2;
//            currentRow--;
//            foreach (var item in dataDebitCredit)
//            {
//                if (activDate != item.Payment_Date)
//                {
//                    activDate = item.Payment_Date;
//                    currentRow++;
//                    cells[vsS[DateCol] + currentRow.ToString()].Value = (item.Payment_Date).ToString("dd.MM.yyyy");
//                    if (currentDebitCol > startDebitCol)
//                    {
//                        cells[vsS[currentDebitCol] + currentRow].Formula = SetFormula(vsS[startDebitCol], currentRow, vsS[currentDebitCol - 1], currentRow, "SUM");
//                    }
//                    else
//                    {
//                        cells[vsS[currentDebitCol] + currentRow].Value = 0;
//                    }

//                    if (currentCreditCol > startCreditCol)
//                    {
//                        cells[vsS[currentCreditCol] + currentRow].Formula = SetFormula(vsS[startCreditCol], currentRow, vsS[currentCreditCol - 1], currentRow, "SUM");
//                    }
//                    else
//                    {
//                        cells[vsS[currentCreditCol] + currentRow].Value = 0;
//                    }
//                }


//                //Debit
//                if (item.DebitFromPeriod != 0)
//                {
//                    var ColNameFromNum = listNumColDebit.First(x => x.Value == item.BankAccountNum);
//                    cells[ColNameFromNum.Key + currentRow.ToString()].Value = item.DebitFromPeriod;
//                }
//                //Credit
//                if (item.CreditFromPeriod != 0)
//                {
//                    var ColNameFromNum = listNumColcCredit.First(x => x.Value == item.BankAccountNum);
//                    cells[ColNameFromNum.Key + currentRow.ToString()].Value = item.CreditFromPeriod;
//                }
//            }

//            //SUM 2
//            currentRow++;
//            var activIntervalSum = cells[vsS[DateCol] + currentRow.ToString()];
//            activIntervalSum.Value = "Сума";
//            activIntervalSum.Font.Bold = true;

//            for (var i = DateCol + 1; i <= currentCreditCol; i++)
//            {
//                activIntervalSum = cells[vsS[i] + currentRow.ToString()];
//                if (dataDebitCredit.Count > 0)
//                    activIntervalSum.Formula = SetFormula(vsS[i], startRow + 2, vsS[i], currentRow - 1, "SUM");
//                else
//                {
//                    activIntervalSum.Value = 0;
//                    activIntervalSum.Font.Bold = true;
//                }
//            }


//            var activInterval1 = cells[startRow - 3, DateCol, startRow - 3, currentCreditCol];
//            activInterval1.Merge();//Y1,X1,Y2,X2
//            activInterval1.WrapText = true;
//            activInterval1.Value = "Рахунок " + accountNum;
//            activInterval1.HorizontalAlignment = HAlign.Center;
//            activInterval1.Font.Bold = true;
//            activInterval1.Font.Size = 14;

//            var activInterval2 = cells[startRow - 2, DateCol, startRow - 2, currentCreditCol];
//            activInterval2.Merge();//Y1,X1,Y2,X2
//            activInterval2.WrapText = true;
//            activInterval2.Value = "За період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//            activInterval2.HorizontalAlignment = HAlign.Center;
//            activInterval2.Font.Bold = true;
//            activInterval2.Font.Size = 14;

//            //ShapkaTabl

//            cells[vsS[DateCol] + startRow].Value = "Дата";
//            cells[startRow - 1, DateCol, startRow + 1 - 1, DateCol].Merge();//Y1,X1,Y2,X2
//            //*
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Value = "Кредит";
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Merge();//Y1,X1,Y2,X2
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Value = "Дебет";

//            //ShapkaTable_SchetNom
//            intervalSelect = vsS[DateCol] + startRow.ToString() + ":" + vsS[currentCreditCol] + (startRow + 1).ToString();
//            cells[intervalSelect].WrapText = true;
//            cells[intervalSelect].Font.Bold = true;
//            cells[intervalSelect].HorizontalAlignment = HAlign.Center;
//            cells[intervalSelect].VerticalAlignment = VAlign.Center;
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;
//            cells[intervalSelect].Columns.AutoFit();
//            //worksheet.Cells["7:9"].Rows.AutoFit();

//            //Text
//            intervalSelect = vsS[DateCol] + (startRow + 2).ToString() + ":" + vsS[currentCreditCol] + currentRow.ToString();
//            cells[intervalSelect].NumberFormat = "### ### ##0.00";
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;
//            cells[intervalSelect].Columns.AutoFit();
//            cells[intervalSelect].HorizontalAlignment = HAlign.Right;
//            cells[intervalSelect].ColumnWidth = 12.5;

//            //Saldo
//            //SaldoTableElement_Top
//            currentRow = currentRow + 2;
//            var activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = "Кредит";
//            activInterval.HorizontalAlignment = HAlign.Center;
//            activInterval = cells[vsS[DateCol + 3] + currentRow.ToString()];
//            activInterval.Value = "Дебет";
//            activInterval.HorizontalAlignment = HAlign.Center;
//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoStart = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoStart.Merge();//Y1,X1,Y2,X2
//            saldoStart.WrapText = true;
//            saldoStart.Value = "Сальдо на початок періоду";
//            saldoStart.HorizontalAlignment = HAlign.Right;
//            saldoStart.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine1
//            decimal saldo = allPeriods.First().DebitPrewPeriod - allPeriods.First().CreditPrewPeriod;
//            if (saldo > 0)
//            {
//                activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//                activInterval.Value = String.Format("{0:0,0.00}", (Math.Abs(saldo)));
//                activInterval.HorizontalAlignment = HAlign.Right;
//                activInterval = cells[vsS[DateCol + 3] + currentRow.ToString()];
//                activInterval.Value = "0,00";
//                activInterval.HorizontalAlignment = HAlign.Right;
//            }
//            else
//            {
//                activInterval = cells[vsS[DateCol + 3] + (currentRow).ToString()];
//                activInterval.Value = String.Format("{0:0,0.00}", (Math.Abs(saldo)));
//                activInterval.HorizontalAlignment = HAlign.Right;
//                activInterval = cells[vsS[DateCol + 2] + (currentRow).ToString()];
//                activInterval.Value = "0,00";
//                activInterval.HorizontalAlignment = HAlign.Right;
//            }

//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoEnd = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoEnd.Merge();//Y1,X1,Y2,X2
//            saldoEnd.WrapText = true;
//            saldoEnd.Value = "Сальдо на кінець періоду";
//            saldoEnd.HorizontalAlignment = HAlign.Right;
//            saldoEnd.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine2
//            saldo = allPeriods.First().DebitEndPeriod - allPeriods.First().CreditEndPeriod;
//            if (saldo > 0)
//            {
//                activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//                activInterval.Value = String.Format("{0:0,0.00}", (Math.Abs(saldo)));
//                activInterval.HorizontalAlignment = HAlign.Right;
//                activInterval = cells[vsS[DateCol + 3] + currentRow.ToString()];
//                activInterval.Value = "0,00";
//                activInterval.HorizontalAlignment = HAlign.Right;
//            }
//            else
//            {
//                activInterval = cells[vsS[DateCol + 3] + (currentRow).ToString()];
//                activInterval.Value = String.Format("{0:0,0.00}", (Math.Abs(saldo)));
//                activInterval.HorizontalAlignment = HAlign.Right;
//                activInterval = cells[vsS[DateCol + 2] + (currentRow).ToString()];
//                activInterval.Value = "0,00";
//                activInterval.HorizontalAlignment = HAlign.Right;
//            }

//            PrintSignatures(cells, currentRow + 3);

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по рахунку {0} за період з {1} по {2}", accountNum, startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                        
//        }

//        public bool GetBPReportTrialBalanceQuarter(DateTime startDate, DateTime endDate, int accountId, string accountNum, string bankName)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("AccountId", accountId)
//                };

//            string procName = @"select * from ""BPReportTrialBalanceQuarterProc""(@StartDate, @EndDate, @AccountId)";

//            var dataSource = mapper.Map<IEnumerable<BankPaymentsReportTrialBalanceQuarter>, List<BankPaymentsReportTrialBalanceQuarterDTO>>(bankPaymentsReportTrialBalanceQuarter.SQLExecuteProc(procName, Parameters));

//            return PrintBPReportTrialBalanceQuarter(dataSource, startDate, endDate, accountNum.Replace('/', '.'), accountId, bankName);
//        }

//        private bool PrintBPReportTrialBalanceQuarter(IEnumerable<BankPaymentsReportTrialBalanceQuarterDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, int accountId, string bankName)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BankPaymentsReportTrialBalanceQuarterDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            var debitData = (from iDebitData in rowData
//                             where iDebitData.Debit != 0 && iDebitData.Pr == 0
//                             group iDebitData by iDebitData.PurposeAccountNum into GroupOutData
//                             select new { Num = GroupOutData.Key }).ToList();
//            var creditData = (from iDebitData in rowData
//                              where iDebitData.Credit != 0 && iDebitData.Pr == 0
//                              group iDebitData by iDebitData.PurposeAccountNum into GroupOutData
//                              select new { Num = GroupOutData.Key }).ToList();

//            var dataDebitCredit = (from iData in rowData where (iData.Pr == 0) select iData).ToList();

//            var numYear = rowData.Where(x => x.YearNumber != null).Select(c => new { YearNumber = c.YearNumber }).Distinct().OrderBy(c => c.YearNumber).ToList();

//            const byte DateCol = 0;
//            int startDebitCol = DateCol + 1;
//            int startCreditCol = DateCol + 1;
//            int startRow = 10;

//            int currentRow = startRow + 1;
//            int currentDebitCol = 1;
//            int currentCreditCol = 4;


//            //  cells[0,0, 0, 1].Merge();//Y1,X1,Y2,X2
//            Dictionary<string, string> listNumColDebit = new Dictionary<string, string>();
//            Dictionary<string, string> listNumColcCredit = new Dictionary<string, string>();
//            string num_name;
//            string intervalSelect;

//            //DebitColums
//            currentDebitCol = startDebitCol;
//            foreach (var item in debitData)
//            {
//                num_name = item.Num;
                
//                if(!listNumColDebit.Any(x => x.Value == num_name))
//                {
//                    cells[vsS[currentDebitCol] + currentRow].ColumnWidth = 12.5;
//                    cells[vsS[currentDebitCol] + currentRow].Value = num_name;
//                    listNumColDebit.Add(vsS[currentDebitCol], num_name);
//                    currentDebitCol++;
//                }
//            }
//            cells[vsS[currentDebitCol] + currentRow].Value = "Всього";
//            cells[vsS[currentDebitCol] + currentRow].ColumnWidth = 15;
//            startCreditCol = currentDebitCol + 1;

//            //CreditColums
//            currentCreditCol = startCreditCol;
//            foreach (var item in creditData)
//            {
//                num_name = item.Num;

//                if (!listNumColcCredit.Any(x => x.Value == num_name))
//                {
//                    cells[vsS[currentCreditCol] + currentRow].ColumnWidth = 12.5;
//                    cells[vsS[currentCreditCol] + currentRow].Value = num_name;
//                    listNumColcCredit.Add(vsS[currentCreditCol], num_name);
//                    currentCreditCol++;
//                }
//            }
//            cells[vsS[currentCreditCol] + currentRow].Value = "Всього";
//            cells[vsS[currentCreditCol] + currentRow].ColumnWidth = 15;
//            //SetDataTable
//            int sumRow;
//            int? currentMonth;
//            int? currentQuarter;
//            int countMonth;
//            int countQuarter;

//            for (int y = 0; y < numYear.Count(); y++)
//            {

//                List<BankPaymentsReportTrialBalanceQuarterDTO> currList = rowData.Where(x => x.Pr == 0 && x.YearNumber == numYear[y].YearNumber).ToList();
//                var numQuarter = currList.Where(x => x.YearNumber == numYear[y].YearNumber).Select(c => new { Quarter_Number = c.QuarterNumber }).Distinct().OrderBy(c => c.Quarter_Number).ToList();

//                sumRow = currentRow;
//                currentMonth = 0;
//                currentQuarter = 0;
//                countMonth = 0;
//                countQuarter = 0;
//                int[] TotalRows = new int[numQuarter.Count];

//                for (int i = 0; i < currList.Count; i++)
//                {
//                    if (currList[i].MonthNumber == currentMonth)
//                    {
//                        currentMonth = currList[i].MonthNumber;
//                        currentRow--;
//                    }
//                    else
//                    {
//                        currentMonth = currList[i].MonthNumber;
//                    }

//                    // Итоговая строка по кварталам
//                    if (currList[i].QuarterNumber != currentQuarter)
//                    {
//                        currentRow++;
//                        sumRow = currentRow;
//                        currentQuarter = currList[i].QuarterNumber;
//                        countMonth = currList.Where(x => x.QuarterNumber == currentQuarter).GroupBy(x => x.MonthNumber).Count();
//                        currentRow = currentRow + countMonth;

//                        cells[vsS[DateCol] + currentRow.ToString()].Value = "Всього за " + currentQuarter.ToString() + "-й квартал " + currList[i].YearNumber.ToString() + " р.";
//                        cells[vsS[DateCol] + currentRow.ToString()].HorizontalAlignment = HAlign.Left;
//                        cells[vsS[DateCol] + currentRow.ToString()].Font.Bold = true;
//                        cells[vsS[DateCol] + currentRow].Interior.Color = Color.LightBlue;

//                        TotalRows[countQuarter] = currentRow;
//                        countQuarter++;

//                        for (var c = DateCol + 1; c <= currentCreditCol; c++)
//                        {
//                            var activintervalsum = cells[vsS[c] + currentRow.ToString()];
//                            if (dataDebitCredit.Count > 0)
//                            {
//                                activintervalsum.Formula = SetFormula(vsS[c], sumRow, vsS[c], currentRow - 1, "SUM");
//                                activintervalsum.Font.Bold = true;
//                                activintervalsum.Interior.Color = Color.LightBlue;
//                            }
//                            else
//                            {
//                                activintervalsum.Value = 0;
//                                activintervalsum.Font.Bold = true;
//                                activintervalsum.Interior.Color = Color.LightBlue;
//                            }
//                        }
//                        currentRow = sumRow;
//                    }
//                    // Месяца
//                    cells[vsS[DateCol] + currentRow.ToString()].Value = currList[i].MonthName.ToString();
//                    cells[vsS[DateCol] + currentRow.ToString()].HorizontalAlignment = HAlign.Left;
//                    currentQuarter = currList[i].QuarterNumber;

//                    cells[vsS[currentDebitCol] + currentRow].Formula = SetFormula(vsS[startDebitCol], currentRow, vsS[currentDebitCol - 1], currentRow, "SUM");
//                    cells[vsS[currentDebitCol] + currentRow].Font.Bold = true;
//                    cells[vsS[currentDebitCol] + currentRow].Interior.Color = Color.LightBlue;
//                    cells[vsS[currentCreditCol] + currentRow].Formula = SetFormula(vsS[startCreditCol], currentRow, vsS[currentCreditCol - 1], currentRow, "SUM");
//                    cells[vsS[currentCreditCol] + currentRow].Font.Bold = true;
//                    cells[vsS[currentCreditCol] + currentRow].Interior.Color = Color.LightBlue;

//                    //Debit
//                    if (currList[i].Debit != 0)
//                    {
//                        var ColNameFromNum = listNumColDebit.First(x => x.Value == currList[i].PurposeAccountNum);
//                        cells[ColNameFromNum.Key + currentRow.ToString()].Value = currList[i].Debit;
//                    }
//                    //Credit
//                    if (currList[i].Credit != 0)
//                    {
//                        var ColNameFromNum = listNumColcCredit.First(x => x.Value == currList[i].PurposeAccountNum);
//                        cells[ColNameFromNum.Key + currentRow.ToString()].Value = currList[i].Credit;
//                    }
//                    currentRow++;
//                }

//                currentRow++;
//                var activIntervalSum = cells[vsS[DateCol] + currentRow.ToString()];
//                activIntervalSum.Value = "Сума за " + numYear[y].YearNumber.ToString() + "р. :";
//                activIntervalSum.Font.Bold = true;
//                activIntervalSum.Font.Size = 12;
//                activIntervalSum.Interior.Color = Color.LightBlue;
//                string rangeSUM = "";
//                for (var i = DateCol + 1; i <= currentCreditCol; i++)
//                {
//                    activIntervalSum = cells[vsS[i] + currentRow.ToString()];
//                    activIntervalSum.Interior.Color = Color.LightBlue;
//                    activIntervalSum.Font.Bold = true;
//                    activIntervalSum.Font.Size = 12;
//                    for (int a = 0; a < TotalRows.Length; a++)
//                    {
//                        rangeSUM = rangeSUM + vsS[i] + TotalRows[a].ToString() + ",";
//                    }
//                    if (dataDebitCredit.Count > 0)
//                    {
//                        activIntervalSum.Value = "=SUM" + "(" + rangeSUM.Remove(rangeSUM.Length - 1) + ")";
//                    }
//                    else
//                    {
//                        activIntervalSum.Value = 0;
//                    }
//                    rangeSUM = "";
//                }
//            }

//            //ShapkaTop
//            var activInterval1 = cells[startRow - 3, DateCol, startRow - 3, currentCreditCol];
//            activInterval1.Merge();//Y1,X1,Y2,X2
//            activInterval1.WrapText = true;
//            activInterval1.Value = "Рахунок " + accountNum + ", " + bankName;
//            activInterval1.HorizontalAlignment = HAlign.Center;
//            activInterval1.Font.Bold = true;
//            activInterval1.Font.Size = 14;

//            var activInterval2 = cells[startRow - 2, DateCol, startRow - 2, currentCreditCol];
//            activInterval2.Merge();//Y1,X1,Y2,X2
//            activInterval2.WrapText = true;
//            activInterval2.Value = "За період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//            activInterval2.HorizontalAlignment = HAlign.Center;
//            activInterval2.Font.Bold = true;
//            activInterval2.Font.Size = 14;

//            //ShapkaTabl

//            cells[vsS[DateCol] + startRow].Value = "Місяць";
//            cells[vsS[DateCol] + startRow].ColumnWidth = 24.5;
//            cells[startRow - 1, DateCol, startRow + 1 - 1, DateCol].Merge();//Y1,X1,Y2,X2
//            //*
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Merge();//Y1,X1,Y2,X2 
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Value = "З Д-ту в к-т рахунків";
//            cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].HorizontalAlignment = HAlign.Center;
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Merge();//Y1,X1,Y2,X2
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].Value = "З К-ту в Д-т рахунків";
//            cells[startRow - 1, startCreditCol, startRow - 1, currentCreditCol].HorizontalAlignment = HAlign.Center;

//            //ShapkaTable_SchetNom
//            intervalSelect = vsS[DateCol] + startRow.ToString() + ":" + vsS[currentCreditCol] + (startRow + 1).ToString();
//            cells[intervalSelect].WrapText = true;
//            cells[intervalSelect].Font.Bold = true;
//            cells[intervalSelect].HorizontalAlignment = HAlign.Center;
//            cells[intervalSelect].VerticalAlignment = VAlign.Center;
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;

//            //Text
//            intervalSelect = vsS[DateCol] + (startRow + 2).ToString() + ":" + vsS[currentCreditCol] + currentRow.ToString();
//            cells[intervalSelect].NumberFormat = "### ### ##0.00";
//            cells[intervalSelect].Borders.LineStyle = LineStyle.Continous;
//            cells[vsS[DateCol + 1] + startRow.ToString() + ":" + vsS[currentCreditCol] + (startRow + 1).ToString()].HorizontalAlignment = HAlign.Center;

//            //Saldo
//            //SaldoTableElement_Top
//            currentRow = currentRow + 2;
//            var activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = "Дебет";// "Кредит";
//            activInterval.HorizontalAlignment = HAlign.Center;

//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoStart = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoStart.Merge();//Y1,X1,Y2,X2
//            saldoStart.WrapText = true;
//            saldoStart.Value = "Сальдо на початок періоду";
//            saldoStart.HorizontalAlignment = HAlign.Right;
//            saldoStart.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine1

//            int pr = 3;
//            var saldoStartPeriod = rowData.Where(x => x.Pr == pr).Select(c => new { prewPeriod = c.Debit - c.Credit }).ToList();

//            activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = String.Format("{0:0,0.00}", saldoStartPeriod[0].prewPeriod);
//            activInterval.HorizontalAlignment = HAlign.Right;

//            //SaldoTableElement_RightLine2
//            currentRow++;
//            var saldoEnd = cells[currentRow - 1, DateCol, currentRow - 1, DateCol + 1];
//            saldoEnd.Merge();//Y1,X1,Y2,X2
//            saldoEnd.WrapText = true;
//            saldoEnd.Value = "Сальдо на кінець періоду";
//            saldoEnd.HorizontalAlignment = HAlign.Right;
//            saldoEnd.Font.Bold = true;
//            //SaldoTableElement_CenterTextLine2
//            pr = 2;
//            var saldoEndPeriod = rowData.Where(x => x.Pr == pr).Select(c => new { endPeriod = c.Debit - c.Credit }).ToList();

//            activInterval = cells[vsS[DateCol + 2] + currentRow.ToString()];
//            activInterval.Value = String.Format("{0:0,0.00}", saldoEndPeriod[0].endPeriod);
//            activInterval.HorizontalAlignment = HAlign.Right;
//            worksheet.Name = accountNum;

//            PrintSignatures(cells, currentRow + 3);
            
//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("ОСВ по банку {0} та рахункам (поквартально)", accountNum) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetBPReportTrialBalanceFull(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""BPReportTrialBalanceFullProc""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<BankPaymentsReportTrialBalanceFull>, List<BankPaymentsReportTrialBalanceFullDTO>>(bankPaymentsReportTrialBalanceFull.SQLExecuteProc(procName, Parameters));

//            return PrintBPReportTrialBalanceFull(dataSource, startDate, endDate);
//        }

//        private bool PrintBPReportTrialBalanceFull(IEnumerable<BankPaymentsReportTrialBalanceFullDTO> dataSource, DateTime startDate, DateTime endDate)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<BankPaymentsReportTrialBalanceFullDTO> rowData = dataSource.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            Dictionary<int, string> headerColumn = new Dictionary<int, string>();

//            int bankDebetCount = rowData
//                .Where(w => w.AccountingOperationId == 2)
//                .Select(c => new { AccountId = c.Bank_Account_Id })
//                .Distinct()
//                .Count();

//            int bankCreditCount = rowData
//                .Where(w => w.AccountingOperationId == 1)
//                .Select(c => new { AccountId = c.Bank_Account_Id })
//                .Distinct()
//                .Count(); ;


//            string name = string.Format("Оборотно-сальдова відомість по банкам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString());

//            Action<IRange, int, short, int> WriteHeader = (curCell, currentPos, headerStartPos, directionState) =>
//            {
//                var Accounts = rowData
//                    .Where(c => c.AccountingOperationId == directionState)
//                    .Select(c => new
//                    {
//                        AccountNum = c.PurposeNum
//                    })
//                    .Distinct()
//                    .OrderBy(c => c.AccountNum);

//                foreach (var acc in Accounts)
//                {
//                    headerColumn.Add(headerStartPos, acc.AccountNum);
//                    curCell["A" + currentPos].Interior.Color = Color.LightGray;
//                    curCell[vsS[headerStartPos] + currentPos].Value = acc.AccountNum;
//                    headerStartPos++;
//                }
//                curCell[vsS[headerStartPos] + currentPos].Value = "Всього по банку";
//                curCell[vsS[headerStartPos] + currentPos].Interior.Color = Color.LightBlue;
//                curCell["B" + currentPos + ":" + vsS[headerColumn.Count + 1] + currentPos].HorizontalAlignment = HAlign.Center;
//                curCell["B" + currentPos + ":" + vsS[headerColumn.Count + 1] + currentPos].Font.Bold = true;

//            };

//            int captionPosition = 7;
//            int currentPosition = 0;
//            short startHeaderPosition = 1;
//            int debitCreditState = 0;
//            int bankAccount = 0;
//            int sourceRowCount = rowData.Count;
//            int bankCount = 0;

//            for (int i = 0; i < sourceRowCount; i++)
//            {
//                if (rowData[i].AccountingOperationId != debitCreditState)
//                {
//                    if (currentPosition > 0)
//                        PrintSignatures(cells, currentPosition + 3);

//                    currentPosition = captionPosition + 1;
//                    headerColumn.Clear();

//                    debitCreditState = rowData[i].AccountingOperationId;
//                    bankCount = (debitCreditState == 2) ? bankDebetCount : bankCreditCount;

//                    //worksheet = workbook.Worksheets.Add();

//                    worksheet = (IWorksheet)workbook.Worksheets["Лист1"].CopyAfter(workbook.Worksheets["Лист1"]);
//                    worksheet.Name = (debitCreditState == 2) ? "Дебет" : "Кредит";
//                    cells = worksheet.Cells;

//                    WriteHeader(cells, currentPosition, startHeaderPosition, debitCreditState);

//                    cells["A" + captionPosition + ":" + vsS[headerColumn.Count + 1] + captionPosition].Merge();
//                    cells["A" + captionPosition].Value = name;
//                    cells["A" + captionPosition].Font.Bold = true;

//                    cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;
//                    cells["A" + currentPosition + ":" + vsS[headerColumn.Count + 1] + (bankCount + 1 + currentPosition)].Borders.LineStyle = LineStyle.Continous;
//                    cells["A" + currentPosition + ":" + vsS[headerColumn.Count + 1] + currentPosition].ColumnWidth = 18;
//                    cells["B" + (currentPosition + 1) + ":" + vsS[headerColumn.Count + 1] + (bankCount + 1 + currentPosition)].NumberFormat = "### ### ##0.00";

//                    cells["A" + ((bankCount + 1) + currentPosition)].Value = "Всього по рахунку";
//                    cells["A" + ((bankCount + 1) + currentPosition)].Interior.Color = Color.LightBlue;
//                    cells["A" + ((bankCount + 1) + currentPosition)].HorizontalAlignment = HAlign.Left;
//                    cells["A" + ((bankCount + 1) + currentPosition)].Font.Bold = true;

//                    int headerCount = headerColumn.Count;

//                    for (int j = 1; j <= headerCount + 1; j++)
//                    {
//                        cells[vsS[j] + ((bankCount + 1) + currentPosition)].Formula = SetFormula(vsS[j], currentPosition + 1, vsS[j], (bankCount + currentPosition), "SUM");
//                        cells[vsS[j] + ((bankCount + 1) + currentPosition)].Interior.Color = Color.LightBlue;
//                        cells[vsS[j] + ((bankCount + 1) + currentPosition)].Font.Bold = true;
//                    }


//                }

//                if (rowData[i].Bank_Account_Id != bankAccount)
//                {
//                    currentPosition++;
//                    bankAccount = rowData[i].Bank_Account_Id;
//                    cells["A" + currentPosition].Value = rowData[i].BankNum;
//                    cells["A" + currentPosition].HorizontalAlignment = HAlign.Left;
//                    cells["A" + currentPosition].Font.Bold = true;
//                }

//                int dictHeaderKey = headerColumn.FirstOrDefault(x => x.Value == rowData[i].PurposeNum).Key;
//                cells[vsS[dictHeaderKey] + currentPosition].Value = (debitCreditState == 2) ? rowData[i].CreditFromPeriod : rowData[i].DebitFromPeriod;
//                cells[vsS[headerColumn.Count + 1] + currentPosition].Formula = SetFormula("B", currentPosition, vsS[headerColumn.Count], currentPosition, "SUM");
//                cells[vsS[headerColumn.Count + 1] + currentPosition].Interior.Color = Color.LightBlue;
//                cells[vsS[headerColumn.Count + 1] + currentPosition].Font.Bold = true;

//            }

//            PrintSignatures(cells, currentPosition + 3);
//            workbook.Worksheets[0].Delete();


//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("Оборотно-сальдова відомість по банкам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public void GetExportPaymentsList(List<BankPaymentsInfoDTO> dataSource, DateTime startDate, DateTime endDate)
//        {
//            if (dataSource.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\PaymentsList.xls");
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;


//            int captionPosition = 6;
//            int startRowIndex = captionPosition + 1;
//            int activRowIndex = startRowIndex + 2;
//            int sumColIndex = 18;
//            string nameLastCol = vsS[sumColIndex - 1];

//            cells["A" + captionPosition].Value = "Звіт по платежам за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//            cells["F" + (startRowIndex + 2)].Value = "Рахунок банку";
//            cells["N" + (startRowIndex + 2)].Value = "Призначення платежу";

//            //cells[startRow - 1, startDebitCol, startRow - 1, startCreditCol - 1].Merge();
//            int? lastBankPaymentId = null;
//            int bankPaymentCicle = 0;
            


//            foreach (var item in dataSource)
//            {
//                activRowIndex++;

//                cells[String.Format("{0}{1}", vsS[0], activRowIndex)].Value = item.PartnerSrn;
//                cells[String.Format("{0}{1}", vsS[1], activRowIndex)].Value = item.PartnerName; 
//                cells[String.Format("{0}{1}", vsS[2], activRowIndex)].Value = item.OrderNumber;
//                cells[String.Format("{0}{1}", vsS[3], activRowIndex)].Value = item.CustomerOrderPrice;
//                cells[String.Format("{0}{1}", vsS[4], activRowIndex)].Value = item.CustomerOrderCurrencyPrice;
//                cells[String.Format("{0}{1}", vsS[5], activRowIndex)].Value = item.Payment_Date; 
//                cells[String.Format("{0}{1}", vsS[6], activRowIndex)].Value = item.Payment_Document; 
//                cells[String.Format("{0}{1}", vsS[7], activRowIndex)].Value = item.BankAccountNum; 
//                cells[String.Format("{0}{1}", vsS[8], activRowIndex)].Value = item.PurposeAccountNum;
//                cells[String.Format("{0}{1}", vsS[9], activRowIndex)].Value = item.DebitPrice; 
//                cells[String.Format("{0}{1}", vsS[10], activRowIndex)].Value = item.DebitPriceCurrency; 
//                cells[String.Format("{0}{1}", vsS[11], activRowIndex)].Value = item.CreditPrice;  
//                cells[String.Format("{0}{1}", vsS[12], activRowIndex)].Value = item.CreditPriceCurrency; 
//                cells[String.Format("{0}{1}", vsS[13], activRowIndex)].Value = item.CurrencyName;  
//                cells[String.Format("{0}{1}", vsS[14], activRowIndex)].Value = item.Rate;
//                cells[String.Format("{0}{1}", vsS[15], activRowIndex)].Value = item.VatPrice;
//                cells[String.Format("{0}{1}", vsS[16], activRowIndex)].Value = item.VatAccountNum; 
//                cells[String.Format("{0}{1}", vsS[17], activRowIndex)].Value = item.Purpose;


//                if (lastBankPaymentId == item.Id)
//                {
//                    ++bankPaymentCicle;
//                    cells["A" + (activRowIndex - bankPaymentCicle) + ":" + "A" + activRowIndex].Merge();
//                    cells["B" + (activRowIndex - bankPaymentCicle) + ":" + "B" + activRowIndex].Merge();
//                    cells["F" + (activRowIndex - bankPaymentCicle) + ":" + "F" + activRowIndex].Merge();
//                    cells["G" + (activRowIndex - bankPaymentCicle) + ":" + "G" + activRowIndex].Merge();
//                    cells["H" + (activRowIndex - bankPaymentCicle) + ":" + "H" + activRowIndex].Merge();
//                    cells["I" + (activRowIndex - bankPaymentCicle) + ":" + "I" + activRowIndex].Merge();
//                    cells["J" + (activRowIndex - bankPaymentCicle) + ":" + "J" + activRowIndex].Merge();
//                    cells["K" + (activRowIndex - bankPaymentCicle) + ":" + "K" + activRowIndex].Merge();
//                    cells["L" + (activRowIndex - bankPaymentCicle) + ":" + "L" + activRowIndex].Merge();
//                    cells["M" + (activRowIndex - bankPaymentCicle) + ":" + "M" + activRowIndex].Merge();
//                    cells["N" + (activRowIndex - bankPaymentCicle) + ":" + "N" + activRowIndex].Merge();
//                    cells["O" + (activRowIndex - bankPaymentCicle) + ":" + "O" + activRowIndex].Merge();
//                    cells["P" + (activRowIndex - bankPaymentCicle) + ":" + "P" + activRowIndex].Merge();
//                    cells[("Q" + (activRowIndex - bankPaymentCicle)) + ":" + ("Q" + activRowIndex)].Merge();
//                    cells[("R" + (activRowIndex - bankPaymentCicle)) + ":" + ("R" + activRowIndex)].Merge();
//                }
//                else
//                {
//                    bankPaymentCicle = 0;
//                }

//                lastBankPaymentId = item.Id;
//            }

//            activRowIndex++;

//            cells[String.Format("{0}{1}", vsS[0], activRowIndex)].Value = "Всього:";
//            cells[String.Format("A{0}:{1}{2}", activRowIndex, nameLastCol, activRowIndex)].Interior.Color = Color.LightGreen;
//            cells[String.Format("A{0}:{1}{2}", activRowIndex, nameLastCol, activRowIndex)].Font.Bold = true;
//            cells[String.Format("B{0}:{1}{2}", activRowIndex, nameLastCol, activRowIndex)].NumberFormat = "### ### ##0.00";

//            var summary = dataSource.GroupBy(g => g.Id).Select(grp => grp.First()).ToList();

//            cells[String.Format("{0}{1}", vsS[9], activRowIndex)].Value = summary.Sum(s => s.DebitPrice);
//            cells[String.Format("{0}{1}", vsS[10], activRowIndex)].Value = summary.Sum(s => s.DebitPriceCurrency);
//            cells[String.Format("{0}{1}", vsS[11], activRowIndex)].Value = summary.Sum(s => s.CreditPrice);
//            cells[String.Format("{0}{1}", vsS[12], activRowIndex)].Value = summary.Sum(s => s.CreditPriceCurrency);
//            cells[String.Format("{0}{1}", vsS[15], activRowIndex)].Value = summary.Sum(s => s.VatPrice);    

//            cells[String.Format("A{0}:{1}{2}", startRowIndex, nameLastCol, activRowIndex)].Borders.LineStyle = LineStyle.Continous;

//            PrintSignatures(cells, activRowIndex + 3);

//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("Звіт по платежам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);}
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


//        }

        

//        #endregion

//        #region MsTrialBalance report's


//        public bool GetMSPaymentsWithoutVat(DateTime startDate, DateTime endDate, string pflag3, string pflag4, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("PFlag3", pflag3),
//                    new FbParameter("PFlag4", pflag4)
//                };

//            string procName = @"select * from ""ReportMSPaymentsWithoutVat""(@PFlag3,@PFlag4, @StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MSPaymentsWithoutVat>, List<MSPaymentsWithoutVatDTO>>(msPaymentWithoutVat.SQLExecuteProc(procName, Parameters));

//            return PrintMSPaymentsWithoutVat(dataSource, startDate, endDate, accountNum);
//        }

        

//        public bool PrintMSPaymentsWithoutVat(IEnumerable<MSPaymentsWithoutVatDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            if (dataSource.Count() == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            List<MSPaymentsWithoutVatDTO> rowData = dataSource.ToList();

//            int currentPosition = 7;
//            int a = 0;
//            double sum = 0.0;

//            cells["A" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["A" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Font.Bold = true;
//            cells["A" + currentPosition].Value = "Оплати без ПДВ з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " за " + accountNum;
//            currentPosition += 2;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (i == 0 || rowData[i].ContractorId.ToString() != rowData[i-1].ContractorId.ToString())
//                {
//                    a = 0;
//                    cells["A" + currentPosition + ":" + "E" + currentPosition].Merge();
//                    cells["A" + currentPosition + ":" + "E" + currentPosition].HorizontalAlignment = HAlign.Center;
//                    cells["A" + currentPosition + ":" + "E" + currentPosition].Font.Bold = true;
//                    cells["A" + currentPosition].Value = rowData[i].Name.ToString() + " " + rowData[i].Srn.ToString();
//                    currentPosition++;
//                }

//                cells["A" + currentPosition].Value = rowData[i].PaymentDate.ToString().Substring(0, 10);
//                cells["B" + currentPosition + ":" + "C" + currentPosition].Merge();
//                cells["B" + currentPosition].Value = rowData[i].PaymentDocument.ToString();
//                cells["D" + currentPosition + ":" + "E" + currentPosition].Merge();
//                cells["D" + currentPosition].Value = rowData[i].PaymentPrice;

//                a++;
//                currentPosition++;

//                if ((i < rowData.Count - 1 && rowData[i].ContractorId.ToString() != rowData[i + 1].ContractorId.ToString()) || i == rowData.Count - 1)
//                {
//                    cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//                    cells["A" + currentPosition + ":" + "C" + currentPosition].HorizontalAlignment = HAlign.Center;
//                    cells["A" + currentPosition].Value = "Всього";

//                    cells["D" + currentPosition + ":" + "E" + currentPosition].Merge();
//                    cells["D" + currentPosition].Formula = SetFormula("D", currentPosition - a, "D", currentPosition - 1, "SUM");
//                    cells["D" + (currentPosition - a) + ":" + "D" + currentPosition].NumberFormat = "### ### ##0.00";
//                    cells["D" + (currentPosition - a) + ":" + "D" + currentPosition].HorizontalAlignment = HAlign.Right;

//                    cells["A" + currentPosition + ":" + "E" + currentPosition].Font.Bold = true;
//                    cells["A" + (currentPosition - a - 1) + ":" + "E" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//                    cells["A" + (currentPosition - a) + ":" + "B" + (currentPosition - 1)].HorizontalAlignment = HAlign.Left;

//                    sum += Convert.ToDouble(cells["D" + currentPosition].Value);

//                    currentPosition += 2;
//                }
//            }

//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "C" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Разом";

//            cells["D" + currentPosition + ":" + "E" + currentPosition].Merge();
//            cells["D" + currentPosition].Value = sum;
//            cells["D" + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["D" + currentPosition].HorizontalAlignment = HAlign.Right;

//            cells["A" + currentPosition + ":" + "E" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + currentPosition + ":" + "E" + currentPosition].Font.Bold = true;

//            cells["A" + currentPosition].ColumnWidth = 15;

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "Оплати без ПДВ з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " за " + accountNum + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Оплати без ПДВ з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " за " + accountNum + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//                return true;
//            }
//            catch (System.IO.IOException) 
//            { 
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception) 
//            { 
//                MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }

//        public bool GetContractorVat(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportContractorVat""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<ContractorVat>, List<ContractorVatDTO>>(contractorsVat.SQLExecuteProc(procName, Parameters));

//            return PrintContractorVat(dataSource, startDate, endDate);
//        }

//        public bool PrintContractorVat(List<ContractorVatDTO> contractorVatData, DateTime startDate, DateTime endDate)
//        {
//            if (contractorVatData.Count() == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            List<ContractorVatDTO> contractorVatList = contractorVatData.ToList();

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ContractorsVat.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            int captionPosition = 7;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 2;
//            int n = 1;

//            cells["D" + captionPosition + ":" + "H" + captionPosition].Merge();
//            cells["D" + captionPosition].HorizontalAlignment = HAlign.Center;
//            cells["D" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["D" + captionPosition].Font.Bold = true;
//            cells["D" + captionPosition].Value = "ПДВ з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();

//            for (int i = 0; i < contractorVatList.Count; i++)
//            {
//                cells["A" + currentPosition].Value = n;
//                cells["B" + currentPosition].Value = contractorVatList[i].Tin;
//                cells["B" + currentPosition].NumberFormat = "### ### ### ###";
//                cells["C" + currentPosition].HorizontalAlignment = HAlign.Center;
//                cells["C" + currentPosition].WrapText = true;
//                cells["C" + currentPosition].Value = contractorVatList[i].Name;
//                cells["C" + currentPosition].Font.Size = 14;
//                cells["D" + currentPosition].Value = contractorVatList[i].SaldoDebitStart;
//                cells["E" + currentPosition].Value = contractorVatList[i].SaldoCreditStart;
//                cells["F" + currentPosition].Value = contractorVatList[i].DebitVat63;
//                cells["H" + currentPosition].Value = contractorVatList[i].DebitVat631;
//                cells["J" + currentPosition].Value = contractorVatList[i].CreditPeriod;
//                cells["K" + currentPosition].Value = contractorVatList[i].SaldoDebitEnd;
//                cells["L" + currentPosition].Value = contractorVatList[i].SaldoCreditEnd;

//                currentPosition++;
//                n++;
//            }

//            cells["A" + startPosition + ":" + ("L" + currentPosition)].Borders.LineStyle = LineStyle.Continous;

//            cells["C" + currentPosition].Value = "Разом:";
//            cells["C" + currentPosition].VerticalAlignment = VAlign.Distributed;
//            cells["C" + currentPosition].Font.Bold = true;
//            cells["A" + currentPosition + ":" + "L" + currentPosition].Font.Size = 14;
//            cells["A" + currentPosition + ":" + "L" + currentPosition].Interior.Color = Color.Bisque;

//            cells["D" + currentPosition].Value = "=SUM(D" + 4 + ":" + ("D" + (currentPosition - 1)) + ")";
//            cells["E" + currentPosition].Value = "=SUM(E" + 4 + ":" + ("E" + (currentPosition - 1)) + ")";
//            cells["F" + currentPosition].Value = "=SUM(F" + 4 + ":" + ("F" + (currentPosition - 1)) + ")";
//            cells["H" + currentPosition].Value = "=SUM(H" + 4 + ":" + ("H" + (currentPosition - 1)) + ")";
//            cells["I" + currentPosition].Value = "=SUM(I" + 4 + ":" + ("I" + (currentPosition - 1)) + ")";
//            cells["J" + currentPosition].Value = "=SUM(J" + 4 + ":" + ("J" + (currentPosition - 1)) + ")";
//            cells["K" + currentPosition].Value = "=SUM(K" + 4 + ":" + ("K" + (currentPosition - 1)) + ")";
//            cells["L" + currentPosition].Value = "=SUM(L" + 4 + ":" + ("L" + (currentPosition - 1)) + ")";
//            //cells["M" + currentPosition].Value = "=SUM(M" + 4 + ":" + ("M" + (currentPosition - 1)) + ")";

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "Контрагенти ПДВ 644 " + startDate.Month.ToString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Контрагенти ПДВ 644 " + startDate.Month.ToString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//                return true;
//            }
//            catch (System.IO.IOException)
//            {
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception)
//            {
//                MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }

//        public bool GetMSTrialBalanceCurrency(DateTime startDate, DateTime endDate, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportMSTrialBalanceCurrency""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceCurrency>, List<MsTrialBalanceCurrencyDTO>>(msTrialBalanceCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintMSTrialBalanceCurrency(dataSource, startDate, endDate, accountNum.Replace('/', '.'));
//        }

//        private bool PrintMSTrialBalanceCurrency(IEnumerable<MsTrialBalanceCurrencyDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsTrialBalanceCurrencyDTO> rowData = dataSource.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSTrialBalanceCurrency.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            string name = string.Format("Оборотно-сальдова відомість по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum);

//            int captionPosition = 6;
//            int startPosition = captionPosition + 5;
//            int currentPosition = startPosition;

//            cells["A" + captionPosition].Value = name;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells["A" + currentPosition].Value = rowData[i].ContractorSrn;
//                //
//                cells["B" + currentPosition].Value = rowData[i].ContractorName;
//                //
//                cells["C" + currentPosition].Value = (rowData[i].DebitCurrencyName == null ? rowData[i].BankCurrencyName : rowData[i].DebitCurrencyName);
//                //
//                cells["D" + currentPosition].Value = rowData[i].StartDebitCurrency;
//                cells["E" + currentPosition].Value = rowData[i].StartDebit;
//                cells["F" + currentPosition].Value = rowData[i].StartCreditCurrency;
//                cells["G" + currentPosition].Value = rowData[i].StartCredit;

//                cells["H" + currentPosition].Value = rowData[i].PeriodDebitCurrency;
//                cells["I" + currentPosition].Value = rowData[i].PeriodDebit;
//                cells["J" + currentPosition].Value = rowData[i].PeriodCreditCurrency;
//                cells["K" + currentPosition].Value = rowData[i].PeriodCredit;

//                cells["L" + currentPosition].Value = rowData[i].EndDebitCurrency;
//                cells["M" + currentPosition].Value = rowData[i].EndDebit;
//                cells["N" + currentPosition].Value = rowData[i].EndCreditCurrency;
//                cells["O" + currentPosition].Value = rowData[i].EndCredit;
//                //
//                currentPosition++;
//            }

//            cells["A" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + startPosition + ":" + "B" + currentPosition].WrapText = true;
//            cells["C" + startPosition + ":" + "H" + currentPosition].HorizontalAlignment = HAlign.Right;

//            cells["A" + currentPosition + ":" + "B" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Разом";

//            cells["E" + currentPosition].Formula = SetFormula("E", startPosition, "E", currentPosition - 1, "SUM");
//            cells["G" + currentPosition].Formula = SetFormula("G", startPosition, "G", currentPosition - 1, "SUM");
//            cells["I" + currentPosition].Formula = SetFormula("I", startPosition, "I", currentPosition - 1, "SUM");
//            cells["K" + currentPosition].Formula = SetFormula("K", startPosition, "K", currentPosition - 1, "SUM");
//            cells["M" + currentPosition].Formula = SetFormula("M", startPosition, "M", currentPosition - 1, "SUM");
//            cells["O" + currentPosition].Formula = SetFormula("O", startPosition, "O", currentPosition - 1, "SUM");

//            cells["A" + currentPosition + ":" + "O" + currentPosition].Font.Bold = true;
//            cells["C" + currentPosition + ":" + "O" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["C" + startPosition + ":" + "O" + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["A" + startPosition + ":" + "O" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum) + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetMSTrialBalanceCurrency681(DateTime startDate, DateTime endDate, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportMSTrialBalanceCurrency681""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceCurrency>, List<MsTrialBalanceCurrencyDTO>>(msTrialBalanceCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintMSTrialBalanceCurrency681(dataSource, startDate, endDate, accountNum.Replace('/', '.'));
//        }

//        private bool PrintMSTrialBalanceCurrency681(IEnumerable<MsTrialBalanceCurrencyDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsTrialBalanceCurrencyDTO> rowData = dataSource.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSTrialBalanceCurrency.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            string subName = "Розрахунки за авансами одержаними";
//            string name = string.Format("Рахунок {0} \"{1}\" станом за період з {2} по {3}", accountNum, subName, startDate.ToShortDateString(), endDate.ToShortDateString());

//            int captionPosition = 6;
//            int startPosition = captionPosition + 5;
//            int currentPosition = startPosition;

//            cells["A" + captionPosition].Value = name;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells["A" + currentPosition].Value = rowData[i].ContractorSrn;
//                //
//                cells["B" + currentPosition].Value = rowData[i].ContractorName;
//                //
//                cells["C" + currentPosition].Value = (rowData[i].BankCurrencyName); // == DBNull.Value ? reportTable.Rows[i]["BankCurrencyName"] : reportTable.Rows[i]["DebitCurrencyName"]);
//                //
//                cells["D" + currentPosition].Value = rowData[i].StartDebitCurrency;
//                cells["E" + currentPosition].Value = rowData[i].StartDebit;
//                cells["F" + currentPosition].Value = rowData[i].StartCreditCurrency;
//                cells["G" + currentPosition].Value = rowData[i].StartCredit;

//                cells["H" + currentPosition].Value = rowData[i].PeriodDebitCurrency;
//                cells["I" + currentPosition].Value = rowData[i].PeriodDebit;
//                cells["J" + currentPosition].Value = rowData[i].PeriodCreditCurrency;
//                cells["K" + currentPosition].Value = rowData[i].PeriodCredit;

//                cells["L" + currentPosition].Value = rowData[i].EndDebitCurrency;
//                cells["M" + currentPosition].Value = rowData[i].EndDebit;
//                cells["N" + currentPosition].Value = rowData[i].EndCreditCurrency;
//                cells["O" + currentPosition].Value = rowData[i].EndCredit;
//                //
//                currentPosition++;
//            }

//            cells["A" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + startPosition + ":" + "B" + currentPosition].WrapText = true;
//            cells["C" + startPosition + ":" + "H" + currentPosition].HorizontalAlignment = HAlign.Right;

//            cells["A" + currentPosition + ":" + "B" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Разом";
            
//            cells["E" + currentPosition].Formula = SetFormula("E", startPosition, "E", currentPosition - 1, "SUM");
//            cells["G" + currentPosition].Formula = SetFormula("G", startPosition, "G", currentPosition - 1, "SUM");
//            cells["I" + currentPosition].Formula = SetFormula("I", startPosition, "I", currentPosition - 1, "SUM");
//            cells["K" + currentPosition].Formula = SetFormula("K", startPosition, "K", currentPosition - 1, "SUM");
//            cells["M" + currentPosition].Formula = SetFormula("M", startPosition, "M", currentPosition - 1, "SUM");
//            cells["O" + currentPosition].Formula = SetFormula("O", startPosition, "O", currentPosition - 1, "SUM");

//            cells["A" + currentPosition + ":" + "O" + currentPosition].Font.Bold = true;
//            cells["C" + currentPosition + ":" + "O" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["C" + startPosition + ":" + "O" + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["A" + startPosition + ":" + "O" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "ОСВ за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "ОСВ за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetMSTrialBalance(DateTime startDate, DateTime endDate, string Flag1, string Flag3, string Flag4, string PFlag3, string PFlag4, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("Flag1", Flag1),
//                    new FbParameter("Flag3", Flag3),
//                    new FbParameter("Flag4", Flag4),
//                    new FbParameter("PFlag3", PFlag3),
//                    new FbParameter("PFlag4", PFlag4)
//                };

//            string procName = @"select * from ""ReportMSTrialBalance""(@StartDate, @EndDate, @Flag1, @Flag3, @Flag4, @PFlag3, @PFlag4)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalance>, List<MsTrialBalanceDTO>>(msTrialBalance.SQLExecuteProc(procName, Parameters));

//            return PrintMSTrialBalance(dataSource, startDate, endDate, accountNum.Replace('/', '.'));
//        }

//        private bool PrintMSTrialBalance(IEnumerable<MsTrialBalanceDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsTrialBalanceDTO> rowData = dataSource.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSTrialBalance.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            string name = string.Format("Оборотно-сальдова відомість по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum);

//            int captionPosition = 6;
//            int startPosition = captionPosition + 4;
//            int currentPosition = startPosition;

//            cells["A" + captionPosition].Value = name;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells["A" + currentPosition].Value = rowData[i].Contractor_Srn;
//                //
//                cells["B" + currentPosition].Value = rowData[i].Contractor_Name;
//                //
//                cells["C" + currentPosition].Value = rowData[i].Begin_Debit;
//                cells["D" + currentPosition].Value = rowData[i].Begin_Credit;
//                //
//                cells["E" + currentPosition].Value = rowData[i].Period_Debit;
//                cells["F" + currentPosition].Value = rowData[i].Period_Credit;
//                //
//                cells["G" + currentPosition].Value = rowData[i].End_Debit;
//                cells["H" + currentPosition].Value = rowData[i].End_Credit;
//                //
//                currentPosition++;
//            }

//            cells["A" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Left;
//            //cells["A" + startPosition + ":" + "A" + currentPosition].NumberFormat = "############";
//            cells["B" + startPosition + ":" + "B" + currentPosition].WrapText = true;
//            cells["C" + startPosition + ":" + "H" + currentPosition].HorizontalAlignment = HAlign.Right;

//            cells["A" + currentPosition + ":" + "B" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Разом";

//            cells["C" + currentPosition].Formula = SetFormula("C", startPosition, "C", currentPosition - 1, "SUM");
//            cells["D" + currentPosition].Formula = SetFormula("D", startPosition, "D", currentPosition - 1, "SUM");
//            cells["E" + currentPosition].Formula = SetFormula("E", startPosition, "E", currentPosition - 1, "SUM");
//            cells["F" + currentPosition].Formula = SetFormula("F", startPosition, "F", currentPosition - 1, "SUM");
//            cells["G" + currentPosition].Formula = SetFormula("G", startPosition, "G", currentPosition - 1, "SUM");
//            cells["H" + currentPosition].Formula = SetFormula("H", startPosition, "H", currentPosition - 1, "SUM");

//            cells["A" + currentPosition + ":" + "H" + currentPosition].Font.Bold = true;
//            cells["C" + currentPosition + ":" + "H" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["C" + startPosition + ":" + "H" + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["A" + startPosition + ":" + "H" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            cells["B" + startPosition + ":" + "B" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;
//            cells["D" + startPosition + ":" + "D" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;
//            cells["F" + startPosition + ":" + "F" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum) + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1} ({2})", startDate.ToShortDateString(), endDate.ToShortDateString(), accountNum) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

        

//        public bool GetMSTrialBalanceByAccountsCurrency(DateTime startDate, DateTime endDate, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportMSTBByAccountsCurrency""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceByAccountsCurrency>, List<MsTrialBalanceByAccountsCurrencyDTO>>(msTrialBalanceByAccountsCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintMSTrialBalanceByAccountsCurrency(dataSource, startDate, endDate, accountNum.Replace('/', '.'));
//        }

//        private bool PrintMSTrialBalanceByAccountsCurrency(IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsTrialBalanceByAccountsCurrencyDTO> rowData = dataSource.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSTrialBalanceByAccountsCurrency.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            string subName = "Розрахунки з іноземними постачальниками та підрядниками";
//            string name = string.Format("Рахунок {0} \"{1}\" станом за період з {2} по {3}", accountNum, subName, startDate, endDate);
            
//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            cells["E" + captionPosition].Value = name;

//            #region Generate report header

//            var Debit_Accounts = rowData.Where(c => c.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = rowData.Where(c => c.FlagDebitCredit == 2).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            HeaderColumn.Add("ContractorSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код";

//            startHeaderPosition++;

//            HeaderColumn.Add("ContractorName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            HeaderColumn.Add("CurrencyName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування валюти";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
            
//            startHeaderPosition++;

//            HeaderColumn.Add("StartDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Document", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З деб., в кред.";
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З деб., в кред.";
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PeriodPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;
//            startHeaderPosition++;

//            HeaderColumn.Add("Rate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("DebitSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер накладної";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата накладної";

//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З кред., в деб.";
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З кред., в деб.";
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PeriodOrderPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("OrderRate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("CreditSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
           
//            startHeaderPosition++;

//            HeaderColumn.Add("EndDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["D" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            int contractorId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].Contractor_Id)
//                {
//                    contractorId = rowData[i].Contractor_Id;
//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodOrderPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodOrderPrice"] - 1], currentPosition - 1, "SUM");
//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;
//                    }
//                    cells[vsS[HeaderColumn["ContractorSrn"] - 1] + currentPosition].Value = rowData[i].ContractorSrn;
//                    cells[vsS[HeaderColumn["ContractorName"] - 1] + currentPosition].Value = rowData[i].ContractorName;
//                    cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].Value = rowData[i].CurrencyName;
//                    //
//                    if (HeaderColumn.ContainsKey("StartDebitCurrency" + rowData[i].CurrencyName))
//                        cells[vsS[HeaderColumn["StartDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartDebitCurrency;
//                    cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                    if (HeaderColumn.ContainsKey("StartCreditCurrency" + rowData[i].CurrencyName))
//                        cells[vsS[HeaderColumn["StartCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartCreditCurrency;
//                    cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;
//                    //
//                    if (rowData[i].FlagDebitCredit == 1)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["Rate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (HeaderColumn.ContainsKey("DebitSum"))
//                        cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit == 2)
//                    {
//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["Invoice_Num"] - 1] + currentPosition].Value = rowData[i].Invoice_Num;
//                        cells[vsS[HeaderColumn["Invoice_Date"] - 1] + currentPosition].Value = rowData[i].Invoice_Date;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["OrderRate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit == 1)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    //
//                    if (HeaderColumn.ContainsKey("EndDebitCurrency" + rowData[i].CurrencyName))
//                        cells[vsS[HeaderColumn["EndDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndDebitCurrency;
//                    cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                    if (HeaderColumn.ContainsKey("EndCreditCurrency" + rowData[i].CurrencyName))
//                        cells[vsS[HeaderColumn["EndCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndCreditCurrency;
//                    cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;
//                }
//                else
//                {
//                    if (rowData[i].FlagDebitCredit == 1)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["Rate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit == 2)
//                    {
//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["Invoice_Num"] - 1] + currentPosition].Value = rowData[i].Invoice_Num;
//                        cells[vsS[HeaderColumn["Invoice_Date"] - 1] + currentPosition].Value = rowData[i].Invoice_Date;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["OrderRate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (HeaderColumn.ContainsKey("CreditSum"))
//                        cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit == 1)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                }
//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodOrderPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodOrderPrice"] - 1], currentPosition - 1, "SUM");
//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["D" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["D" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2).Sum(x => x.PeriodPrice);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }

//            #endregion

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "ОСВ по контрагентам та рахункам за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "ОСВ по контрагентам та рахункам за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return true; }
//        }

//        public bool GetMSTrialBalanceByAccountsCurrency681(DateTime startDate, DateTime endDate, string accountNum)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportMSTBByAccountsCurrency681""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceByAccountsCurrency>, List<MsTrialBalanceByAccountsCurrencyDTO>>(msTrialBalanceByAccountsCurrency.SQLExecuteProc(procName, Parameters));

//            return PrintMSTrialBalanceByAccountsCurrency681(dataSource, startDate, endDate, accountNum.Replace('/', '.'));
//        }

//        private bool PrintMSTrialBalanceByAccountsCurrency681(IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsTrialBalanceByAccountsCurrencyDTO> rowData = dataSource.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSTrialBalanceByAccountsCurrency.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            string subName = "Розрахунки за авансами одержаними";
//            string name = string.Format("Рахунок {0} \"{1}\" станом за період з {2} по {3}", accountNum, subName, startDate.ToShortDateString(), endDate.ToShortDateString());

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            cells["E" + captionPosition].Value = name;

//            #region Generate report header

//            var Debit_Accounts = rowData.Where(c => c.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = rowData.Where(c => c.FlagDebitCredit == 2).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            HeaderColumn.Add("ContractorSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код";

//            startHeaderPosition++;

//            HeaderColumn.Add("ContractorName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            HeaderColumn.Add("CurrencyName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування валюти";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("StartCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Document", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "С Д-т. рах. 681 в К-т. рахунків";
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "С Д-т. рах. 681 в К-т. рахунків";
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PeriodPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;
//            startHeaderPosition++;

//            HeaderColumn.Add("Rate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("DebitSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("DebitSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер накладної";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата накладної";

//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З к-т. рах. 681 в д-т. рахунків";
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = "З к-т. рах. 681 в д-т. рахунків";
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("PeriodOrderPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сума в гривні";
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("OrderRate", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Курс";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 1] + (startPosition + 1)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//            cells[vsS[startHeaderPosition - 1] + (startPosition) + ":" + vsS[startHeaderPosition + 1] + (startPosition + 2)].Interior.Color = Color.Azure;

//            HeaderColumn.Add("CreditSumUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";

//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";

//            startHeaderPosition++;

//            HeaderColumn.Add("CreditSumRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition + 6] + startPosition].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на конець періоду";
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 2] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            cells[vsS[startHeaderPosition + 3] + (startPosition + 1) + ":" + vsS[startHeaderPosition + 6] + (startPosition + 1)].Merge();
//            cells[startPosition, startHeaderPosition + 3].Value = "Кредит";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndDebitCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndDebitCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "Гривня";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCreditCurrencyUSD", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "USD";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyEUR", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "EUR";
//            startHeaderPosition++;
//            HeaderColumn.Add("EndCreditCurrencyRUB", startHeaderPosition);
//            cells[startPosition + 1, startHeaderPosition - 1].Value = "RUB";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["D" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            int contractorId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                if (contractorId != rowData[i].Contractor_Id)
//                {
//                    contractorId = rowData[i].Contractor_Id;
//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//                        cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodOrderPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodOrderPrice"] - 1], currentPosition - 1, "SUM");
//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;
//                    }
//                    cells[vsS[HeaderColumn["ContractorSrn"] - 1] + currentPosition].Value = rowData[i].ContractorSrn;
//                    cells[vsS[HeaderColumn["ContractorName"] - 1] + currentPosition].Value = rowData[i].ContractorName;
//                    cells[vsS[HeaderColumn["CurrencyName"] - 1] + currentPosition].Value = rowData[i].CurrencyName;
//                    //
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["StartDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartDebitCurrency;
//                    cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Value = rowData[i].StartDebit;
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["StartCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].StartCreditCurrency;
//                    cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Value = rowData[i].StartCredit;
//                    //
//                    if (rowData[i].FlagDebitCredit == 1)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["Rate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit == 2)
//                    {
//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["Invoice_Num"] - 1] + currentPosition].Value = rowData[i].Invoice_Num;
//                        cells[vsS[HeaderColumn["Invoice_Date"] - 1] + currentPosition].Value = rowData[i].Invoice_Date;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["OrderRate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit == 1)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                    //

//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["EndDebitCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndDebitCurrency;
//                    cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Value = rowData[i].EndDebit;
//                    if (rowData[i].CurrencyId > 1)
//                        cells[vsS[HeaderColumn["EndCreditCurrency" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].EndCreditCurrency;
//                    cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Value = rowData[i].EndCredit;
//                }
//                else
//                {
//                    if (rowData[i].FlagDebitCredit == 1)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["Rate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["DebitSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    else if (rowData[i].FlagDebitCredit == 2)
//                    {
//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + currentPosition].Value = rowData[i].Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + currentPosition].Value = rowData[i].Payment_Date;
//                        cells[vsS[HeaderColumn["Invoice_Num"] - 1] + currentPosition].Value = rowData[i].Invoice_Num;
//                        cells[vsS[HeaderColumn["Invoice_Date"] - 1] + currentPosition].Value = rowData[i].Invoice_Date;
//                        cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                        cells[vsS[HeaderColumn["OrderRate"] - 1] + currentPosition].Value = rowData[i].Rate;
//                        if (rowData[i].CurrencyId > 1)
//                            cells[vsS[HeaderColumn["CreditSum" + rowData[i].CurrencyName] - 1] + currentPosition].Value = rowData[i].PeriodPriceCurrency;
//                    }
//                    if (rowData[i].AccountId > 0)
//                    {
//                        account = (rowData[i].FlagDebitCredit == 1)
//                            ? "DebitAccount" + (rowData[i].AccountId).ToString()
//                            : "CreditAccount" + (rowData[i].AccountId).ToString();
//                        cells[vsS[HeaderColumn[account] - 1] + currentPosition].Value = rowData[i].PeriodPrice;
//                    }
//                }
//                currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumUSD"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumEUR"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["PeriodOrderPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumUSD"] - 1], startContractor, vsS[HeaderColumn["DebitSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumEUR"] - 1], startContractor, vsS[HeaderColumn["DebitSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitSumRUB"] - 1], startContractor, vsS[HeaderColumn["DebitSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumUSD"] - 1], startContractor, vsS[HeaderColumn["CreditSumUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumEUR"] - 1], startContractor, vsS[HeaderColumn["CreditSumEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditSumRUB"] - 1], startContractor, vsS[HeaderColumn["CreditSumRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["PeriodOrderPrice"] - 1], startContractor, vsS[HeaderColumn["PeriodOrderPrice"] - 1], currentPosition - 1, "SUM");
//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["D" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells["D" + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebitCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyUSD"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyEUR"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCreditCurrencyRUB"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["DebitSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["DebitSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["PeriodPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["CreditSumUSD"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 3).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumEUR"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 2).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["CreditSumRUB"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.CurrencyId == 4).Sum(x => x.PeriodPriceCurrency);
//            cells[vsS[HeaderColumn["PeriodOrderPrice"] - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2).Sum(x => x.PeriodPrice);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 1 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.Where(w => w.FlagDebitCredit == 2 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }

//            #endregion

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "ОСВ за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "ОСВ за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + " (" + accountNum + ").xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetMSTrialBalanceByAccounts39(DateTime startDate, DateTime endDate, string accountNum)
//        { return true; }

//        //public bool GetMSTrialBalanceByAccounts(DateTime startDate, DateTime endDate, string PFlag1, string Flag3, string Flag4, string PFlag3, string PFlag4)
//        //{
//        //    FbParameter[] Parameters =
//        //        {
//        //            new FbParameter("Start_Date", startDate),
//        //            new FbParameter("End_Date", endDate),
//        //            new FbParameter("PFlag1", PFlag1),
//        //            new FbParameter("Flag3", Flag3),                  
//        //            new FbParameter("Flag4", Flag4),
//        //            new FbParameter("PFlag3", PFlag3),
//        //            new FbParameter("PFlag4", PFlag4)
//        //        };

//        //    string procName = @"select * from ""ReportMSTrialBalanceByAccounts""(@Start_Date, @End_Date, @PFlag1, @Flag3, @Flag4,@PFlag3,@PFlag4)";

//        //    var dataSource = mapper.Map<IEnumerable<MSTrialBalanceByAccounts>, List<MSTrialBalanceByAccountsDTO>>(msTrialBalanceByAccount.SQLExecuteProc(procName, Parameters));

//        //    return PrintMSTrialBalanceByAccounts(dataSource, startDate, endDate);//, accountNum.Replace('/', '.'), contractorName, contractorSrnCode);

//        //}

//        #region For Chess

//        public IEnumerable<ContractorVatDTO> GetContractorVatForChess(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportContractorVat""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<ContractorVat>, List<ContractorVatDTO>>(contractorsVat.SQLExecuteProc(procName, Parameters));
//            IEnumerable<ContractorVatDTO> rez;
//            rez = dataSource;
//            return rez;
//        }

  
//        public IEnumerable<MSTrialBalanceByAccountsDTO> GetCreditDebit63ForChess(DateTime startDate, DateTime endDate, string PFlag1, string Flag3, string Flag4, string PFlag3, string PFlag4)
//        {
//            decimal credit63;
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("Start_Date", startDate),
//                    new FbParameter("End_Date", endDate),
//                    new FbParameter("PFlag1", PFlag1),
//                    new FbParameter("Flag3", Flag3),                  
//                    new FbParameter("Flag4", Flag4),
//                    new FbParameter("PFlag3", PFlag3),
//                    new FbParameter("PFlag4", PFlag4)
//                };

//            string procName = @"select * from ""ReportMSTrialBalanceByAccounts""(@Start_Date, @End_Date, @PFlag1, @Flag3, @Flag4,@PFlag3,@PFlag4)";

//            var model = mapper.Map<IEnumerable<MSTrialBalanceByAccounts>, List<MSTrialBalanceByAccountsDTO>>(msTrialBalanceByAccount.SQLExecuteProc(procName, Parameters));
//            IEnumerable<MSTrialBalanceByAccountsDTO> rez;
//            rez = model;
//            return rez;
//        }

//        public IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> GetMSTrialBalanceByAccounts632_ForChess(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };
//            string procName = @"select * from ""ReportMSTBByAccountsCurrency""(@StartDate, @EndDate)";//632
//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceByAccountsCurrency>, List<MsTrialBalanceByAccountsCurrencyDTO>>(msTrialBalanceByAccountsCurrency.SQLExecuteProc(procName, Parameters));
//            IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> rez = dataSource;
//            return rez;
//        }

//        public IEnumerable<MSTrialBalanceByAccountsDTO> GetMSTrialBalanceByAccounts631_ForChess(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("Start_Date", startDate),
//                    new FbParameter("End_Date", endDate),
//                    new FbParameter("PFlag1", "1"),
//                    new FbParameter("Flag3", "1"),                  
//                    new FbParameter("Flag4", "-1"),
//                    new FbParameter("PFlag3", "15"),
//                    new FbParameter("PFlag4", "15")
//                };

//            string procName = @"select * from ""ReportMSTrialBalanceByAccounts""(@Start_Date, @End_Date, @PFlag1, @Flag3, @Flag4,@PFlag3,@PFlag4)";

//            var model = mapper.Map<IEnumerable<MSTrialBalanceByAccounts>, List<MSTrialBalanceByAccountsDTO>>(msTrialBalanceByAccount.SQLExecuteProc(procName, Parameters));
//            IEnumerable<MSTrialBalanceByAccountsDTO> rez = model;


//            return rez;
//        }
//        public IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> GetMSTrialBalanceByAccounts681_ForChess(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate)
//                };

//            string procName = @"select * from ""ReportMSTBByAccountsCurrency681""(@StartDate, @EndDate)";

//            var dataSource = mapper.Map<IEnumerable<MsTrialBalanceByAccountsCurrency>, List<MsTrialBalanceByAccountsCurrencyDTO>>(msTrialBalanceByAccountsCurrency.SQLExecuteProc(procName, Parameters));
//            IEnumerable<MsTrialBalanceByAccountsCurrencyDTO> rez = dataSource;
//            return rez;
//        }


//        public IEnumerable<CashPaymentsPeriodBalanceDTO> GetEconomicsNeeds_ForChess(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] ParametersPeriod =
//            {
//                new FbParameter("StartDate", startDate),
//                new FbParameter("EndDate", endDate),
//            };

//            string procName = @"select * from ""GetCashPaymentsPeriodBalance""(@StartDate, @EndDate)";

//            var dataSourcePeriod = mapper.Map<IEnumerable<CashPaymentsPeriodBalance>, List<CashPaymentsPeriodBalanceDTO>>(cashPaymentsPeriodBalance.SQLExecuteProc(procName, ParametersPeriod));
//            IEnumerable<CashPaymentsPeriodBalanceDTO> rez = dataSourcePeriod;
//            return rez;
//        }
//       private IEnumerable<GetOSVkvartal_ForChessDTO> rez;
//       public IEnumerable<GetOSVkvartal_ForChessDTO> GetOSVkvartal_ForChess(DateTime startDate, DateTime endDate, int accountId)
//       {
//           FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("AccountId", accountId)
//                };

//           string procName = "";
//           procName = @"select * from ""GetOSVkvartal_ForChess""(@StartDate, @EndDate, @AccountId)";
//           rez = mapper.Map<IEnumerable<GetOSVkvartal_ForChess>, List<GetOSVkvartal_ForChessDTO>>(getOSVkvartal_ForChess.SQLExecuteProc(procName, Parameters));
//           return rez;

//           //var rezult = (from b in bankPayments.GetAll()
//           //              join a in accounts.GetAll() on b.Purpose_Account_Id equals a.ID into acc
//           //              from a in acc.DefaultIfEmpty()


//           //              where (b.Payment_Date >= startDate && b.Payment_Date <= endDate && accountId == b.Bank_Account_Id)
                         
//           //              select new AccountsDTO()
//           //              {
//           //                    Num=a.NUM,
                                

//           //              }).ToList();

//           //return rezult.OrderBy(o => o.Month_Current).ToList();

           

          

//        //   procName = @"select * from ""GetOSVkvartal_ForChess""(@StartDate, @EndDate, 0)";


//    //    procName= @"EXECUTE procedure ""GetOSVkvartal_ForChess""(@StartDate, @EndDate, @AccountId)";
//      //  System.Threading.Thread.Sleep(50);
       


//         //  var dataSource = mapper.Map<IEnumerable<GetOSVkvartal_ForChess>, List<GetOSVkvartal_ForChessDTO>>(getOSVkvartal_ForChess.SQLExecuteProc(procName, Parameters));

//        //   proced

           

//       // getOSVkvartal_ForChess.Update();

//        //getOSVkvartal_ForChess.;
        
          

//           //List<BankPaymentsReportTrialBalanceQuarterDTO> rez = new List<BankPaymentsReportTrialBalanceQuarterDTO>();

//           //FbParameter[] Parameters =
//           //     {
//           //         new FbParameter("StartDate", startDate),
//           //         new FbParameter("EndDate", endDate),
//           //         new FbParameter("AccountId", accountId)
//           //     };

//           //string procName = "";
//           //procName = @"select * from ""BPReportTrialBalanceQuarterProc""(@StartDate, @EndDate, @AccountId)";

//           //var dataSource = mapper.Map<IEnumerable<BankPaymentsReportTrialBalanceQuarter>, List<BankPaymentsReportTrialBalanceQuarterDTO>>(bankPaymentsReportTrialBalanceQuarter.SQLExecuteProc(procName, Parameters));

          
//           //rez.AddRange(dataSource);

//           //return rez;




//       }

//        #endregion


//        public void GetMSTrialBalanceByAccounts(DateTime startDate, DateTime endDate, string PFlag1, string Flag3, string Flag4, string PFlag3, string PFlag4, bool report531=false)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("Start_Date", startDate),
//                    new FbParameter("End_Date", endDate),
//                    new FbParameter("PFlag1", PFlag1),
//                    new FbParameter("Flag3", Flag3),                  
//                    new FbParameter("Flag4", Flag4),
//                    new FbParameter("PFlag3", PFlag3),
//                    new FbParameter("PFlag4", PFlag4)
//                };

//            string procName;
//            if (!report531)
//                procName = @"select * from ""ReportMSTrialBalanceByAccounts""(@Start_Date, @End_Date, @PFlag1, @Flag3, @Flag4,@PFlag3,@PFlag4)";
//            else
//                procName = @"select * from ""ReportMSTrialBalance531""(@Start_Date, @End_Date, @PFlag1, @Flag3, @Flag4,@PFlag3,@PFlag4)";

//            var model = mapper.Map<IEnumerable<MSTrialBalanceByAccounts>, List<MSTrialBalanceByAccountsDTO>>(msTrialBalanceByAccount.SQLExecuteProc(procName, Parameters));
            
//          //  return PrintMSTrialBalanceByAccounts(dataSource, startDate, endDate);//, accountNum.Replace('/', '.'), contractorName, contractorSrnCode);
//            if (model.Count() == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }




//            // если тут проблема со строкой, то скорее всего засунули контрагента с null єдрпо
//            var orderSource = model.AsEnumerable()
//                                .OrderBy(s => s.ContractorSrn)
//                                .ThenBy(i => i.Contractor_Id)
//                                .ThenBy(w => w.FlagDebitCredit).ToList();
//            // .CopyToDataTable();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"Templates\TemplateWithStamp.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var Debit_Accounts = orderSource.AsEnumerable().Where(c => c.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = model.Where(c => c.FlagDebitCredit == 2).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);




//            HeaderColumn.Add("ContractorSrn", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Код";

//            startHeaderPosition++;

//            HeaderColumn.Add("ContractorName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            HeaderColumn.Add("StartDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("StartCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Document", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата платежу";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("DebitPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата надходження";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер накладної";

//            startHeaderPosition++;

//            HeaderColumn.Add("Invoice_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата накладної";

//            startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("CreditPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            HeaderColumn.Add("EndDebit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            startHeaderPosition++;

//            HeaderColumn.Add("EndCredit", startHeaderPosition);
//            cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["C" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            int contractorId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            Func<int, int, int, int> WriteContractor = (sourceId, currentPos, _contractorId) =>
//            {
//                int insidePos = currentPos;
//                int _orderId = 0;
//                int creditRecCount = 0;

//                cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].NumberFormat = "@";
//                cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].Value = orderSource[sourceId].ContractorSrn!=null? orderSource[sourceId].ContractorSrn.ToString() : " ";
//                cells[vsS[HeaderColumn["ContractorName"] - 1] + insidePos].Value = orderSource[sourceId].ContractorName;
//                cells[vsS[HeaderColumn["StartDebit"] - 1] + insidePos].Value = orderSource[sourceId].StartDebit;
//                cells[vsS[HeaderColumn["StartCredit"] - 1] + insidePos].Value = orderSource[sourceId].StartCredit;
//                cells[vsS[HeaderColumn["EndDebit"] - 1] + insidePos].Value = orderSource[sourceId].EndDebit;
//                cells[vsS[HeaderColumn["EndCredit"] - 1] + insidePos].Value = orderSource[sourceId].EndCredit;
//                //
//                var DebitInfo = orderSource.AsEnumerable()
//                                 .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 1)
//                                 .OrderBy(o => o.OrderId);

//                var CreditInfo = orderSource.AsEnumerable()
//                                 .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 2)
//                                 .OrderBy(o => o.OrderId);

//                if (DebitInfo.Count() > 0)
//                {
//                    foreach (var item in DebitInfo)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + insidePos].Value = item.Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + insidePos].Value = item.Payment_Date;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + insidePos].Value = item.PeriodPrice;

//                        if ((int)item.AccountId > 0)
//                        {
//                            account = "DebitAccount" + item.AccountId.ToString();
//                            cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//                        }

//                        insidePos++;
//                    }
//                }

//                if (CreditInfo.Count() > 0)
//                {
//                    //insidePos = (currentPos - 1);
//                    insidePos = currentPos;
//                    foreach (var item in CreditInfo)
//                    {
//                        if (_orderId != (int)item.OrderId)
//                        {
//                            _orderId = (int)item.OrderId;
//                            insidePos++;
//                            creditRecCount++;
//                        }

//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + insidePos].Value = item.Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + insidePos].Value = item.Payment_Date;
//                        cells[vsS[HeaderColumn["Invoice_Num"] - 1] + insidePos].Value = item.Invoice_Num;
//                        cells[vsS[HeaderColumn["Invoice_Date"] - 1] + insidePos].Value = item.Invoice_Date;


//                        if ((int)item.AccountId > 0)
//                        {
//                            account = "CreditAccount" + item.AccountId.ToString();
//                            cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//                        }

//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + insidePos].Formula = SetFormula(vsS[HeaderColumn["Invoice_Date"]], insidePos, vsS[HeaderColumn["CreditPrice"] - 2], insidePos, "SUM");
//                    }

//                }

//                int recCount = DebitInfo.Count() > creditRecCount ? DebitInfo.Count() : creditRecCount;
//                return (currentPos + (recCount > 0 ? recCount : 1));
//            };

//            for (int i = 0; i < orderSource.Count; i++)
//            {
//                if (contractorId != (int)orderSource[i].Contractor_Id)
//                {
//                    contractorId = (int)orderSource[i].Contractor_Id;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;
//                    }

//                    currentPosition = WriteContractor(i, currentPosition, contractorId) + 1;
//                }
//                //currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

 

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["C" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 1).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 2).Sum(x => x.PeriodPrice);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }

//            #endregion

//            #region Report caption and froze row

//            string FlagType;

//            if (!report531)
//                FlagType = "63";
//            else
//                FlagType = "531";

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            string subName = "Розрахунки з постачальниками та підрядниками";
//            cells["A" + captionPosition].Value = String.Format("Рахунок {0} \"{1}\" станом за період з {2} по {3}", FlagType, subName, startDate, endDate);
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }        

//        }


//        public void GetCashBookTrialBalanceByAccounts(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("Start_Date", startDate),
//                    new FbParameter("End_Date", endDate)
//                };

//            string procName = @"select * from ""ReportCashBookTrialBalance""(@Start_Date, @End_Date)";

//            var model = mapper.Map<IEnumerable<MSTrialBalanceByAccounts>, List<MSTrialBalanceByAccountsDTO>>(msTrialBalanceByAccount.SQLExecuteProc(procName, Parameters));

//            //  return PrintMSTrialBalanceByAccounts(dataSource, startDate, endDate);//, accountNum.Replace('/', '.'), contractorName, contractorSrnCode);
//            if (model.Count() == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }


//            // если тут проблема со строкой, то скорее всего засунули контрагента с null єдрпо
//            var orderSource = model.AsEnumerable().Where(srch => srch.Contractor_Id!=1)
//                                .OrderBy(s => s.ContractorSrn)
//                                .ThenBy(i => i.Contractor_Id)
//                                .ThenBy(w => w.FlagDebitCredit).ToList();
//            // .CopyToDataTable();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"Templates\TemplateWithStamp.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//            Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

            

//            int captionPosition = 6;
//            int startPosition = captionPosition + 2;
//            int startSaldoPosition = 7;
//            int endSaldoPosition = 0;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

            
            

//            #region Generate report header

//            var Debit_Accounts = orderSource.Select(c => new//c.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = model.AsEnumerable().Where(c => c.FlagDebitCredit == 2).Select(c => new
//            {
//                AccountNum = c.AccountNum,
//                AccountId = c.AccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);


//            //HeaderColumn.Add("ContractorSrn", startHeaderPosition);
//            //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            //cells[startPosition - 1, startHeaderPosition - 1].Value = "Код";

//            //startHeaderPosition++;

//            HeaderColumn.Add("ContractorName", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Контрагент";

//            startHeaderPosition++;

//            //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            //cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            //cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            //cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//            //HeaderColumn.Add("StartDebit", startHeaderPosition);
//            //cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            //startHeaderPosition++;

//            //HeaderColumn.Add("StartCredit", startHeaderPosition);
//            //cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            //startHeaderPosition++;

//            HeaderColumn.Add("Payment_Document", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Підстава платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("Payment_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата платежу";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("DebitPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Num", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Підстава платежу";

//            startHeaderPosition++;

//            HeaderColumn.Add("Order_Date", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата платежу";

//            startHeaderPosition++;

//            //HeaderColumn.Add("Invoice_Num", startHeaderPosition);
//            //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            //cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер накладної";

//            //startHeaderPosition++;

//            //HeaderColumn.Add("Invoice_Date", startHeaderPosition);
//            //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            //cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата накладної";

//            //startHeaderPosition++;

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;
//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("CreditPrice", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//            //startHeaderPosition++;

//            //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//            //cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            //cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//            //cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//            //HeaderColumn.Add("EndDebit", startHeaderPosition);
//            //cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//            //startHeaderPosition++;

//            //HeaderColumn.Add("EndCredit", startHeaderPosition);
//            //cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//            //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["A:A"].ColumnWidth = 15;
//            cells["B:B"].ColumnWidth = 70;
//            cells["C:C"].ColumnWidth = 15;
//            cells["C" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//            #endregion

//            #region Loop body

//            int contractorId = 0;
//            string account = "";
//            int startContractor = currentPosition;
//            int sumPosition = 0;

//            Func<int, int, int, int> WriteContractor = (sourceId, currentPos, _contractorId) =>
//            {
//                int insidePos = currentPos;
//                int _orderId = 0;
//                int creditRecCount = 0;

//                //cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].NumberFormat = "@";
//                //cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].Value = orderSource[sourceId].ContractorSrn.ToString();
//                cells[vsS[HeaderColumn["ContractorName"] - 1] + insidePos].Value = orderSource[sourceId].ContractorName;
//                //cells[vsS[HeaderColumn["StartDebit"] - 1] + insidePos].Value = orderSource[sourceId].StartDebit;
//                //cells[vsS[HeaderColumn["StartCredit"] - 1] + insidePos].Value = orderSource[sourceId].StartCredit;
//                //cells[vsS[HeaderColumn["EndDebit"] - 1] + insidePos].Value = orderSource[sourceId].EndDebit;
//                //cells[vsS[HeaderColumn["EndCredit"] - 1] + insidePos].Value = orderSource[sourceId].EndCredit;
//                //
//                var DebitInfo = orderSource.AsEnumerable()
//                                 .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 1)
//                                 .OrderBy(o => o.OrderId);

//                var CreditInfo = orderSource.AsEnumerable()
//                                 .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 2)
//                                 .OrderBy(o => o.OrderId);

//                if (DebitInfo.Count() > 0)
//                {
//                    foreach (var item in DebitInfo)
//                    {
//                        cells[vsS[HeaderColumn["Payment_Document"] - 1] + insidePos].Value = item.Payment_Document;
//                        cells[vsS[HeaderColumn["Payment_Date"] - 1] + insidePos].Value = item.Payment_Date;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + insidePos].Value = item.PeriodPrice;

//                        if ((int)item.AccountId > 0)
//                        {
//                            account = "DebitAccount" + item.AccountId.ToString();
//                            cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//                        }

//                        insidePos++;
//                    }
//                }

//                if (CreditInfo.Count() > 0)
//                {
//                    //insidePos = (currentPos - 1);
//                    insidePos = currentPos;
//                    foreach (var item in CreditInfo)
//                    {
//                        if (_orderId != (int)item.OrderId)
//                        {
//                            _orderId = (int)item.OrderId;
//                            insidePos++;
//                            creditRecCount++;
//                        }

//                        cells[vsS[HeaderColumn["Order_Num"] - 1] + insidePos].Value = item.Payment_Document;
//                        cells[vsS[HeaderColumn["Order_Date"] - 1] + insidePos].Value = item.Payment_Date;
//                        //cells[vsS[HeaderColumn["Invoice_Num"] - 1] + insidePos].Value = item.Invoice_Num;
//                        //cells[vsS[HeaderColumn["Invoice_Date"] - 1] + insidePos].Value = item.Invoice_Date;


//                        if ((int)item.AccountId > 0)
//                        {
//                            account = "CreditAccount" + item.AccountId.ToString();
//                            cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//                        }

//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + insidePos].Formula = SetFormula(vsS[HeaderColumn["Order_Date"]], insidePos, vsS[HeaderColumn["CreditPrice"] - 2], insidePos, "SUM");
//                    }

//                }

//                int recCount = DebitInfo.Count() > creditRecCount ? DebitInfo.Count() : creditRecCount;
//                return (currentPos + (recCount > 0 ? recCount : 1));
//            };

//            for (int i = 0; i < orderSource.Count; i++)
//            {
//                if (contractorId != (int)orderSource[i].Contractor_Id)
//                {
//                    contractorId = (int)orderSource[i].Contractor_Id;

//                    if (i > 0)
//                    {
//                        //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//                        cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//                        cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//                        if (DebitAcc.Count > 0)
//                        {
//                            foreach (var dict in DebitAcc)
//                            {
//                                sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        if (CreditAcc.Count > 0)
//                        {
//                            foreach (var dict in CreditAcc)
//                            {
//                                sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                                cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                            }
//                        }
//                        currentPosition++;
//                        startContractor = currentPosition;
//                    }

//                    currentPosition = WriteContractor(i, currentPosition, contractorId) + 1;
//                }
//                //currentPosition++;
//            }

//            #endregion

//            #region Finally step output

//            //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//            currentPosition++;

//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//            cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["B" + currentPosition].Value = "Всього";
//            cells["C" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            ////SALDO START
//            //cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Merge();
//            //cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Interior.Color = Color.LightGreen;
//            //cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Font.Bold = true;
//            //cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Value = "Сальдо на початок періоду";
//            //cells["C" + startSaldoPosition].Value = model.AsEnumerable().FirstOrDefault(srch => srch.Contractor_Id == 1 && srch.StartDebit > 0).StartDebit;

//            ////SALDO END
//            //cells["A" + (currentPosition + 1) + ":" + "B" + (currentPosition + 1)].Merge();
//            //cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Interior.Color = Color.LightGreen;
//            //cells["A" + currentPosition + ":" + "B" + currentPosition].Font.Bold = true;
//            //cells["A" + (currentPosition + 1) + ":" + "B" + (currentPosition + 1)].Value = "Сальдо на кінець періоду";
//            //cells["C" + (currentPosition + 1)].Value = model.AsEnumerable().FirstOrDefault(srch => srch.Contractor_Id == 1 && srch.EndDebit > 0).EndDebit;

//            if (DebitAcc.Count > 0)
//                cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            if (CreditAcc.Count > 0)
//                cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            //cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//            //cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//            //cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//            //cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//            cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 1).Sum(x => x.PeriodPrice);
//            cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 2).Sum(x => x.PeriodPrice);

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = model.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//                }
//            }


//            //SALDO START
//            cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Merge();
//            cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Interior.Color = Color.LightGreen;
//            cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Font.Bold = true;
//            cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Value = "Сальдо на початок періоду";
//            cells["C" + startSaldoPosition].Value = model.AsEnumerable().FirstOrDefault(srch => srch.Contractor_Id == 1 && srch.StartDebit > 0).StartDebit;

//            //SALDO END
//            cells["A" + (currentPosition + 1) + ":" + "B" + (currentPosition + 1)].Merge();
//            cells["A" + startSaldoPosition + ":" + "B" + startSaldoPosition].Interior.Color = Color.LightGreen;
//            cells["A" + currentPosition + ":" + "B" + currentPosition].Font.Bold = true;
//            cells["A" + (currentPosition + 1) + ":" + "B" + (currentPosition + 1)].Value = "Сальдо на кінець періоду";
//            cells["C" + (currentPosition + 1)].Value = model.AsEnumerable().FirstOrDefault(srch => srch.Contractor_Id == 1 && srch.EndDebit > 0).EndDebit;
//            #endregion

//            #region Report caption and froze row

//            string FlagType = "";

           

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            string subName = "Касова книга";
//            cells["A" + captionPosition].Value = String.Format("Касова книга за період з {2} по {3}", FlagType, subName, startDate, endDate);
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            worksheet.WindowInfo.ScrollRow = 0;
//            worksheet.WindowInfo.SplitRows = startPosition + 2;

//            worksheet.WindowInfo.FreezePanes = true;

//            #endregion

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + string.Format("ОСВ касова книга за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + string.Format("ОСВ касова книга за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//        }



//        //public void PrintMSTrialBalanceByAccounts(IEnumerable<MSTrialBalanceByAccountsDTO> model, DateTime startDate, DateTime endDate)
//        //{            
//        //    #region MyRegion
            
           
//        //    //var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"Templates\TemplateWithStamp.xls");
//        //    //if (model.Count() == 0)
//        //    //{
//        //    //    MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//        //    //    return false;
//        //    //}
//        //    //List<MSTrialBalanceByAccountsDTO> rowData = model.ToList();
//        //    //// если тут проблема со строкой, то скорее всего засунули контрагента с null єдрпо
//        //    //var orderSource = model.AsEnumerable()
//        //    //                    .OrderBy(s => s.ContractorSrn)
//        //    //                    .ThenBy(i => i.Contractor_Id)
//        //    //                    .ThenBy(w => w.FlagDebitCredit).ToList();
//        //    //                    //.CopyToDataTable();

  
//        //    //var worksheet = workbook.Worksheets[0];
//        //    //var cells = worksheet.Cells;

//        //    //Dictionary<int, string> DebitAcc = new Dictionary<int, string>();
//        //    //Dictionary<int, string> CreditAcc = new Dictionary<int, string>();
//        //    //Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//        //    //int startDebitAccount = 0;
//        //    //int startCreditAccount = 0;
//        //    //int endDebitAccount = 0;
//        //    //int endCreditAccount = 0;

//        //    //int captionPosition = 6;
//        //    //int startPosition = captionPosition + 1;
//        //    //int currentPosition = startPosition + 3;
//        //    //byte startHeaderPosition = 1;

//        //    //#region Generate report header

//        //    //var Debit_Accounts = orderSource.AsEnumerable().Where(c => c.FlagDebitCredit == 1).Select(c => new
//        //    //{
//        //    //    AccountId = c.AccountId,
//        //    //    AccountNum = c.AccountNum

//        //    //}).Distinct().OrderBy(c => c.AccountNum).ToList();

//        //    //foreach (var dict in Debit_Accounts)
//        //    //    DebitAcc.Add(dict.AccountId, dict.AccountNum);



//        //    //var Credit_Accounts = orderSource.AsEnumerable().Where(c => (int)c.FlagDebitCredit == 2).Select(c => new
//        //    //{
//        //    //    AccountNum = c.AccountNum,
//        //    //    AccountId = c.AccountId
//        //    //}).Distinct().OrderBy(c => c.AccountNum).ToList();

//        //    //foreach (var dict in Credit_Accounts)
//        //    //    CreditAcc.Add(dict.AccountId, dict.AccountNum);

//        //    //HeaderColumn.Add("ContractorSrn", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Код";

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("ContractorName", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Найменування";

//        //    //startHeaderPosition++;

//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//        //    //cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок періоду";

//        //    //HeaderColumn.Add("StartDebit", startHeaderPosition);
//        //    //cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("StartCredit", startHeaderPosition);
//        //    //cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//        //    //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Payment_Document", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер платежу";

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Payment_Date", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата платежу";

//        //    //startHeaderPosition++;

//        //    //if (DebitAcc.Count == 0)
//        //    //{
//        //    //    cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//        //    //    cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//        //    //    startHeaderPosition++;
//        //    //}
//        //    //else
//        //    //{
//        //    //    cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + DebitAcc.Count] + (startPosition + 1)].Merge();
//        //    //    cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З д-ту рах., в к-т рах.");
//        //    //    startDebitAccount = startHeaderPosition;
//        //    //    foreach (var debit_account in DebitAcc)
//        //    //    {
//        //    //        HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//        //    //        cells[startPosition + 1, startHeaderPosition - 1].Value = debit_account.Value;
//        //    //        startHeaderPosition++;
//        //    //    }
//        //    //    endDebitAccount = startHeaderPosition;
//        //    //}

//        //    //HeaderColumn.Add("DebitPrice", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по дебету";
//        //    //cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Order_Num", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер надходження";

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Order_Date", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата надходження";

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Invoice_Num", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Номер накладної";

//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("Invoice_Date", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Дата накладної";

//        //    //startHeaderPosition++;

//        //    //if (CreditAcc.Count == 0)
//        //    //{
//        //    //    cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 1)].Merge();
//        //    //    cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//        //    //    startHeaderPosition++;
//        //    //}
//        //    //else
//        //    //{
//        //    //    cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + CreditAcc.Count] + (startPosition + 1)].Merge();
//        //    //    cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("З к-та рах. в д-т рах.");
//        //    //    startCreditAccount = startHeaderPosition;
//        //    //    foreach (var credit_account in CreditAcc)
//        //    //    {
//        //    //        HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//        //    //        cells[startPosition + 1, startHeaderPosition - 1].Value = credit_account.Value;
//        //    //        startHeaderPosition++;
//        //    //    }
//        //    //    endCreditAccount = startHeaderPosition;
//        //    //}

//        //    //HeaderColumn.Add("CreditPrice", startHeaderPosition);
//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Всього по кредиту";
//        //    //cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (startPosition)].Interior.Color = Color.Azure;

//        //    //startHeaderPosition++;

//        //    //cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition] + startPosition].Merge();
//        //    //cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//        //    //cells[vsS[startHeaderPosition] + (startPosition + 1) + ":" + vsS[startHeaderPosition] + (startPosition + 2)].Merge();
//        //    //cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець періоду";

//        //    //HeaderColumn.Add("EndDebit", startHeaderPosition);
//        //    //cells[startPosition, startHeaderPosition - 1].Value = "Дебет";
//        //    //startHeaderPosition++;

//        //    //HeaderColumn.Add("EndCredit", startHeaderPosition);
//        //    //cells[startPosition, startHeaderPosition - 1].Value = "Кредит";

//        //    //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Interior.Color = Color.Beige;

//        //    //cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//        //    //cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//        //    //cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//        //    //cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//        //    //cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//        //    //cells["A:A"].ColumnWidth = 15;
//        //    //cells["B:B"].ColumnWidth = 70;
//        //    //cells["C:C"].ColumnWidth = 15;
//        //    //cells["C" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 15;

//        //    //#endregion

//        //    //#region Loop body

//        //    //int contractorId = 0;
//        //    //string account = "";
//        //    //int startContractor = currentPosition;
//        //    //int sumPosition = 0;

//        //    //Func<int, int, int, int> WriteContractor = (sourceId, currentPos, _contractorId) =>
//        //    //{
//        //    //    int insidePos = currentPos;
//        //    //    int _orderId = 0;
//        //    //    int creditRecCount = 0;

//        //    //    cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].NumberFormat = "@";
//        //    //    cells[vsS[HeaderColumn["ContractorSrn"] - 1] + insidePos].Value = orderSource[sourceId].ContractorSrn.ToString();
//        //    //    cells[vsS[HeaderColumn["ContractorName"] - 1] + insidePos].Value = orderSource[sourceId].ContractorName;
//        //    //    cells[vsS[HeaderColumn["StartDebit"] - 1] + insidePos].Value = orderSource[sourceId].StartDebit;
//        //    //    cells[vsS[HeaderColumn["StartCredit"] - 1] + insidePos].Value = orderSource[sourceId].StartCredit;
//        //    //    cells[vsS[HeaderColumn["EndDebit"] - 1] + insidePos].Value = orderSource[sourceId].EndDebit;
//        //    //    cells[vsS[HeaderColumn["EndCredit"] - 1] + insidePos].Value = orderSource[sourceId].EndCredit;
//        //    //    //
//        //    //    var DebitInfo = orderSource.AsEnumerable()
//        //    //                     .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 1)
//        //    //                     .OrderBy(o => o.OrderId);

//        //    //    var CreditInfo = orderSource.AsEnumerable()
//        //    //                     .Where(s => (int)s.Contractor_Id == _contractorId && (int)s.FlagDebitCredit == 2)
//        //    //                     .OrderBy(o => o.OrderId);

//        //    //    if (DebitInfo.Count() > 0)
//        //    //    {
//        //    //        foreach (var item in DebitInfo)
//        //    //        {
//        //    //            cells[vsS[HeaderColumn["Payment_Document"] - 1] + insidePos].Value = item.Payment_Document;
//        //    //            cells[vsS[HeaderColumn["Payment_Date"] - 1] + insidePos].Value = item.Payment_Date;
//        //    //            cells[vsS[HeaderColumn["DebitPrice"] - 1] + insidePos].Value = item.PeriodPrice;

//        //    //            if ((int)item.AccountId > 0)
//        //    //            {
//        //    //                account = "DebitAccount" + item.AccountId.ToString();
//        //    //                cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//        //    //            }

//        //    //            insidePos++;
//        //    //        }
//        //    //    }

//        //    //    if (CreditInfo.Count() > 0)
//        //    //    {
//        //    //        //insidePos = (currentPos - 1);
//        //    //        insidePos = currentPos;
//        //    //        foreach (var item in CreditInfo)
//        //    //        {
//        //    //            if (_orderId != (int)item.OrderId)
//        //    //            {
//        //    //                _orderId = (int)item.OrderId;
//        //    //                insidePos++;
//        //    //                creditRecCount++;
//        //    //            }

//        //    //            cells[vsS[HeaderColumn["Order_Num"] - 1] + insidePos].Value = item.Payment_Document;
//        //    //            cells[vsS[HeaderColumn["Order_Date"] - 1] + insidePos].Value = item.Payment_Date;
//        //    //            cells[vsS[HeaderColumn["Invoice_Num"] - 1] + insidePos].Value = item.Invoice_Num;
//        //    //            cells[vsS[HeaderColumn["Invoice_Date"] - 1] + insidePos].Value = item.Invoice_Date;


//        //    //            if ((int)item.AccountId > 0)
//        //    //            {
//        //    //                account = "CreditAccount" + item.AccountId.ToString();
//        //    //                cells[vsS[HeaderColumn[account] - 1] + insidePos].Value = item.PeriodPrice;
//        //    //            }

//        //    //            cells[vsS[HeaderColumn["CreditPrice"] - 1] + insidePos].Formula = SetFormula(vsS[HeaderColumn["Invoice_Date"]], insidePos, vsS[HeaderColumn["CreditPrice"] - 2], insidePos, "SUM");
//        //    //        }

//        //    //    }

//        //    //    int recCount = DebitInfo.Count() > creditRecCount ? DebitInfo.Count() : creditRecCount;
//        //    //    return (currentPos + (recCount > 0 ? recCount : 1));
//        //    //};

//        //    //for (int i = 0; i < orderSource.Count; i++)
//        //    //{
//        //    //    if (contractorId != (int)orderSource[i].Contractor_Id)
//        //    //    {
//        //    //        contractorId = (int)orderSource[i].Contractor_Id;

//        //    //        if (i > 0)
//        //    //        {
//        //    //            cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//        //    //            cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//        //    //            cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//        //    //            cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//        //    //            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//        //    //            cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//        //    //            cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//        //    //            if (DebitAcc.Count > 0)
//        //    //            {
//        //    //                foreach (var dict in DebitAcc)
//        //    //                {
//        //    //                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//        //    //                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//        //    //                }
//        //    //            }
//        //    //            if (CreditAcc.Count > 0)
//        //    //            {
//        //    //                foreach (var dict in CreditAcc)
//        //    //                {
//        //    //                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//        //    //                    cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//        //    //                }
//        //    //            }
//        //    //            currentPosition++;
//        //    //            startContractor = currentPosition;
//        //    //        }

//        //    //        currentPosition = WriteContractor(i, currentPosition, contractorId) + 1;
//        //    //    }
//        //    //    //currentPosition++;
//        //    //}

//        //    //#endregion

//        //    //#region Finally step output

//        //    //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//        //    //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.Beige;
//        //    //cells[vsS[HeaderColumn["DebitPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;
//        //    //cells[vsS[HeaderColumn["CreditPrice"] - 1] + (startContractor) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + (currentPosition - 1)].Interior.Color = Color.Azure;

//        //    //cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//        //    //cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["DebitPrice"] - 1], startContractor, vsS[HeaderColumn["DebitPrice"] - 1], currentPosition - 1, "SUM");
//        //    //cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["CreditPrice"] - 1], startContractor, vsS[HeaderColumn["CreditPrice"] - 1], currentPosition - 1, "SUM");

//        //    //if (DebitAcc.Count > 0)
//        //    //{
//        //    //    foreach (var dict in DebitAcc)
//        //    //    {
//        //    //        sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//        //    //        cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//        //    //    }
//        //    //}

//        //    //if (CreditAcc.Count > 0)
//        //    //{
//        //    //    foreach (var dict in CreditAcc)
//        //    //    {
//        //    //        sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//        //    //        cells[vsS[sumPosition - 1] + currentPosition].Formula = SetFormula(vsS[sumPosition - 1], startContractor, vsS[sumPosition - 1], currentPosition - 1, "SUM");
//        //    //    }
//        //    //}
//        //    //cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + (currentPosition + 1)].Borders.LineStyle = LineStyle.Continous;
//        //    //currentPosition++;

//        //    //#endregion

//        //    //#region Result summary

//        //    //cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.LightGreen;
//        //    //cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//        //    //cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//        //    //cells["B" + currentPosition].Value = "Всього";
//        //    //cells["C" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//        //    //cells[vsS[HeaderColumn["StartDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//        //    //cells[vsS[HeaderColumn["EndDebit"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//        //    //if (DebitAcc.Count > 0)
//        //    //    cells[vsS[HeaderColumn["DebitAccount" + DebitAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//        //    //if (CreditAcc.Count > 0)
//        //    //    cells[vsS[HeaderColumn["CreditAccount" + CreditAcc.Keys.First()] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//        //    //cells[vsS[HeaderColumn["StartDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartDebit"] - 1], currentPosition - 1, "SUM");
//        //    //cells[vsS[HeaderColumn["EndDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndDebit"] - 1], currentPosition - 1, "SUM");
//        //    //cells[vsS[HeaderColumn["StartCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["StartCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["StartCredit"] - 1], currentPosition - 1, "SUM");
//        //    //cells[vsS[HeaderColumn["EndCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["EndCredit"] - 1], currentPosition - 1, "SUM");

//        //    //cells[vsS[HeaderColumn["DebitPrice"] - 1] + currentPosition].Value = rowData.AsEnumerable().Where(w => w.FlagDebitCredit == 1).Sum(x => x.PeriodPrice);
//        //    //cells[vsS[HeaderColumn["CreditPrice"] - 1] + currentPosition].Value = rowData.AsEnumerable().Where(w => w.FlagDebitCredit == 2).Sum(x => x.PeriodPrice);

//        //    //if (DebitAcc.Count > 0)
//        //    //{
//        //    //    foreach (var dict in DebitAcc)
//        //    //    {
//        //    //        sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//        //    //        cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//        //    //    }
//        //    //}
//        //    //if (CreditAcc.Count > 0)
//        //    //{
//        //    //    foreach (var dict in CreditAcc)
//        //    //    {
//        //    //        sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//        //    //        cells[vsS[sumPosition - 1] + currentPosition].Value = rowData.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == dict.Key).Sum(x => x.PeriodPrice);
//        //    //    }
//        //    //}

//        //    //#endregion

//        //    //#region Report caption and froze row

//        //    //cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//        //    //string subName = "Розрахунки з постачальниками та підрядниками";
//        //    //cells["A" + captionPosition].Value = String.Format("Рахунок {0} \"{1}\" станом за період з {2} по {3}", FlagType, subName, startDate, endDate);
//        //    //cells["A" + captionPosition].Font.Bold = true;
//        //    //cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//        //    //cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//        //    //worksheet.WindowInfo.ScrollRow = 0;
//        //    //worksheet.WindowInfo.SplitRows = startPosition + 2;

//        //    //worksheet.WindowInfo.FreezePanes = true;

//        //    //#endregion

//        //    //PrintSignatures(cells, currentPosition + 3);
            

//        //    //try
//        //    //{     
//        //    //    workbook.SaveAs(GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls", FileFormat.Excel8);
//        //    //    Process process = new Process();
//        //    //    process.StartInfo.Arguments = "\"" + GeneratedReportsDir + string.Format("ОСВ по контрагентам за період з {0} по {1}", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls" + "\"";
//        //    //    process.StartInfo.FileName = "Excel.exe";
//        //    //    process.Start();

//        //    //    return true;

//        //    //}
//        //    //catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        //    //catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        //    #endregion
//        //}

//        public bool GetMSReconciliation(DateTime startDate, DateTime endDate, int contractorId, string PFlag3, string PFlag4, string accountNum, string contractorName, string contractorSrnCode)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("Start_Date", startDate),
//                    new FbParameter("End_Date", endDate),
//                    new FbParameter("Contractor", contractorId),
//                    new FbParameter("PFlag3", PFlag3),
//                    new FbParameter("PFlag4", PFlag4)
//                };

//            string procName = @"select * from ""ReportMSReconciliation""(@Start_Date, @End_Date, @Contractor, @PFlag3, @PFlag4)";

//            var dataSource = mapper.Map<IEnumerable<MsReconciliation>, List<MsReconciliationDTO>>(msReconciliation.SQLExecuteProc(procName, Parameters));

//            return PrintMSReconciliation(dataSource, startDate, endDate, accountNum.Replace('/', '.'), contractorName, contractorSrnCode);
//        }

//        private bool PrintMSReconciliation(IEnumerable<MsReconciliationDTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, string contractorName, string contractorSrnCode)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsReconciliationDTO> rowData = dataSource.ToList();
            
//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSReconciliationReport.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            string matServ = "";
//            switch (accountNum)
//            {
//                case "631":
//                    matServ = "матеріали";
//                    break;
//                case "63":
//                    matServ = "послуги";
//                    break;
//                case "631, 63":
//                    matServ = "матеріали та послуги";
//                    break;
//            }

//            cells["A7"].Value += "за " + matServ;
//            cells["A8"].Value += startDate.ToShortDateString() + " - " + endDate.ToShortDateString();
//            cells["A11"].Value = contractorName + " " + contractorSrnCode;
//            cells["G14"].Value = contractorName;

//            int currentPosition, startPosition;
//            currentPosition = startPosition = 17;

//            decimal StartDebit = rowData[0].StartDebit ?? 0.00m;
//            decimal StartCredit = rowData[0].StartCredit ?? 0.00m;
//            decimal EndDebit = rowData[0].EndDebit ?? 0.00m;
//            decimal EndCredit = rowData[0].EndCredit ?? 0.00m;

//            cells["E" + currentPosition].Value = StartDebit;
//            cells["F" + currentPosition].Value = StartCredit;
//            cells["E" + currentPosition + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;
//            currentPosition++;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells["A" + currentPosition].Value = i + 1;
//                cells["B" + currentPosition].Value = rowData[i].Order_Date;
//                cells["C" + currentPosition].Value = rowData[i].Invoice_Num;
//                cells["C" + currentPosition].WrapText = true;
//                cells["D" + currentPosition].Value = rowData[i].Purpose;
//                cells["E" + currentPosition].Value = rowData[i].Debit_Price;
//                cells["F" + currentPosition].Value = rowData[i].Credit_Price;

//                currentPosition++;
//            }

//            cells["A" + (startPosition + 1) + ":" + "A" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["C" + startPosition + ":" + "C" + currentPosition].HorizontalAlignment = HAlign.Left;

//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "C" + (currentPosition + 1)].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Обороти за період";
//            cells["E" + currentPosition].Formula = SetFormula("E", (startPosition + 1), "E", currentPosition - 1, "SUM");
//            cells["F" + currentPosition].Formula = SetFormula("F", (startPosition + 1), "F", currentPosition - 1, "SUM");

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сальдо кінцеве";
//            cells["E" + currentPosition].Value = EndDebit;
//            cells["F" + currentPosition].Value = EndCredit;

//            cells["A" + startPosition + ":" + "H" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            cells["E" + startPosition + ":" + "F" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["E" + startPosition + ":" + "F" + currentPosition].NumberFormat = "### ### ##0.00";

//            cells["A" + (currentPosition - 1) + ":" + "H" + currentPosition].Font.Bold = true;
//            cells["E" + (currentPosition - 1) + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["F" + startPosition + ":" + "F" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Font.Italic = true;
            
//            double Sum = (double)((EndDebit > EndCredit) ? EndDebit : EndCredit);

//            cells["A" + currentPosition].Value = RuDateAndMoneyConverter.CurrencyToTxt(Math.Round(Sum, 2), true);

//            currentPosition += 2;

//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Merge();
//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Columns.WrapText = true;
//            cells["A" + currentPosition].Value = "Один екземпляр завіреного акту звірки просимо повернути протягом 10-ти днів ТОВ " +
//                                                 '"' + "НВФ " + '"' + "ТЕХВАГОНМАШ" + '"' + " за адресою: 39627, Полтавська обл., м. Кременчук, проспект Полтавський, 2-Д.\n" +
//                                                 "У випадку не повернення акту взаємних розрахунків протягом одного місяця, заборгованість визнається узгодженою.";

//            currentPosition += 5;

//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Головний бухгалтер";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "Головний бухгалтер";
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "ТОВ \"НВФ \"ТЕХВАГОНМАШ\"";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Value = contractorName;
//            cells["E" + currentPosition + ":" + "G" + currentPosition].WrapText = true;
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сергієнко Л.В._______________";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "_______________";
//            currentPosition++;
//            cells["B" + currentPosition].Value = "М.П.";
//            cells["E" + currentPosition].Value = "М.П.";

//            cells["A" + (currentPosition - 3) + ":" + "G" + (currentPosition - 1)].HorizontalAlignment = HAlign.Center;

//            PrintSignatures(cells, currentPosition + 3);

//            cells["D:D"].Columns.Hidden = ((MessageBox.Show("Відобразити дані про призначення платежу?", "Формування звіту", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes));
            
//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() +".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        public bool GetMSReconsiliation681_36(DateTime startDate, DateTime endDate, int contractorId, int accountId, string accountNum, string contractorName, string contractorSrnCode)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("ContractorId", contractorId),
//                    new FbParameter("AccountId", accountId)
//                };

//            string procName = @"select * from ""ReportReconciliationActBy681_36""(@StartDate, @EndDate, @ContractorId, @AccountId)";

//            var dataSource = mapper.Map<IEnumerable<MsReconciliation681_36>, List<MsReconciliation681_36DTO>>(msReconciliation681_36.SQLExecuteProc(procName, Parameters));



//            return PrintMSReconciliation681_36(dataSource, startDate, endDate, accountNum.Replace('/', '.'), contractorName, contractorSrnCode);
//        }

//        private bool PrintMSReconciliation681_36(IEnumerable<MsReconciliation681_36DTO> dataSource, DateTime startDate, DateTime endDate, string accountNum, string contractorName, string contractorSrnCode)
//        {
//            int recCount = dataSource.Count();
//            if (recCount == 0)
//                return false;

//            List<MsReconciliation681_36DTO> rowData = dataSource.ToList();



//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSReconciliationReport.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

            
//            cells["A7"].Value += accountNum + " за перiод";
//            cells["A8"].Value += startDate.ToShortDateString() + " - " + endDate.ToShortDateString();
//            cells["A11"].Value = contractorName + " " + contractorSrnCode;
//            cells["G14"].Value = contractorName;

//            int currentPosition, startPosition;
//            currentPosition = startPosition = 17;
                        
//            cells["E" + currentPosition].Value = rowData[0].DebitStart;
//            cells["F" + currentPosition].Value = rowData[0].CreditStart;
//            cells["E" + currentPosition + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;
//            currentPosition++;

//            for (int i = 0; i < rowData.Count; i++)
//            {
//                cells["A" + currentPosition].Value = i + 1;
//                cells["B" + currentPosition].Value = rowData[i].DocumentDate;
//                cells["C" + currentPosition].Value = rowData[i].DocumentName;
//                cells["C" + currentPosition].WrapText = true;
//                cells["D" + currentPosition].Value = rowData[i].Purpose;
                
//                if(rowData[i].FlagdebitCredit == 1)
//                    cells["E" + currentPosition].Value = rowData[i].PaymentPrice;
//                else
//                    cells["F" + currentPosition].Value = rowData[i].PaymentPrice;

//                currentPosition++;
//            }

//            cells["A" + (startPosition + 1) + ":" + "A" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["C" + startPosition + ":" + "C" + currentPosition].HorizontalAlignment = HAlign.Left;

//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "C" + (currentPosition + 1)].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Обороти за період";
//            cells["E" + currentPosition].Formula = SetFormula("E", (startPosition + 1), "E", currentPosition - 1, "SUM");
//            cells["F" + currentPosition].Formula = SetFormula("F", (startPosition + 1), "F", currentPosition - 1, "SUM");

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сальдо кінцеве";
//            cells["E" + currentPosition].Value = rowData[0].DebitEnd;
//            cells["F" + currentPosition].Value = rowData[0].CreditEnd;

//            cells["A" + startPosition + ":" + "H" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            cells["E" + startPosition + ":" + "F" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["E" + startPosition + ":" + "F" + currentPosition].NumberFormat = "### ### ##0.00";

//            cells["A" + (currentPosition - 1) + ":" + "H" + currentPosition].Font.Bold = true;
//            cells["E" + (currentPosition - 1) + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["F" + startPosition + ":" + "F" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Font.Italic = true;

//            double Sum = (double)((rowData[0].DebitEnd > rowData[0].CreditEnd) ? rowData[0].DebitEnd : rowData[0].CreditEnd);

//            cells["A" + currentPosition].Value = RuDateAndMoneyConverter.CurrencyToTxt(Math.Round(Sum, 2), true);

//            currentPosition += 2;

//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Merge();
//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Columns.WrapText = true;
//            cells["A" + currentPosition].Value = "Один екземпляр завіреного акту звірки просимо повернути протягом 10-ти днів ТОВ " +
//                                                 '"' + "НВФ " + '"' + "ТЕХВАГОНМАШ" + '"' + " за адресою: 39627, Полтавська обл., м. Кременчук, проспект Полтавський, 2-Д.\n" +
//                                                 "У випадку не повернення акту взаємних розрахунків протягом одного місяця, заборгованість визнається узгодженою.";

//            currentPosition += 5;

//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Головний бухгалтер";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "Представник";
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "ТОВ \"НВФ \"ТЕХВАГОНМАШ\"";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Value = contractorName;
//            cells["E" + currentPosition + ":" + "G" + currentPosition].WrapText = true;
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сергієнко Л.В._______________";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "_______________";
//            currentPosition++;
//            cells["B" + currentPosition].Value = "М.П.";
//            cells["E" + currentPosition].Value = "М.П.";

//            cells["A" + (currentPosition - 3) + ":" + "G" + (currentPosition - 1)].HorizontalAlignment = HAlign.Center;

//            //PrintSignatures(cells, currentPosition + 3);

//            cells["D:D"].Columns.Hidden = ((MessageBox.Show("Відобразити дані про призначення платежу?", "Формування звіту", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes));

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        //--------------------------------------
//        public IEnumerable<CalcWithBuyersShortReportDTO> GetCWBShortForSaldo(DateTime startDate, DateTime endDate, int accountId, string accountNum)
//        {
//            string defaultDate = "31.12.2014";

//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                    new FbParameter("SelectionDate", defaultDate),
//                    new FbParameter("PurposeAccountId", accountId)
//                };

//            string procName = @"select * from ""CWBShortReportProc""(@StartDate, @EndDate, @PurposeAccountId, @SelectionDate)";

//            return mapper.Map<IEnumerable<CalcWithBuyersShortReport>, List<CalcWithBuyersShortReportDTO>>(calcWithBuyersSaldo.SQLExecuteProc(procName, Parameters));
//        }

//        public bool PrintMSReconciliation362_681(IEnumerable<BankPaymentsInfoDTO> bp, IEnumerable<CalcWithBuyersInfoDTO> calcWithBuyers, IEnumerable<CalcWithBuyersShortReportDTO> calcWithBuyersSaldo, DateTime startDate, DateTime endDate)
//        {
//            if (bp.Count() == 0 && calcWithBuyers.Count() == 0)
//                return false;
  
//            List<BankPaymentsInfoDTO> rowDataBP = bp.ToList();
//            List<CalcWithBuyersInfoDTO> rowDataCalcBuyers = calcWithBuyers.ToList();
//            List<CalcWithBuyersShortReportDTO> rowDataSaldo = calcWithBuyersSaldo.ToList();

//            var workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MSReconciliationReport.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;


//            cells["A7"].Value += rowDataBP[0].BankAccountNum + " за перiод";
//            cells["A8"].Value += startDate.ToShortDateString() + " - " + endDate.ToShortDateString();
//            cells["A11"].Value = rowDataCalcBuyers[0].ContractorName + " " + rowDataCalcBuyers[0].ContractorSrn;
//            cells["G14"].Value = rowDataCalcBuyers[0].ContractorName;

//            int currentPosition, startPosition;
//            currentPosition = startPosition = 17;

//            cells["E" + currentPosition].Value = 0;
//            cells["F" + currentPosition].Value = 0;
//            cells["E" + currentPosition + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;
//            cells["E" + currentPosition].Value = rowDataSaldo[0].StartDebit;
//            cells["F" + currentPosition].Value = rowDataSaldo[0].StartCredit;
//            cells["F" + currentPosition].Interior.Color = Color.LightGreen;
//            currentPosition++;

//            for (int i = 0; i < rowDataCalcBuyers.Count; i++)
//            {
//                cells["A" + currentPosition].Value = i + 1;
//                cells["B" + currentPosition].Value = rowDataCalcBuyers[i].DocumentDate;
//                cells["C" + currentPosition].Value = rowDataCalcBuyers[i].DocumentName;
//                cells["C" + currentPosition].WrapText = true;
//                //cells["D" + currentPosition].Value = rowDataCalcBuyers[i].PurposeNum;
//                cells["E" + currentPosition].Value = rowDataCalcBuyers[i].PaymentDebit;
//                cells["F" + currentPosition].Value = rowDataCalcBuyers[i].PaymentCredit;
//                //if (rowDataCalcBuyers[i].FlagdebitCredit == 1)
//                //    cells["E" + currentPosition].Value = rowDataCalcBuyers[i].PaymentVatPrice;
//                //else
//                  //  cells["F" + currentPosition].Value = rowDataCalcBuyers[i].PaymentVatPrice;

//                currentPosition++;
//            }
//            for (int i = 0; i < rowDataBP.Count; i++)
//            {
//                cells["A" + currentPosition].Value = currentPosition + 1;
//                cells["B" + currentPosition].Value = rowDataBP[i].Payment_Date;
//                cells["C" + currentPosition].Value = rowDataBP[i].Payment_Document;
//                cells["C" + currentPosition].WrapText = true;
//                cells["D" + currentPosition].Value = rowDataBP[i].Purpose;
//               // cells["E" + currentPosition].Value = rowDataBP[i].;
//                cells["F" + currentPosition].Value = rowDataBP[i].DebitPrice;
//                //if (rowDataCalcBuyers[i].FlagdebitCredit == 1)
//                //    cells["E" + currentPosition].Value = rowDataCalcBuyers[i].PaymentVatPrice;
//                //else
//               // cells["F" + currentPosition].Value = rowDataCalcBuyers[i].PaymentVatPrice;

//                currentPosition++;
//            }



//            cells["A" + (startPosition + 1) + ":" + "A" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["B" + startPosition + ":" + "B" + currentPosition].HorizontalAlignment = HAlign.Center;
//            cells["C" + startPosition + ":" + "C" + currentPosition].HorizontalAlignment = HAlign.Left;

//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "C" + (currentPosition + 1)].HorizontalAlignment = HAlign.Center;
//            cells["A" + currentPosition].Value = "Обороти за період";
//            cells["E" + currentPosition].Formula = SetFormula("E", (startPosition), "E", currentPosition - 1, "SUM");
//            cells["F" + currentPosition].Formula = SetFormula("F", (startPosition), "F", currentPosition - 1, "SUM");

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "C" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сальдо кінцеве";
//            cells["E" + currentPosition].Value = 0;
//            cells["F" + currentPosition].Formula = "=(E" + (currentPosition-1) + "-" + "F" + (currentPosition - 1) + ")";

//            cells["A" + startPosition + ":" + "H" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            cells["E" + startPosition + ":" + "F" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["E" + startPosition + ":" + "F" + currentPosition].NumberFormat = "### ### ##0.00";

//            cells["A" + (currentPosition - 1) + ":" + "H" + currentPosition].Font.Bold = true;
//            cells["E" + (currentPosition - 1) + ":" + "F" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["F" + startPosition + ":" + "F" + currentPosition].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//            currentPosition++;
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Merge();
//            cells["A" + currentPosition + ":" + "H" + currentPosition].Font.Italic = true;

//            double Sum = 8;//(double)((rowData[0].DebitEnd > rowData[0].CreditEnd) ? rowData[0].DebitEnd : rowData[0].CreditEnd);

//            cells["A" + currentPosition].Value = RuDateAndMoneyConverter.CurrencyToTxt(Math.Round(Sum, 2), true);

//            currentPosition += 2;

//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Merge();
//            cells["A" + currentPosition + ":" + "G" + (currentPosition + 3)].Columns.WrapText = true;
//            cells["A" + currentPosition].Value = "Один екземпляр завіреного акту звірки просимо повернути протягом 10-ти днів ТОВ " +
//                                                 '"' + "НВФ " + '"' + "ТЕХВАГОНМАШ" + '"' + " за адресою: 39627, Полтавська обл., м. Кременчук, проспект Полтавський, 2-Д.\n" +
//                                                 "У випадку не повернення акту взаємних розрахунків протягом одного місяця, заборгованість визнається узгодженою.";

//            currentPosition += 5;

//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Головний бухгалтер";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "Представник";
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "ТОВ \"НВФ \"ТЕХВАГОНМАШ\"";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Value = rowDataCalcBuyers[0].ContractorName;
//            cells["E" + currentPosition + ":" + "G" + currentPosition].WrapText = true;
//            currentPosition++;
//            cells["A" + currentPosition + ":" + "D" + currentPosition].Merge();
//            cells["A" + currentPosition].Value = "Сергієнко Л.В._______________";
//            cells["E" + currentPosition + ":" + "G" + currentPosition].Merge();
//            cells["E" + currentPosition].Value = "_______________";
//            currentPosition++;
//            cells["B" + currentPosition].Value = "М.П.";
//            cells["E" + currentPosition].Value = "М.П.";

//            cells["A" + (currentPosition - 3) + ":" + "G" + (currentPosition - 1)].HorizontalAlignment = HAlign.Center;

//            //PrintSignatures(cells, currentPosition + 3);

//            cells["D:D"].Columns.Hidden = ((MessageBox.Show("Відобразити дані про призначення платежу?", "Формування звіту", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes));

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт звіряння взаєморозрахунків за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
//        }

//        #endregion

//        #region TimeSheet report's


//        public void PrintTimeSheet(List<EmployeesInfoDTO> source, DateTime currentDate)
//        {

//            string templateName = " ";
//            int days = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

//            switch (days)
//            {
//                case 28:
//                    templateName = @"\Templates\TimeSheet28daysTemplate.xls";
//                    break;
//                case 29:
//                    templateName = @"\Templates\TimeSheet29daysTemplate.xls";
//                    break;
//                case 30:
//                    templateName = @"\Templates\TimeSheet30daysTemplate.xls";
//                    break;
//                case 31:
//                    templateName = @"\Templates\TimeSheet31daysTemplate.xls";
//                    break;
//            }

//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 8;
//            int weekendDays = 0;
//            string nameDepart = "";

//            IRange cells = Worksheet.Cells;
//            int recCount = source.Count();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();
//            int startPosition = 4, currentPosition = startPosition + 2;

        


//            Сells["X2"].Value = currentDate.Year;

//            cells["P2"].Value = currentDate.Month;

//            int currentColumn = 2;

//            for (int i = 1; i <= days; i++)
//            {
//                if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, i), CountryCode.UA) || DateSystem.IsWeekend(new DateTime(currentDate.Year, currentDate.Month, i), CountryCode.UA))
//                {
//                    weekendDays++;
//                    cells[vsS[currentColumn + i] + "5" + ":" + vsS[currentColumn + i] + "8"].Interior.Color = Color.DodgerBlue;
                
//                }
//            }

//            for (int i = 0; i < recCount; i++)
//            {
//                currentPosition++;
//            }
//            string FullNameWithoutProfession = "";
//            int depId = 0;


//            for (int i = 0; i < source.Count; i++)
//            {
//                //pin chief in excel
//                depId = source[i].DepartmentID.Value;

//                switch (depId)
//                {
//                    case 3://бухгалтерия
//                        Сells[source.Count + 15, 2].Value = "Сергієнко Л.В.";
//                        break;
//                    case 10://админист
//                        Сells[source.Count + 15, 2].Value = "Пархоменко Н. М.";
//                        break;
//                    case 14://технический
//                        Сells[source.Count + 15, 2].Value = "Дорошенко В. А. ";
//                        break;
//                    case 17://плановый
//                        Сells[source.Count + 15, 2].Value = "Пінчук М. М. ";
//                        break;
//                    case 18://маркетинг
//                        Сells[source.Count + 15, 2].Value = "Шалаєвський І. М.";
//                        break;
//                    case 20://материально технический
//                        Сells[source.Count + 15, 2].Value = "Уманець О. О. ";
//                        break;
//                    case 21://конструкторский
//                        Сells[source.Count + 15, 2].Value = "Малюсейко В. М. ";
//                        break;
//                    case 25://транспортный
//                        Сells[source.Count + 15, 2].Value = "Дементєєв Р. А. ";
//                        break;
//                    case 26://технический контороль ОТК
//                        Сells[source.Count + 15, 2].Value = "Лисенко О. В. ";
//                        break;
//                    case 28://энерго-механ
//                        Сells[source.Count + 15, 2].Value = "Зайцев В. І.";
//                        break;
//                    case 29://сто
//                        Сells[source.Count + 15, 2].Value = "Бондаренко В. В. ";
//                        break;
//                    case 30://охрана
//                        Сells[source.Count + 15, 2].Value = "Вуцело С. Г. ";
//                        break;
//                    case 32://комплексное обслуживание и ремонт
//                        Сells[source.Count + 15, 2].Value = "";
//                        break;
//                    case 39://столовая
//                        Сells[source.Count + 15, 2].Value = "Вороновська Н. Ф. ";
//                        break;
//                    case 43://информационные технологии
//                        Сells[source.Count + 15, 2].Value = "Шишкін О. М. ";
//                        break;
//                    case 46://технологическое бюро
//                        Сells[source.Count + 15, 2].Value = "Бобрівник В. В. ";
//                        break;
//                    case 51://инструментальное господар.
//                        Сells[source.Count + 15, 2].Value = "Ведмідь В. Ю. ";
//                        break;
//                    case 53://асуп
//                        Сells[source.Count + 15, 2].Value = "Телятник  М. С. ";
//                        break;
//                    case 54://системы автоматич проектирования
//                        Сells[source.Count + 15, 2].Value = "Горбенко С. Г. ";
//                        break;
//                    case 56://охрана труда
//                        Сells[source.Count + 15, 2].Value = "Баранник С. А. ";
//                        break;
//                    case 58://юрист
//                        Сells[source.Count + 15, 2].Value = "Яковенко Н. В. ";
//                        break;
//                    case 61://договорник
//                        Сells[source.Count + 15, 2].Value = "Дузік О. В. ";
//                        break;
//                    case 63://готовая продукция
//                        Сells[source.Count + 15, 2].Value = "Костиренко С. В.";
//                        break;
//                    case 65://лаборатория сварщиков
//                        Сells[source.Count + 15, 2].Value = "";//"Позябін В.І. ";
//                        break;
//                    case 66://научно техничес
//                        Сells[source.Count + 15, 2].Value = " ";
//                        break;
//                    case 68://господарс.
//                        Сells[source.Count + 15, 2].Value = "Вуцело С. Г.";
//                        break;
//                }

//                cells["" + startWith + ":" + startWith].Insert();
//                int indexOfChar = source[i].FullName.IndexOf('(');
//                FullNameWithoutProfession = source[i].FullName.Substring(0, indexOfChar);
//                int dopWeekend = 0;
//                currentColumn = 2;



               
//                for (int j = 1; j <= days; j++)
//                {

//                    // Использовать если нужно какой-то день сделать "особенным", где j - число месяца

//                    //if (j == 15)
//                    //{
//                    //    cells[vsS[currentColumn + j] + startWith].Value = "ВС";
//                    //    cells[vsS[currentColumn + j] + startWith].Font.Bold = true;
//                    //    cells[vsS[currentColumn + j] + "5" + ":" + vsS[currentColumn + j] + "8"].Interior.Color = Color.DodgerBlue;
//                    //    //cells[vsS[currentColumn + j + 1] + "5" + ":" + vsS[currentColumn + j + 1] + "8"].Interior.Color = Color.DodgerBlue;
//                    //    continue;
//                    //}

//                    //if (j == 30)
//                    //{
//                    //    cells[vsS[currentColumn + j] + startWith].Value = "8";
//                    //    cells[vsS[currentColumn + j] + startWith].Font.Bold = true;
//                    //    cells[vsS[currentColumn + j] + "5" + ":" + vsS[currentColumn + j] + "8"].Interior.Color = Color.Transparent;
//                    //    //cells[vsS[currentColumn + j] + 5 + ":" + vsS[currentColumn + j] + 8].Interior.Color = Color.DodgerBlue;
//                    //    //cells[vsS[currentColumn + j + 1] + "5" + ":" + vsS[currentColumn + j + 1] + "8"].Interior.Color = Color.DodgerBlue;
//                    //    continue;
//                    //}

//                    int startCell = j + 4;

//                    DateTime daysOfWeek = new DateTime(currentDate.Year, currentDate.Month, j);

                    

//                    if (daysOfWeek.DayOfWeek == DayOfWeek.Monday)
//                    {
//                        if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                        {
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                            // cells[vsS[currentColumn + j-1] + startWith].Value = "вMon-1";
//                        }
//                      //  else { cells[vsS[currentColumn + j] + startWith].Value = 100; }
//                    }
//                   // if (daysOfWeek.DayOfWeek == DayOfWeek.Monday && !(DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA)) && (daysOfWeek.DayOfWeek == DayOfWeek.Sunday) && (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA)))
//                      //  else   { cells[vsS[currentColumn + j] + startWith].Value = 100; }



//                    if (daysOfWeek.DayOfWeek == DayOfWeek.Tuesday)
//                    {
//                        if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                        {
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                            cells[vsS[currentColumn + j - 1] + startWith].Value =  7;//ВРЕМЕННО!
//                          //  cells[vsS[currentColumn + j - 1] + startWith].Interior.Color = Color.DodgerBlue;//ВРЕМЕННО!
//                        }
//                        else { cells[vsS[currentColumn + j] + startWith].Value = 8; }
//                    }


//                    if (daysOfWeek.DayOfWeek == DayOfWeek.Wednesday)
//                    {
//                        if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                        {
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                            cells[vsS[currentColumn + j - 1] + startWith].Value = 7;
//                        }
//                        else { cells[vsS[currentColumn + j] + startWith].Value = 8; }
//                    }

//                    if (daysOfWeek.DayOfWeek == DayOfWeek.Thursday)
//                    {
//                        if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                        {
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                            cells[vsS[currentColumn + j - 1] + startWith].Value = 7;
//                        }
//                        else { cells[vsS[currentColumn + j] + startWith].Value = 8; }

//                    }
//                    if (daysOfWeek.DayOfWeek == DayOfWeek.Friday)
//                    {
//                        if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                        {
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                            cells[vsS[currentColumn + j - 1] + startWith].Value = 7;
//                        }
//                        else { cells[vsS[currentColumn + j] + startWith].Value = 8; }

//                    }

//                        int curcolSut = 2;
//                        if ((daysOfWeek.DayOfWeek == DayOfWeek.Saturday) && (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA)))
//                        {
//                            if (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                            {
//                                cells[vsS[currentColumn + j] + startWith].Value =  "ВС";
//                                cells[vsS[currentColumn + j - 1] + startWith].Value = 7;

//                                cells[vsS[currentColumn + j + curcolSut] + startWith].Value = "BC";
//                                cells[vsS[currentColumn + j + curcolSut] + "5" + ":" + vsS[currentColumn + j + curcolSut] + "8"].Interior.Color = Color.DodgerBlue;
//                            }
//                            else { cells[vsS[currentColumn + j] + startWith].Value = 8; }
//                        }
//                        else
//                        {
//                            if (j < days - 1)
//                            {
//                                cells[vsS[currentColumn + j + curcolSut] + startWith].Value = 8;
//                            }
//                        }

//                        int curcolSund = 1;


//                        if (((daysOfWeek.DayOfWeek == DayOfWeek.Saturday)||(daysOfWeek.DayOfWeek == DayOfWeek.Sunday) )&& (DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA)))
//                        {
//                            dopWeekend += curcolSund;

//                            cells[vsS[currentColumn + j + curcolSund] + startWith].Value = "BC";

//                            cells[vsS[currentColumn + j + 1] + startWith].Value = "BC";
//                            cells[vsS[currentColumn + j + curcolSund] + "5" + ":" + vsS[currentColumn + j + curcolSund] + "8"].Interior.Color = Color.DodgerBlue;

//                        }
//                        else
//                        {
//                            //if (j < days - 1)
//                            //{
//                            //  cells[vsS[currentColumn + j + curcolSund] + startWith].Value = 8;
//                            //}
//                        }



//                        DateTime dt = new DateTime(currentDate.Year, currentDate.Month, j);
//                        int dtw = dt.Date.Day;

//                        DateTime startAtMonday = DateTime.Now.AddDays(DayOfWeek.Monday - DateTime.Now.DayOfWeek);
//                        bool dayH = DateSystem.IsPublicHoliday(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA);
//                        if ((dtw == 1) && (daysOfWeek.DayOfWeek == DayOfWeek.Monday) || (dayH = false))
//                            cells[vsS[currentColumn + j] + startWith].Value = 8;

//                        if ((dtw == 2) && (daysOfWeek.DayOfWeek == DayOfWeek.Monday) || (dayH = false))
//                            cells[vsS[currentColumn + j] + startWith].Value = 8;

//                            //2024 year won't work    
//                        //For december 2019 if need special weeked
//                        //if (currentDate.Month == 12)
//                        //{
//                        //    cells[vsS[currentColumn + 21] + startWith].Value = 8;
//                        //    cells[vsS[currentColumn + 21] + "5" + ":" + vsS[currentColumn + 21] + "8"].Interior.Color = Color.White;
//                        //    cells[vsS[currentColumn + 28] + startWith].Value = 8;
//                        //    cells[vsS[currentColumn + 28] + "5" + ":" + vsS[currentColumn + 28] + "8"].Interior.Color = Color.White;

//                        //    cells[vsS[currentColumn + 30] + startWith].Value = "ВС";
//                        //    cells[vsS[currentColumn + 30] + "5" + ":" + vsS[currentColumn + 30] + "8"].Interior.Color = Color.DodgerBlue;

//                        //    cells[vsS[currentColumn + 31] + startWith].Value = "ВС";
//                        //    cells[vsS[currentColumn + 31] + "5" + ":" + vsS[currentColumn + 31] + "8"].Interior.Color = Color.DodgerBlue;
//                        //}

//                        if (DateSystem.IsWeekend(new DateTime(currentDate.Year, currentDate.Month, j), CountryCode.UA))
//                            cells[vsS[currentColumn + j] + startWith].Value =  "ВС";

//                        //if (DateSystem.IsWeekend(new DateTime(currentDate.Year, currentDate.Month, 28), CountryCode.UA))//ВРЕМЕННО!
//                        //    cells[vsS[currentColumn + 28] + startWith].Value = "НА";//ВРЕМЕННО!

//                    Сells["A" + startWith].EntireRow.AutoFit();
//                    Сells["A:BB"].Style.Font.Size = 11;

//                    Сells["A" + startWith].Value = FullNameWithoutProfession;

//                    Сells["B" + 3].Value = source[i].DepartmentName;
//                    Сells["B" + 3].Font.Bold = true;

//                    Сells["B" + startWith].Orientation = 0;
//                    Сells["B" + startWith].Value = source[i].AccountNumber;
//                    Сells["B" + 8].HorizontalAlignment = HAlign.Center;

//                    Сells["C" + startWith].WrapText = true;
//                    Сells["C" + startWith].Value = source[i].ProfessionName;


//                    // all days of working by employees
//                    Сells[vsS[days + 4] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 4].Formula = "=countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"<9\"" + ")";
                  
//                    //annual vacation by employees
//                    Сells[vsS[days + 6] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 6].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"В\"" +
//                      ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"В\"" +
//                        ")," + "\"\"" + ")";
                    
//                    //------------------
//                    Сells[vsS[days + 7] + startWith].Orientation = 0;
//                    //формулы для работы с макросами. Подсчет В,ВД,ТН

//                   // cells[startWith - 1, days + 16].Formula = "=SumVS( D" + startWith + ":" + vsS[days + 2] + startWith + "," + "BJ7" + ")"; // "=IF(" + vsS[days + 4] + startWith + "<>" + "\"\"" + " ," + vsS[days + 4] + startWith + "-" + vsS[days + 34] + startWith + "," + "\"\"" + ")";
//                  //  cells[startWith - 1, days + 34].Formula = "=SumVS( D" + startWith + ":" + vsS[days + 2] + startWith + "," + "BJ7" + ")";
//                  //  cells[startWith - 1, days + 16].Value=

//                    cells[startWith - 1, days + 7].Formula = "=IF(" + vsS[days + 6] + startWith +"<>"+ "\"\"" + " ," + vsS[days + 6] + startWith + "-" + vsS[days + 31] + startWith +","+"\"\""+ ")";
//                    cells[startWith - 1, days + 31].Formula = "=SumV( D" + startWith + ":" + vsS[days + 2] + startWith +","+"BK7"+")";

//                    cells[startWith - 1, days + 9].Formula = "=IF(" + vsS[days + 8] + startWith + "<>" + "\"\"" + " ," + vsS[days + 8] + startWith + "-" + vsS[days + 32] + startWith + "," + "\"\"" + ")";
//                    cells[startWith - 1, days + 32].Formula = "=SumTN( D" + startWith + ":" + vsS[days + 2] + startWith + "," + "BM7" + ")";

//                    cells[startWith - 1, days + 13].Formula = "=IF(" + vsS[days + 12] + startWith + "<>" + "\"\"" + " ," + vsS[days + 12] + startWith + "-" + vsS[days + 33] + startWith + "," + "\"\"" + ")";
//                    cells[startWith - 1, days + 33].Formula = "=SumVD( D" + startWith + ":" + vsS[days + 2] + startWith + "," + "BL7" + ")";
//                    //    "=IF((" + vsS[days + 31] + startWith + "- " +vsS[days + 32] + startWith +
//                    //   ")" + ">0," + "(" + vsS[days + 31] + startWith + "- " + vsS[days + 32] + startWith + ")," + "\"\"" + ")";

//               /*     cells[startWith - 1, days + 31].Formula = "=CountCellsByColor( D" + startWith + ":" + vsS[days + 2] + startWith + "," + "A1" + ")";
//                    cells[startWith - 1, days + 32].Formula =
//                   "=countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"<9\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ДД\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"СТ\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НА\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ТН\"" + ")+"+ 
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВП\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"УВ\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВД\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"С\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НД\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"Д\"" + ")+" +
//                   "countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"П\"" + ")";
//            */    //    ")";


//                    //--------------------
                    
//                    //temporary disability (sick)
//                    Сells[vsS[days + 8] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 8].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ТН\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ТН\"" + ")," + 0 + ")";

//                    //non-appearance with the permission of the administration
//                    Сells[vsS[days + 10] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 10].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НА\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НА\"" + ")," + 0 + ")";

//                    //non-attendance from the administration's initiative
//                    Сells[vsS[days + 11] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 11].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НД\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НД\"" + ")," + 0 + ")";

//                    //assignment   
//                    Сells[vsS[days + 12] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 12].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВД\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВД\"" + ")," + 0 + ")";

//                    //absenteeism
//                    Сells[vsS[days + 14] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 14].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"П\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"П\"" + ")," + 0 + ")";

//                    //short week
//                    Сells[vsS[days + 15] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 15].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"СТ\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"СТ\"" + ")," + 0 + ")";

//                    //weekend and holiday days
//                    //Сells[vsS[days + 16] + startWith].Orientation = 0;
//                    //cells[startWith - 1, days + 16].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВС\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"ВС\"" + ")," + "\"\"" + ")";

//                    // all days weekend of working by employees
//                    Сells[vsS[days + 16] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 16].Value = weekendDays + dopWeekend;//=SUM(" + vsS[(days + 16)] + 8 + ":" + vsS[(days + 17)] + (source.Count + 8) + ")"; //


//                    // total calendar days
//                    Сells[vsS[days + 17] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 17].Formula = "=counta( D" + startWith + ":" + vsS[days + 2] + startWith + ")";

//                    //hours worked
//                    Сells[vsS[days + 18] + startWith].Orientation = 0;
//                    cells[startWith - 1, days + 18].Formula = "=SUM( D" + startWith + ":" + vsS[days + 2] + startWith + ")";

//                    ////hours worked in holiday or weekend
//                    //Сells[vsS[days + 19] + startWith].Orientation = 0;
//                    //cells[startWith - 1, days + 19].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"РВ\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"РВ\"" + ")," + "\"\"" + ")";
//                    ////hours worked overdue
//                    //Сells[vsS[days + 20] + startWith].Orientation = 0;
//                    //cells[startWith - 1, days + 20].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НУ\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"НУ\"" + ")," + "\"\"" + ")";
//                    ////hours worked in night time
//                    //Сells[vsS[days + 21] + startWith].Orientation = 0;
//                    //cells[startWith - 1, days + 21].Formula = "=IF(countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"РН\"" + ")>0,countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"РН\"" + ")," + "\"\"" + ")";

//                    //part-time
//                    cells[startWith - 1, days + 26].Formula = "=IF(countif(" + vsS[days + 22] + startWith + " ," + "\"С\"" + ")>0,SUM(" + vsS[days + 4] + startWith + ")," + "\"\"" + ")";

//                    // worked part-time weekend
//                    cells[startWith - 1, days + 27].Formula = "=IF(countif(" + vsS[days + 22] + startWith + " ," + "\"С\"" + ")>0,SUM(" + vsS[days + 5] + startWith + ")," + "\"\"" + ")";

//                    // weekend part-time weekend and holiday
//                    cells[startWith - 1, days + 28].Formula = "=IF(countif(" + vsS[days + 22] + startWith + " ," + "\"С\"" + ")>0,SUM(" + vsS[days + 16] + startWith + ")," + "\"\"" + ")";

//                    // weekend part-time all day
//                    cells[startWith - 1, days + 29].Formula = "=IF(countif(" + vsS[days + 22] + startWith + " ," + "\"С\"" + ")>0,SUM(" + vsS[days + 17] + startWith + ")," + "\"\"" + ")";

//                    // weekend part-time all time
//                    cells[startWith - 1, days + 30].Formula = "=IF(countif(" + vsS[days + 22] + startWith + " ," + "\"С\"" + ")>0,SUM(" + vsS[days + 18] + startWith + ")," + "\"\"" + ")";


//                    //совмещение
//                    //Сells[vsS[days + 22] + startWith].Orientation = 0;
//                    //cells[startWith - 1, days + 22].Formula = "=countif( D" + startWith + ":" + vsS[days + 2] + startWith + " ," + "\"с\"" + ")";

//                    Сells[vsS[days + 5] + startWith].Orientation = 0;
//                    Сells[vsS[days + 7] + startWith].Orientation = 0;
//                    Сells[vsS[days + 9] + startWith].Orientation = 0;
//                    Сells[vsS[days + 11] + startWith].Orientation = 0;
//                    Сells[vsS[days + 12] + startWith].Orientation = 0;
//                    Сells[vsS[days + 13] + startWith].Orientation = 0;
//                    Сells[vsS[days + 15] + startWith].Orientation = 0;
//                    Сells[vsS[days + 16] + startWith].Orientation = 0;
//                    Сells[vsS[days + 17] + startWith].Orientation = 0;
//                    Сells[vsS[days + 18] + startWith].Orientation = 0;
//                    Сells[vsS[days + 19] + startWith].Orientation = 0;
//                    Сells[vsS[days + 20] + startWith].Orientation = 0;
//                    Сells[vsS[days + 21] + startWith].Orientation = 0;
//                    Сells[vsS[days + 22] + startWith].Orientation = 0;
//                    Сells[vsS[days + 23] + startWith].Orientation = 0;
//                    Сells[vsS[days + 24] + startWith].Orientation = 0;

//                    //style line in table
//                    cells[startWith - 1, j].Borders.LineStyle = LineStyle.None;
//                    cells[startWith - 1, 0].Borders.LineStyle = LineStyle.None;
//                    cells[startWith - 1, j + 22].Borders.LineStyle = LineStyle.None;
//                    cells[startWith - 1, j].Borders.LineStyle = LineStyle.Continuous;
//                    cells[startWith - 1, 0].Borders.LineStyle = LineStyle.Continuous;
//                    cells[startWith - 1, j + 22].Borders.LineStyle = LineStyle.Continuous;

//                    //bold text in number's month
//                    cells[startWith - 1, j + 2].Font.Bold = true;
//                    cells[startWith - 1, days - 2].Font.Bold = true;
//                }
//                //cells[startWith, days].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                //cells[startWith, days].Borders.LineStyle = LineStyle.Continous;

//                //calculation of days: where 7 hours, day off or holiday 
//                int previousDays = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

//                var lastDay = new DateTime(currentDate.Year, currentDate.Month, 1).AddMonths(1);
//                var lastDayqq = new DateTime(currentDate.Year, currentDate.Month, 1).AddMonths(1).AddDays(-1);
//                for (int n = 1; n <= previousDays; ++n)
//                {

//                    if ((DateSystem.IsPublicHoliday(lastDay, CountryCode.UA)))
//                    {
//                        if (((DateSystem.IsWeekend(lastDay, CountryCode.UA) == false)))
//                        {
//                            cells[vsS[currentColumn + previousDays] + startWith].Value = 7;
//                        }//????
//                        else { cells[vsS[currentColumn + previousDays] + startWith].Value = 7;// "ВC"; 
//                        }
//                    }

//                    else
//                    {
//                        if (((DateSystem.IsWeekend(lastDayqq, CountryCode.UA) == true)))
//                        {
//                            cells[vsS[currentColumn + previousDays] + startWith].Value = "ВC";
//                        }
//                        else { cells[vsS[currentColumn + previousDays] + startWith].Value = 8; }

//                        n = previousDays;

//                    }

//                }
               
//                Сells[source.Count + 8, days - 2].Value = "усього:";
//                //sum days everybody of working of employees
//                cells[source.Count + 8, days + 4].Formula = "=SUM(" + vsS[(days + 4)] + 8 + ":" + vsS[(days + 4)] + (source.Count + 8) + ")"; //строка,столбец

//                //sum weekend days by employees
//                cells[source.Count + 8, days + 5].Formula = "=IF(SUM(" + vsS[(days + 5)] + 8 + ":" + vsS[(days + 5)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 5)] + 8 + ":" + vsS[(days + 5)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum annual vacation by employees
//                cells[source.Count + 8, days + 6].Formula = "=IF(SUM(" + vsS[(days + 6)] + 8 + ":" + vsS[(days + 6)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 6)] + 8 + ":" + vsS[(days + 6)] + (source.Count + 8) + "))"; //строка,столбец

//                //------------------
//                cells[source.Count + 8, days + 7].Formula = "=IF(SUM(" + vsS[(days + 7)] + 8 + ":" + vsS[(days + 7)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 7)] + 8 + ":" + vsS[(days + 7)] + (source.Count + 8) + "))"; //строка,столбец
//                //------------------


//                //sum temporary disability (sick)
//                cells[source.Count + 8, days + 8].Formula = "=IF(SUM(" + vsS[(days + 8)] + 8 + ":" + vsS[(days + 8)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 8)] + 8 + ":" + vsS[(days + 8)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum days unclear without payment
//                cells[source.Count + 8, days + 10].Formula = "=IF(SUM(" + vsS[(days + 10)] + 8 + ":" + vsS[(days + 10)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 10)] + 8 + ":" + vsS[(days + 10)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum days with initiative administration
//                cells[source.Count + 8, days + 11].Formula = "=IF(SUM(" + vsS[(days + 11)] + 8 + ":" + vsS[(days + 11)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 11)] + 8 + ":" + vsS[(days + 11)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum assignment 
//                cells[source.Count + 8, days + 12].Formula = "=IF(SUM(" + vsS[(days + 12)] + 8 + ":" + vsS[(days + 12)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 12)] + 8 + ":" + vsS[(days + 12)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum others reasons
//                cells[source.Count + 8, days + 14].Formula = "=IF(SUM(" + vsS[(days + 14)] + 8 + ":" + vsS[(days + 14)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 14)] + 8 + ":" + vsS[(days + 14)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum part week
//                cells[source.Count + 8, days + 15].Formula = "=IF(SUM(" + vsS[(days + 15)] + 8 + ":" + vsS[(days + 15)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 15)] + 8 + ":" + vsS[(days + 15)] + (source.Count + 8) + "))"; //строка,столбец


//                //sum holiday and weekend everybody of working of employees
//                cells[source.Count + 8, days + 16].Formula = "=IF(SUM(" + vsS[(days + 16)] + 8 + ":" + vsS[(days + 16)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 16)] + 8 + ":" + vsS[(days + 16)] + (source.Count + 8) + "))"; //строка,столбец


//                //sum days in mounth everybody of working of employees
//                cells[source.Count + 8, days + 17].Formula = "=SUM(" + vsS[(days + 17)] + 8 + ":" + vsS[(days + 17)] + (source.Count + 8) + ")"; //строка,столбец

//                //sum ALL hours worked by employees
//                cells[source.Count + 8, days + 18].Formula = "=SUM(" + vsS[(days + 18)] + 8 + ":" + vsS[(days + 18)] + (source.Count + 8) + ")"; //строка,столбец

//                ////sum worked out time
//                //cells[source.Count + 8, days + 19].Formula = "=IF(SUM(" + vsS[(days + 19)] + 8 + ":" + vsS[(days + 19)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 19)] + 8 + ":" + vsS[(days + 19)] + (source.Count + 8) + "))"; //строка,столбец

//                ////sum overdue time
//                //cells[source.Count + 8, days + 20].Formula = "=IF(SUM(" + vsS[(days + 20)] + 8 + ":" + vsS[(days + 20)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 20)] + 8 + ":" + vsS[(days + 20)] + (source.Count + 8) + "))"; //строка,столбец

//                ////sum worked night time
//                //cells[source.Count + 8, days + 21].Formula = "=IF(SUM(" + vsS[(days + 21)] + 8 + ":" + vsS[(days + 21)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 21)] + 8 + ":" + vsS[(days + 21)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum worked part  time work days   "=IF(SUM(" + vsS[(days + 16)] + 8 + ":" + vsS[(days + 16)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 16)] + 8 + ":" + vsS[(days + 16)] + (source.Count + 8) + "))";
//                cells[source.Count + 9, days + 4].Formula = "=IF(SUM(" + vsS[(days + 26)] + 8 + ":" + vsS[(days + 26)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 26)] + 8 + ":" + vsS[(days + 26)] + (source.Count + 8) + "))"; //строка,столбец

//                //sum worked part-time weekend
//                cells[source.Count + 9, days + 5].Formula = "=IF(SUM(" + vsS[(days + 27)] + 8 + ":" + vsS[(days + 27)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 27)] + 8 + ":" + vsS[(days + 27)] + (source.Count + 8) +"))"; //строка,столбец

//                //sum worked part-time weekend and holiday
//                cells[source.Count + 9, days + 16].Formula ="=IF(SUM(" + vsS[(days + 28)] + 8 + ":" + vsS[(days + 28)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 28)] + 8 + ":" + vsS[(days + 28)] + (source.Count + 8) +"))"; //строка,столбец

//                //sum sum worked part-time all days
//                cells[source.Count + 9, days + 17].Formula ="=IF(SUM(" + vsS[(days + 29)] + 8 + ":" + vsS[(days + 29)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 29)] + 8 + ":" + vsS[(days + 29)] + (source.Count + 8) +"))"; //строка,столбец

//                //sum sum worked part-time all time
//                cells[source.Count + 9, days + 18].Formula ="=IF(SUM(" + vsS[(days + 30)] + 8 + ":" + vsS[(days + 30)] + (source.Count + 8) + ")=0," + "\"\"" + "," + "SUM(" + vsS[(days + 30)] + 8 + ":" + vsS[(days + 30)] + (source.Count + 8) +"))"; //строка,столбец

//                Сells[source.Count + 9, days - 2].Value = "за сумісництвом:";
//                //sum days everybody of working of employees
//                //cells[source.Count + 9, days + 4].Formula = "=SUM(" + vsS[(days + 4)] + 8 + ":" + vsS[(days + 4)] + (source.Count + 8) + ")"; //строка,столбец

//                Сells[source.Count + 10, 0].Value = "Вихідні і свята";
//                Сells[source.Count + 11, 0].Value = "Щорічна відпустка";
//                Сells[source.Count + 12, 0].Value = "Скорочений тиждень";
//                Сells[source.Count + 13, 0].Value = "Відпустка без";
//                Сells[source.Count + 14, 0].Value = "збереження з/п за";
//                Сells[source.Count + 15, 0].Value = "згодою сторін";
//                Сells[source.Count + 16, 0].Value = "Начальник Відділу";

//                cells[source.Count + 16, 0].Font.Bold = true;
//                Сells[source.Count + 10, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 11, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 12, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 13, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 14, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 15, 0].HorizontalAlignment = HAlign.Right;
//                Сells[source.Count + 16, 5].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                Сells[source.Count + 16, 6].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                Сells[source.Count + 16, 7].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                Сells[source.Count + 16, 8].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;

//                Сells[source.Count + 10, 1].Value = "ВC";
//                Сells[source.Count + 11, 1].Value = "В";
//                Сells[source.Count + 12, 1].Value = "СТ";
//                Сells[source.Count + 15, 1].Value = "НА";

//                Сells[source.Count + 10, 3].Value = "Тимчасова непрацездатність";
//                Сells[source.Count + 11, 3].Value = "Відпустка у зв'язку з пологами";
//                Сells[source.Count + 12, 3].Value = "Відпустка для догляду за дитиною";

//                Сells[source.Count + 10, 15].Value = "ТН";
//                Сells[source.Count + 11, 15].Value = "ВП";
//                Сells[source.Count + 12, 15].Value = "ДД";

//                Сells[source.Count + 10, 20].Value = "Учбова відпустка";
//                Сells[source.Count + 11, 20].Value = "Відрядження";
//                Сells[source.Count + 12, 20].Value = "За сумісництвом";

//                Сells[source.Count + 10, 27].Value = "УВ";
//                Сells[source.Count + 11, 27].Value = "ВД";
//                Сells[source.Count + 12, 27].Value = "С";

//                Сells[source.Count + 10, 35].Value = "Неявки з ініциативи адміністрації";
//                Сells[source.Count + 11, 35].Value = "Виконання держобов'язків";
//                Сells[source.Count + 12, 35].Value = "Простій";

//                Сells[source.Count + 10, 45].Value = "НД";
//                Сells[source.Count + 11, 45].Value = "Д";
//                Сells[source.Count + 12, 45].Value = "П";
//                cells["" + (startWith + source.Count) + ":" + (startWith + source.Count)].Delete();

                


//            }
//       //      cells["" + (startWith + source.Count) + ":" + (startWith + source.Count)].Insert();

//            try
//            {
//                for (int i = 0; i < source.Count; i++)
//                {
//                    nameDepart = source[i].DepartmentName;
//                }
//                // string homePath = Utils.HomePath + @"\\SERVER-TFS\Data\Табель обліку робочого часу\" + nameDepart + "\\";
//               // var pathToSaveFile = new DirectoryInfo(@"\\SERVER-TFS\Data\Табель обліку робочого часу\" + nameDepart + "\\");



//                //Workbook.SaveAs(homePath + "Табель обліку робочого часу  за " + ToMonthName(currentDate) + " " + nameDepart + ".xls", FileFormat.Excel8);

//                //Process process = new Process();
//                //process.StartInfo.Arguments = "\"" + homePath + "Табель обліку робочого часу  за " + ToMonthName(currentDate) + " " + nameDepart + ".xls" + "\"";

//                //process.StartInfo.FileName = "Excel.exe";
//                //process.Start();


//                string pathhhh = Utils.HomePath + @"\D:\";

//                string path = "";
//                string subpath = "";
//                path = Directory.Exists(@"D:\") ? @"D:\" : @"E:\";



//                string allpath = path + subpath + "\"";//@"D:\TimeSheet_" + currentDate.Year
//                Workbook.SaveAs(path + "Табель обліку робочого часу  за " + ToMonthName(currentDate) + " "+currentDate.Date.Year.ToString() + " року " + nameDepart + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + "Табель обліку робочого часу  за " + ToMonthName(currentDate) + " " + currentDate.Date.Year.ToString() + " року " + nameDepart + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();


//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }
//        public string ToMonthName( DateTime dateTime)
//        {
//            return CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(dateTime.Month);
//        }


////------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//        #endregion

//        #region AccountingInvoices report's

//        public void PrintAccountingInvoices(List<InvoicesDTO> sourceList)
//        {
            
//            string templateName = " ";
//          //  int days = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);


//            templateName = @"\Templates\AccountingInvoicesTemplate.xlsx";

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;



//            int count = 1;
//            int border = 0;
//            foreach (var item in sourceList)
//            {
//              cells[count, 0 ].Value = item.Month_Current;
//              cells[count, 1].Value = item.Month_Invoice;
//              cells[count, 2].Value = item.Invoice_Number;
//              cells[count, 3].Value = item.Contractor_Name;
//              cells[count, 4].Value = item.Tin;
//              cells[count, 5].Value = item.Price;
//              cells[count, 6].Value = item.Vat;
//              cells[count, 7].Value = item.Non_Taxable;
//              cells[count, 8].Value = item.Total_Price;
//              cells[count, 9].Value = item.Bal_Name;

//              cells[count, 0].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 1].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 2].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 3].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 4].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 5].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 6].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 7].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 8].Borders.LineStyle = LineStyle.Continous;
//              cells[count, 9].Borders.LineStyle = LineStyle.Continous;

//              border++;
//              count++;
               
//            }

//            try
//            {
//                string pathhhh = Utils.HomePath + @"\D:\";
//                string path = "";
//                string subpath = "";
//                path = @"D:\";
//                string allpath = path + subpath + "\"";//@"D:\TimeSheet_" + currentDate.Year
//                workbook.SaveAs(path + "Податковий облік" + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + "Податковий облік" + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }

//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public List<PaymentDTO> GetPayments(DateTime startDate, DateTime endDate)
//        {
            
//            //var rez = 

//            var result = (from bp in bankPayments.GetAll()
//                          join cc in contractors.GetAll() on bp.Contractor_Id equals cc.Id into ccc
//                          from cc in ccc.DefaultIfEmpty()
//                          join ac in accounts.GetAll() on bp.Bank_Account_Id equals ac.ID into accc
//                          from ac in accc.DefaultIfEmpty()
//                          join acc in accounts.GetAll() on bp.Purpose_Account_Id equals acc.ID into acccc
//                          from acc in acccc.DefaultIfEmpty()
//                          where (bp.Payment_Date >= startDate && bp.Payment_Date <= endDate && bp.Direction == -1 && ac.NUM.StartsWith("31"))
//                          select new PaymentDTO()
//                          { 
//                            Id = bp.Id,
//                            Contractor_Id = cc.Id,
//                            Contractor_Name = cc.Name,
//                            Contractor_Srn = cc.Srn,
//                            Invoice_Num = bp.Payment_Document,
//                            PaymentDate = bp.Payment_Date,
//                            Price = bp.Payment_Price,
//                            Purpose_Account = acc.NUM 
//                          }).OrderBy(c => c.Purpose_Account).ThenBy(c => c.Contractor_Id).ToList();
//            return result;

//            //var result = (from bp in bankPayments.GetAll()
//            //              join cc in contractors.GetAll() on bp.Contractor_Id equals cc.Id
//            //              join ac in accounts.GetAll() on bp.Bank_Account_Id equals ac.ID
//            //              where (bp.Payment_Date >= startDate && bp.Payment_Date <= endDate && bp.Direction == -1 && ac.NUM.StartsWith("31"))
//            //              select new PaymentDTO()
//            //              {
//            //                  Id = bp.Id,
//            //                  Contractor_Id = cc.Id,
//            //                  Contractor_Name = cc.Name,
//            //                  Contractor_Srn = cc.Srn,
//            //                  Invoice_Num = bp.Payment_Document,
//            //                  PaymentDate = bp.Payment_Date,
//            //                  Price = bp.Payment_Price,
//            //                  Purpose_Account = ac.NUM
//            //              }).OrderBy(c => c.Purpose_Account).ThenBy(c => c.Contractor_Id).ToList();
//            //return result;
            
//        }

//        public IEnumerable<BeginCreditDTO> GetBeginCredit(DateTime date)
//        {

//            FbParameter[] Parameters =
//                {
//                    new FbParameter("START_DATE", date.Date.ToShortDateString()),
//                    new FbParameter("Flag1", "1"),
//                    new FbParameter("Flag3", "1"),
//                    new FbParameter("Flag4", "1"),
//                    new FbParameter("PFLAG3", "15"),
//                    new FbParameter("PFLAG4", "16"),
                    
//                };

//            string procName = @"select * from ""GetBeginCreditProc""(@START_DATE,@Flag1, @Flag3, @Flag4, @PFLAG3, @PFLAG4)";

//            var dataSource = mapper.Map<IEnumerable<BeginCredit>, List<BeginCreditDTO>>(beginCredit.SQLExecuteProc(procName, Parameters)).Where(c => c.Begin_Credit != null).ToList();



//            //var dataSource = mapper.Map<IEnumerable<BeginCredit>, List<BeginCreditDTO>>(beginCredit.SQLExecuteProc(procName, Parameters)).Where(c => c.Contractor_Name != null).ToList();



//            return dataSource;
//        }

        


//        public List<ReportInvoiceDTO> GetInvoicesDuplicates(InvoicesDTO invoice)
//        {
//            invoice.Invoice_Number = invoice.Invoice_Number == null ? string.Empty : invoice.Invoice_Number;

           
//                var result = (from inv in invoices.GetAll()
//                              join con in contractors.GetAll() on inv.Contractor_Id equals con.Id
//                              where
//                                 inv.Month_Invoice == invoice.Month_Invoice
//                                 &&
//                                 inv.Invoice_Number == invoice.Invoice_Number
//                                 &&
//                                 (con.Tin == invoice.Tin || con.Name == invoice.Contractor_Name)
//                                 &&
//                                 inv.Total_Price == invoice.Total_Price
//                              select new { inv, con }).ToList()
//                              .Select(c => new ReportInvoiceDTO
//                              {
//                                  Id = c.inv.Id.ToString(),
//                                  Vendor_Name = c.con.Name,
//                                  Vendor_Code = c.con.Tin,
//                                  Month_Current = c.inv.Month_Current.ToShortDateString(),
//                                  Month_Invoice = c.inv.Month_Invoice.ToShortDateString(),
//                                  Invoice_Number = c.inv.Invoice_Number,
//                                  Bez_Nds = c.inv.Price.ToString(),
//                                  Nds = c.inv.Vat.ToString(),
//                                  TotalPrice = c.inv.Total_Price.ToString(),
//                                  Branch_Id = c.con.Id
//                              }).ToList();

//                return result.Count() == 0 ? null : result.ToList();
            
//        }

//        public void GetPaymentsReport(List<ReportInvoiceDTO> invoices, List<PaymentDTO> payments, IEnumerable<BeginCreditDTO> beginCredit)
//        {

//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountingInvoicesTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            //var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountingInvoicesTemplate.xls");
//            //var Worksheet = Workbook.Worksheets[0];

//            //AccountingInvoicesTemplate

//            List<int> colors = new List<int>();

//            var workBook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\AccountingInvoicesTemplate.xls"); ;

//            var worksheet = workBook.Worksheets[0];

//            var cells = worksheet.Cells;

//            int startWith = 3;

//            int paymentLastPos = 0;
//            int invoicesFirstPos = 0;

//            string oldVPayment = "";

//            cells["A1:P1"].Interior.Color = System.Drawing.Color.Silver;
//            cells["A1:P1"].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous;

//            string oldPaymentAccount = "";

//            for (int i = 0; i < payments.Count; i++)
//            {
//                if (oldPaymentAccount != payments[i].Purpose_Account)
//                {
//                    oldPaymentAccount = payments[i].Purpose_Account;
//                    cells["C" + startWith].Value = "счет - " + oldPaymentAccount;
//                    cells["A" + startWith + ":P" + startWith].Interior.Color = System.Drawing.Color.GreenYellow;
//                    startWith++;
//                }

//                oldVPayment = payments[i].Contractor_Name;

//                cells["A" + startWith].Value = payments[i].Contractor_Srn;
//                cells["B" + startWith].Value = payments[i].Contractor_Name;
//                cells["C" + startWith].Value = payments[i].Invoice_Num;
//                cells["D" + startWith].Value = payments[i].PaymentDate;
//                cells["F" + startWith].Value = payments[i].Price;

//                string nextPayment = "";
//                if (i != payments.Count - 1)
//                    nextPayment = payments[i + 1].Contractor_Name;
//                else
//                    nextPayment = null;

//                {
//                    if (oldVPayment != nextPayment)
//                    {
//                        paymentLastPos = startWith;

//                        while (cells["B" + startWith].Value != null)
//                            startWith--;

//                        startWith++;
//                        invoicesFirstPos = startWith;

//                        var selectedInvoices = invoices.Where(c => c.Contractor_Id == payments[i].Contractor_Id || c.Branch_Id == payments[i].Contractor_Id).ToList();

//                        foreach (var w in selectedInvoices)
//                            invoices.Remove(w);

//                        for (int y = 0; y < selectedInvoices.Count; y++)
//                        {
//                            cells["H" + startWith].Value = DateTime.Parse(selectedInvoices[y].Month_Current);
//                            cells["I" + startWith].Value = DateTime.Parse(selectedInvoices[y].Month_Invoice);
//                            cells["J" + startWith].Value = selectedInvoices[y].Invoice_Number;
//                            cells["K" + startWith].Value = Decimal.Parse(selectedInvoices[y].Bez_Nds);
//                            cells["L" + startWith].Value = Decimal.Parse(selectedInvoices[y].Nds);
//                            cells["M" + startWith].Value = selectedInvoices[y].Non_Taxable;
//                            cells["N" + startWith].Value = Decimal.Parse(selectedInvoices[y].TotalPrice);

//                            if (y != selectedInvoices.Count - 1)
//                                startWith++;
//                        }

//                        startWith = startWith > paymentLastPos ? startWith + 2 : paymentLastPos + 2;

//                        if (selectedInvoices.Count > 0)
//                        {
//                            cells["B" + (startWith - 1)].Value = beginCredit.FirstOrDefault(c => c.Contractor_Id == payments[i].Contractor_Id) == null ?
//                                0 : beginCredit.FirstOrDefault(c => c.Contractor_Id == payments[i].Contractor_Id).Begin_Credit;

//                            cells["F" + (startWith - 1)].Formula = "=sum(F" + invoicesFirstPos + ":F" + (startWith - 2) + ")";
//                            cells["L" + (startWith - 1)].Formula = "=sum(L" + invoicesFirstPos + ":L" + (startWith - 2) + ")";
//                            cells["N" + (startWith - 1)].Formula = "=sum(N" + invoicesFirstPos + ":N" + (startWith - 2) + ")";
//                        }
//                        else
//                        {
//                            cells["B" + (startWith - 1)].Value = beginCredit.FirstOrDefault(c => c.Contractor_Id == payments[i].Contractor_Id) == null ?
//                                0 : beginCredit.FirstOrDefault(c => c.Contractor_Id == payments[i].Contractor_Id).Begin_Credit;
//                            cells["F" + (startWith - 1)].Formula = "=sum(F" + invoicesFirstPos + ":F" + (startWith - 2) + ")";
//                        }

//                        colors.Add(startWith - 1);
//                        cells["A" + (startWith - 1) + ":P" + (startWith - 1)].Interior.Color = System.Drawing.Color.Yellow;
//                    }
//                }

//                startWith++;
//            }

//            string summStrF = "=";
//            string summStrN = "=";
//            for (int y = 0; y < colors.Count; y++)
//            {
//                if (y != colors.Count - 1)
//                {
//                    summStrF += "F" + colors[y] + "+";
//                    summStrN += "N" + colors[y] + "+";
//                }
//                else
//                {
//                    summStrF += "F" + colors[y] + "";
//                    summStrN += "N" + colors[y] + "";
//                }
//            }

//            cells["N" + (startWith - 1)].Formula = summStrN;
//            cells["F" + (startWith - 1)].Formula = summStrF;
//            cells["F" + (startWith - 1) + ":N" + (startWith - 1)].Interior.Color = System.Drawing.Color.Green;

//            int stWith = startWith;

//            var invoicesNoOrders = invoices.OrderBy(c => c.Vendor_Code).ToList();

//            startWith++;
//            int sumPos = startWith;
//            int startVal = startWith;
//            for (int i = 0; i < invoicesNoOrders.Count; i++)
//            {
//                var row = invoicesNoOrders[i];

//                cells["A" + startWith].Value = row.Vendor_Code;
//                cells["B" + startWith].Value = row.Vendor_Name;
//                cells["H" + startWith].Value = DateTime.Parse(row.Month_Current);
//                cells["I" + startWith].Value = DateTime.Parse(row.Month_Invoice);
//                cells["J" + startWith].Value = row.Invoice_Number;
//                cells["K" + startWith].Value = Decimal.Parse(row.Bez_Nds);
//                cells["L" + startWith].Value = Decimal.Parse(row.Nds);
//                cells["M" + startWith].Value = row.Non_Taxable;
//                cells["N" + startWith].Value = Decimal.Parse(row.TotalPrice);

//                if (i + 1 != invoicesNoOrders.Count)
//                {
//                    if (invoicesNoOrders[i + 1].Vendor_Name != invoicesNoOrders[i].Vendor_Name)
//                    {
//                        startWith += 2;

//                        cells["B" + (startWith - 1)].Value = beginCredit.FirstOrDefault(c => c.Contractor_Id == row.Contractor_Id) == null ?
//                            0 : beginCredit.FirstOrDefault(c => c.Contractor_Id == row.Contractor_Id).Begin_Credit;

//                        cells["N" + (startWith - 1)].Formula = "=sum(N" + (sumPos) + ":N" + (startWith - 2) + ")";
//                        cells["A" + (startWith - 1) + ":N" + (startWith - 1)].Interior.Color = System.Drawing.Color.Yellow;
//                        sumPos = startWith;
//                    }
//                }
//                else
//                {
//                    startWith += 2;

//                    cells["B" + (startWith - 1)].Value = beginCredit.FirstOrDefault(c => c.Contractor_Id == row.Contractor_Id) == null ?
//                            0 : beginCredit.FirstOrDefault(c => c.Contractor_Id == row.Contractor_Id).Begin_Credit;

//                    cells["N" + (startWith - 1)].Formula = "=sum(N" + (sumPos) + ":N" + (startWith - 2) + ")";
//                    cells["A" + (startWith - 1) + ":N" + (startWith - 1)].Interior.Color = System.Drawing.Color.Yellow;
//                }
//                startWith++;
//            }

//            string summ = "=sum(";
//            for (int z = startVal; z < startWith; z++)
//            {
//                if (cells["N" + z].Interior.Color.ToArgb() == System.Drawing.Color.Yellow.ToArgb())
//                {
//                    if (z == startVal)
//                        summ += "N" + z;
//                    else
//                        summ += "+N" + z;
//                }
//            }

//            summ += ")";

//            cells["N" + (startWith)].Formula = summ;
//            cells["A2:P" + startWith].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous;

//            try
//            {
//                //workBook.SaveAs(GeneratedReportsDir + "Прибутковий касовий ордер.xls", FileFormat.Excel8);
//                //Process process = new Process();
//                //process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Прибутковий касовий ордер.xls" + "\"";
//                //process.StartInfo.FileName = "Excel.exe";
//                //process.Start();

//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("Звіт з податковими та оплатами") + ".xls";
//                workBook.SaveAs(documentAddresName, FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();



//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкрито!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return;
//        }



//        #endregion

//        #region FixedAssetsOrder report's

//        public void PrintFixedAssetsOder(FixedAssetsOrderJournalDTO model, List<FixedAssetsMaterialsDTO> materialsListSource, DateTime endDate, DateTime firstDay)
//        {
//            List<FixedAssetsMaterialsDTO> materialsList = new List<FixedAssetsMaterialsDTO>();
//            string typeMaterial = "";
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsPrintItem.xls";

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;            
//            IRange cells = Worksheet.Cells;
//            int startRow = 3;
//            int indexRow = startRow + 1;
//            string indexRowStr;

//            if (model.Id == null)
//            {
//                MessageBox.Show("За обраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Information);
//                return;
//            }

//            //Head document
//            cells["B2"].Value = "Карточка основного засобу за період: з " + firstDay.ToShortDateString() + " по " + endDate.ToShortDateString();
//            cells["B2"].Font.Size = 14;
//            cells["B2"].Font.Bold = true;
//            cells["B2"].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["B2"].VerticalAlignment = SpreadsheetGear.VAlign.Center;
//            cells["B2:" + "P2"].Merge();

//            //Head table1          
//            indexRowStr = indexRow.ToString();
//            //ColumnWidth
//            Worksheet.Cells["B:B"].ColumnWidth = 12.47;
//            Worksheet.Cells["C:C"].ColumnWidth = 32.9;
//            Worksheet.Cells["D:D"].ColumnWidth = 16.19;
//            Worksheet.Cells["E:E"].ColumnWidth = 26.19;
//            Worksheet.Cells["F:F"].ColumnWidth = 14.86;
//            Worksheet.Cells["G:G"].ColumnWidth = 13.04;
//            Worksheet.Cells["H:H"].ColumnWidth = 11.43;
//            Worksheet.Cells["I:I"].ColumnWidth = 25.43;

//            Worksheet.Cells["J:J"].ColumnWidth = 16.14;
//            Worksheet.Cells["K:K"].ColumnWidth = 12.33;
//            Worksheet.Cells["L:L"].ColumnWidth = 13.9;
//            Worksheet.Cells["M:M"].ColumnWidth = 14.04;
//            Worksheet.Cells["N:N"].ColumnWidth = 24.43;
//            Worksheet.Cells["O:O"].ColumnWidth = 24.43;
//            Worksheet.Cells["P:P"].ColumnWidth = 12.33;
//   //         int rowcount = materialsListSource.Count;

//            //TITLE
//            cells["B" + indexRowStr].Value = "Інвентарний номер";
//            cells["C" + indexRowStr].Value = "Найменування";
//            cells["D" + indexRowStr].Value = "Бал./рах.";
//            cells["E" + indexRowStr].Value = "Відповідальна особа";
//            cells["F" + indexRowStr].Value = "Термін використання (міс.)";
//            cells["G" + indexRowStr].Value = "Дата приняття до обліку";
//            cells["H" + indexRowStr].Value = "Дата зняття з обліку";
//            cells["I" + indexRowStr].Value = "Група";
//            cells["J" + indexRowStr].Value = "Первинна вартість";
//            cells["K" + indexRowStr].Value = "Збільшення вартості";
//            cells["L" + indexRowStr].Value = "Поточна вартість";
//            cells["M" + indexRowStr].Value = "Залишкова вартість";
//            cells["N" + indexRowStr].Value = "Сума амортизації";
//            cells["O" + indexRowStr].Value = "Амортизація за місяць";

//            //body table
//            indexRow++;
//            indexRowStr = indexRow.ToString();
//            cells["B" + indexRowStr].Value = model.InventoryNumber;
//            cells["C" + indexRowStr].Value = model.InventoryName;
//            cells["D" + indexRowStr].Value = model.BalanceAccountNum;
//            cells["E" + indexRowStr].Value = model.SupplierName;
//            cells["F" + indexRowStr].Value = model.UsefulMonth;
//            cells["G" + indexRowStr].Value = model.BeginDate;
//            cells["H" + indexRowStr].Value = model.EndRecordDate;
//            cells["I" + indexRowStr].Value = model.GroupName;
//            cells["J" + indexRowStr].Value = model.BeginPrice;
//            cells["K" + indexRowStr].Value = model.IncreasePrice;
//            cells["L" + indexRowStr].Value = model.TotalPrice;
//            cells["M" + indexRowStr].Value = model.CurrentPrice;
//            cells["N" + indexRowStr].Value = model.PeriodAmortization;
//            cells["O" + indexRowStr].Value = model.CurrentAmortization;
//            cells["I" + indexRowStr + ":" + "O" + indexRowStr].NumberFormat = "### ### ##0.00";
//            cells["L" + indexRowStr + ":" + "M" + indexRowStr].NumberFormat = "### ### ##0.00";
//            // first row headtable
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].WrapText = true;
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].VerticalAlignment = SpreadsheetGear.VAlign.Center;
//            cells["B" + (startRow + 1) + ":" + "P" + indexRow].Borders.LineStyle = LineStyle.Continous;
//            // first row headtable
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].WrapText = true;
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//            cells["B" + (startRow + 1) + ":" + "P" + (startRow + 1)].VerticalAlignment = SpreadsheetGear.VAlign.Center;
//            cells["B" + (startRow + 1) + ":" + "P" + indexRow].Borders.LineStyle = LineStyle.Continous;

//            //table 2
//            indexRow++;
//            startRow = indexRow++;
//                indexRowStr = indexRow.ToString();
//                cells["B" + indexRowStr].Value = "Ном. номер";
//                cells["C" + indexRowStr].Value = "Найменування";
//                cells["D" + indexRowStr].Value = "Рах. нарахування амортизації";
//                cells["E" + indexRowStr].Value = "Номер надходження";
//                cells["F" + indexRowStr].Value = "Дата надходження";
//                cells["G" + indexRowStr].Value = "Балансовий рахунок";
//                cells["H" + indexRowStr].Value = "К-сть";
//                cells["I" + indexRowStr].Value = "Ціна";
//                cells["J" + indexRowStr].Value = "Сума";
//                cells["K" + indexRowStr].Value = "Дата списання";
//                cells["L" + indexRowStr].Value = "Сума списання";
//                cells["M" + indexRowStr].Value = "Сумма до обліку";
//                cells["N" + indexRowStr].Value = "Тип";
                
//                //body table 2
//                for (var i = 0; i < materialsListSource.Count; i++)
//                {
//                    indexRow++;
//                    indexRowStr = indexRow.ToString();

//                    cells["B" + indexRowStr].Value = materialsListSource[i].Nomenclature;//((FixedAssetsMaterialsDTO)fixedAssetsOrderBS[i]).Nomenclature;
//                    cells["C" + indexRowStr].Value = materialsListSource[i].Name;
//                    cells["D" + indexRowStr].Value = materialsListSource[i].FixedNum;
//                    cells["E" + indexRowStr].Value = materialsListSource[i].ReceiptNum;
//                    cells["F" + indexRowStr].Value = materialsListSource[i].OrderDate;
//                    cells["G" + indexRowStr].Value = materialsListSource[i].OrderNum;
//                    cells["H" + indexRowStr].Value = materialsListSource[i].Quantity;
//                    cells["I" + indexRowStr].Value = materialsListSource[i].UnitPrice;
//                    cells["J" + indexRowStr].Value = materialsListSource[i].TotalPrice;
//                    cells["K" + indexRowStr].Value = materialsListSource[i].ExpDate;
//                    cells["L" + indexRowStr].Value = materialsListSource[i].Price;
//                    cells["M" + indexRowStr].Value = materialsListSource[i].FixedPrice;
//                    switch(materialsListSource[i].Flag)
//                    {
//                        case 0:
//                    typeMaterial = "Основний засіб";
//                    break;
//                        case 1:
//                    typeMaterial = "Збільшення вартості";
//                    break;
//                        case 2:
//                    typeMaterial = "Корегування";
//                    break;
//                        default: typeMaterial = "";
//                    break;
//                    }
//                    cells["N" + indexRowStr].Value = typeMaterial;

//                    //Interval I->J
//                    cells["I" + indexRowStr + ":" + "J" + indexRowStr].NumberFormat = "### ### ##0.00";
//                    cells["L" + indexRowStr + ":" + "M" + indexRowStr].NumberFormat = "### ### ##0.00";
//                }

//                cells["B" + (startRow + 1) + ":" + "N" + (startRow + 1)].WrapText = true;
//                cells["B" + (startRow + 1) + ":" + "N" + (startRow + 1)].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//                cells["B" + (startRow + 1) + ":" + "N" + (startRow + 1)].VerticalAlignment = SpreadsheetGear.VAlign.Center;
//                cells["B" + (startRow + 1) + ":" + "N" + indexRow].Borders.LineStyle = LineStyle.Continous;
//                indexRow = indexRow + 2;
//                startRow = startRow + materialsListSource.Count + 3;
//                indexRowStr = indexRow.ToString();
//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Карточка ОЗ " + model.InventoryNumber + ".xls", FileFormat.Excel8);                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Карточка ОЗ " +model.InventoryNumber+ ".xls";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintInventoryCardForSoftware(FixedAssetsOrderJournalDTO model)
//        {
//            string templateName = " ";
//            templateName = @"\Templates\InventoryCardPrintForSoftware.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;

//            IRange cells = Worksheet.Cells;
//            decimal yearAmortization = Math.Round(((decimal)model.BeginPrice / (short)model.UsefulMonth) * 12, 2);               

//            int rows = 40;
//            int cols = 30;

//            cells[0, 0, rows, cols].Replace("{currInventoryName}", model.InventoryName, LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currInventoryNumber}", model.InventoryNumber, LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBeginDate}", Convert.ToDateTime(model.BeginDate).ToShortDateString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currSupplier_Name}", model.SupplierName, LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currUsefulMonth}", model.UsefulMonth.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBalance_Account_Num}", model.BalanceAccountNum, LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBeginPrice}", model.BeginPrice.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currAmortizationYearPrice}", yearAmortization.ToString(), LookAt.Part, SearchOrder.ByRows, false);

//            try
//            {
//                Worksheet.SaveAs(GeneratedReportsDir + "Інвентарна картка обліку ПО №" + model.InventoryNumber.Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Інвентарна картка обліку ПО №" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдений Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }              
//        }
        
//        public void PrintFixedAssetsOrderAct(FixedAssetsOrderJournalDTO model, List<FixedAssetsMaterialsDTO> materialsListSource)
//        {
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsOrderAct.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;

//            List<FixedAssetsMaterialsDTO> newMaterialsList = new List<FixedAssetsMaterialsDTO>();
//            decimal sumPrice=0;
           
//            int rows = 120;
//            int cols = 31;
//            DateTime dt = DateTime.Now;

//            cells[1, 1, rows, cols].Replace("{currYear}", dt.Year.ToString(), LookAt.Part, SearchOrder.ByRows, false);

//            if (materialsListSource.Count > 0)
//            {
//                newMaterialsList = materialsListSource.Where(x => x.Flag < 2).ToList();
//                sumPrice = Math.Round(newMaterialsList.Where(r => r.Flag < 2).Select(s => s.FixedPrice).Sum(), 2);
//                float percentUsefullMonth = (100 / (Convert.ToInt16(model.UsefulMonth) / 12));

//                cells["M32"].Value = model.InventoryName.ToString() + "   ";
//                cells["O27"].Value = model.InventoryNumber;
//                cells["D27"].Value = model.BalanceAccountNum;
//                cells["R27"].Value = model.FixedAccountNum;
//                cells["V27"].Value = percentUsefullMonth.ToString() + "%";

//                cells["N27"].Value = sumPrice;
//                cells["N27"].NumberFormat = "### ### ##0.00";
//                cells["C27"].Value = model.RegionName;

//                int materialRows = 44;
//                int count = newMaterialsList.Count;
//                cells[materialRows + ":" + (materialRows + count)].Insert();
//                cells["A43:AC43"].Copy(cells["A" + materialRows + ":AC" + (materialRows + count - 1)], PasteType.Formats, PasteOperation.None, false, false);

//                foreach (var item in newMaterialsList)
//                {
//                    cells["B" + materialRows].Value = item.Name;
//                    cells["G" + materialRows].Value = item.Nomenclature;
//                    cells["M" + materialRows].Value = "";
//                    cells["Q" + materialRows].NumberFormat = "YYYY";
//                    cells["Q" + materialRows].Value = item.ExpDate;
//                    cells["T" + materialRows].NumberFormat = "MM.YYYY";
//                    cells["T" + materialRows].Value = item.ExpDate;
//                    cells["Y" + materialRows].Value = "";
//                    cells["B" + materialRows].RowHeight = 30;
//                    materialRows++;
//                };
//            }

//            try
//            {
//                Worksheet.SaveAs(GeneratedReportsDir + "Акт прийому-передачі інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт прийому-передачі інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдений Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            
//        }

//        public void PrintFixedAssetsOrderActForSoftware(FixedAssetsOrderJournalDTO model)
//        {
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsOrderActForSoftware.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;

//            decimal yearAmortization = Math.Round(((decimal)model.BeginPrice / (short)model.UsefulMonth) * 12, 2);

//            int rows = 100;
//            int cols = 30;
//            DateTime dt = DateTime.Now;

//            cells[0, 0, rows, cols].Replace("{currYear}", dt.Year.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currInventoryName}", model.InventoryName.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currInventoryNumber}", model.InventoryNumber.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBeginDate}", Convert.ToDateTime(model.BeginDate).ToShortDateString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currSupplier_Name}", model.SupplierName.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currUsefulMonth}", model.UsefulMonth.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBalance_Account_Num}", model.BalanceAccountNum.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currBeginPrice}", model.BeginPrice.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[0, 0, rows, cols].Replace("{currAmortizationYearPrice}", yearAmortization.ToString(), LookAt.Part, SearchOrder.ByRows, false);

//            try
//            {
//                Worksheet.SaveAs(GeneratedReportsDir + "Акт введення в господарський оборот об'єкта № " + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт введення в господарський оборот об'єкта № " + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдений Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintFixedAssetsOrderExpenditureAct(FixedAssetsOrderArchiveJournalDTO model, FixedAssetsOrderRegistrationDTO fixedAssetsOrderRegistration = null)
//        {
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsOrderActExpenditure.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);

//            //SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ContractorsVat.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;
//            var WorksheetSecond = Workbook.Worksheets[1];
//            var СellsSecond = WorksheetSecond.Cells;
//            IRange cellsSecond = WorksheetSecond.Cells;

//            List<FixedAssetsMaterialsDTO> newMaterialsList = new List<FixedAssetsMaterialsDTO>();
//            decimal sumPrice = 0;

//            int rows = 120;
//            int cols = 31;
//            DateTime dt = DateTime.Now;

//            cells[1, 1, rows, cols].Replace("{currYear}", dt.Year.ToString(), LookAt.Part, SearchOrder.ByRows, false);
//            cells[1, 1, rows, cols].Replace("{currDate}", dt.ToShortDateString(), LookAt.Part, SearchOrder.ByRows, false);

//            cells["AI16"].Value = dt.ToShortDateString();
//            cells["B30"].Value = model.RegionName.ToString();
//            cells["M30"].Value = model.SoldPrice;
//            cells["P30"].Value = model.TransferPrice;
//            cells["S30"].Value = model.InventoryNumber.ToString();
//            cells["X30"].Value = model.BalanceAccountNum.ToString();
//            cells["AI30"].Value =   model.BeginDate.Year;
//            cells["AL30"].Value = RuDateAndMoneyConverter.MonthName(model.BeginDate.Month, Utils.TextCase.Nominative).ToString() + " " + model.BeginDate.Year;
//            cells["AR30"].Value = RuDateAndMoneyConverter.MonthName(model.BeginDate.Month, Utils.TextCase.Nominative).ToString() + " " + model.BeginDate.Year;
//            cellsSecond["H7"].Value = model.BeginDate.Day.ToString();
//            cellsSecond["J7"].Value = RuDateAndMoneyConverter.MonthName(model.BeginDate.Month, Utils.TextCase.Genitive) + " " + model.BeginDate.Year.ToString() + "р.";
//            cellsSecond["E3"].Value = model.InventoryName;

//            cells["AE12"].Value = "\""+dt.Day+"\"    " + RuDateAndMoneyConverter.MonthName(dt.Month, Utils.TextCase.Genitive).ToString() + "  " + dt.Year +"р.";

//            if (fixedAssetsOrderRegistration!=null)
//            {
//                cells["AE16"].Value = fixedAssetsOrderRegistration.NumberOrder;
//                cells["AI16"].Value = fixedAssetsOrderRegistration.DateOrder.Value.ToShortDateString();
//                cellsSecond["N1"].Value = fixedAssetsOrderRegistration.DateOrder.Value.Day.ToString();
//                cellsSecond["P1"].Value = RuDateAndMoneyConverter.MonthName(fixedAssetsOrderRegistration.DateOrder.Value.Month, Utils.TextCase.Genitive) + " " + fixedAssetsOrderRegistration.DateOrder.Value.Year.ToString() + "р.";
//                cellsSecond["W1"].Value = fixedAssetsOrderRegistration.NumberOrder;
//            }

//            //if (materialsListSource.Count > 0)
//            //{
//            //    newMaterialsList = materialsListSource.Where(x => x.Flag < 2).ToList();
//            //    sumPrice = Math.Round(newMaterialsList.Where(r => r.Flag < 2).Select(s => s.FixedPrice).Sum(), 2);
//            //    float percentUsefullMonth = (100 / (Convert.ToInt16(model.UsefulMonth) / 12));

//            //    cells["M32"].Value = model.InventoryName.ToString() + "   ";
//            //    cells["O27"].Value = model.InventoryNumber;
//            //    cells["D27"].Value = model.BalanceAccountNum;
//            //    cells["R27"].Value = model.FixedAccountNum;
//            //    cells["V27"].Value = percentUsefullMonth.ToString() + "%";

//            //    cells["N27"].Value = sumPrice;
//            //    cells["N27"].NumberFormat = "### ### ##0.00";
//            //    cells["C27"].Value = model.RegionName;

//            //    int materialRows = 44;
//            //    int count = newMaterialsList.Count;
//            //    cells[materialRows + ":" + (materialRows + count)].Insert();
//            //    cells["A43:AC43"].Copy(cells["A" + materialRows + ":AC" + (materialRows + count - 1)], PasteType.Formats, PasteOperation.None, false, false);

//            //    foreach (var item in newMaterialsList)
//            //    {
//            //        cells["B" + materialRows].Value = item.Name;
//            //        cells["G" + materialRows].Value = item.Nomenclature;
//            //        cells["M" + materialRows].Value = "";
//            //        cells["Q" + materialRows].NumberFormat = "YYYY";
//            //        cells["Q" + materialRows].Value = item.ExpDate;
//            //        cells["T" + materialRows].NumberFormat = "MM.YYYY";
//            //        cells["T" + materialRows].Value = item.ExpDate;
//            //        cells["Y" + materialRows].Value = "";
//            //        cells["B" + materialRows].RowHeight = 30;
//            //        materialRows++;
//            //    };
//            //}

//            try
//            {
//                Worksheet.SaveAs(GeneratedReportsDir + "Акт списання інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт списання інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдений Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//        }


//        public void PrintFixedAssetsOrderActWriteOff(FixedAssetsOrderJournalDTO model, List<FixedAssetsMaterialsDTO> materialsListSource, int monthSource, int yearSource)
//        {
//            DateTime expDateMaterial = new DateTime();
//            int yearExpDateMaterial, monthExpDateMaterial;
//            string templateName = " ";
//            List<FixedAssetsMaterialsDTO> newMaterialsList = new List<FixedAssetsMaterialsDTO>();

//            templateName = @"\Templates\FixedAssetsAddedPriceTemplate.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;

//            if (materialsListSource.Count > 0)
//            {
//                for (int i = 0; i < materialsListSource.Count; i++)
//                {
//                    expDateMaterial = materialsListSource[i].ExpDate.Value;
//                    yearExpDateMaterial = expDateMaterial.Year;
//                    monthExpDateMaterial = expDateMaterial.Month;
//                    //from grid Mateials find ExpDate=date edit'ov on main form 
//                    if (materialsListSource[i].Flag == 1 && monthExpDateMaterial == monthSource && yearExpDateMaterial == yearSource)
//                        newMaterialsList.Add(materialsListSource[i]);
//                }
//                int materialRows = 21;
//                if (newMaterialsList.Count != 0)
//                {
//                    foreach (var item in newMaterialsList)
//                    {
//                        cells["" + materialRows + ":" + materialRows].Insert();
//                        cells["A" + materialRows].HorizontalAlignment = HAlign.Left;
//                        cells["A" + materialRows + ":" + "B" + materialRows].Merge();
//                        cells["A" + materialRows].Value = model.RegionName;
//                        cells["C" + materialRows + ":" + "D" + materialRows].Merge();
//                        cells["C" + materialRows].Value = model.BalanceAccountNum;

//                        switch (model.GroupId)
//                        {
//                            case 2:
//                            case 10:
//                                cells["G" + materialRows].Value = "154";
//                                break;
//                            default: cells["G" + materialRows].Value = "152";
//                                break;
//                        }
//                        cells["K" + materialRows + ":" + "L" + materialRows].Merge();
//                        cells["K" + materialRows].Value = item.TotalPrice;
//                        cells["M" + materialRows].Value = model.InventoryNumber;
//                        materialRows++;
//                    };                    
//                }
//                else
//                {
//                    MessageBox.Show("Відсутні матеріали, які задовольняють задані умови", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Information);
//                    return; 
//                }
//            }

//            try
//            {
//                Worksheet.SaveAs(GeneratedReportsDir + "Акт приймання-здачі відремонтованих об'єктів інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Акт приймання-здачі відремонтованих об'єктів інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдений Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
        
//        }

//        public string GetFixedAssetsGroupByAccountNumber(string accountNumber)
//        {
//            switch (accountNumber)
//            {
//                case "103":
//                    return "3";
//                    break;
//                case "104":
//                case "104/1":
//                    return "4";
//                    break;
//                case "105":
//                    return "5";
//                    break;
//                case "106":
//                case "127":
//                    return "6";
//                    break;
//                case "109":
//                    return "9";
//                    break;
//                default:
//                    return "Невідома группа";
//                    break;
//            }
//        }

//        public void FixedAssetsDecreeInput(FixedAssetsOrderRegJournalDTO model, List<FixedAssetsMaterialsDTO> materialsList)
//        {
//            decimal allPrice = 0;
//            //DataTable currTable = null;
//            var pad = new Ua();
//            string templateName = @"\Templates\FixedAssetsDecreeInputTemplate.xls";
//            SpreadsheetGear.IWorkbook workbook = SpreadsheetGear.Factory.GetWorkbook(GeneratedReportsDir +templateName);
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            int rows = 120;
//            int cols = 31;
//            DateTime dt = DateTime.Now;
//            DateTime amortizationDate = new DateTime(((DateTime)model.DateOrder).Year, ((DateTime)model.DateOrder).Month, 1);
//            amortizationDate = amortizationDate.AddMonths(1);

//            // Add in cell date, month, year
//            cells["B6"].HorizontalAlignment = HAlign.Center;
//            cells["D6"].HorizontalAlignment = HAlign.Center;
//            cells["F6"].HorizontalAlignment = HAlign.Center;
//            string s = ((DateTime)model.DateOrder).Month.ToString();
//            int month = Int32.Parse(s);

//           string rez = RuDateAndMoneyConverter.MonthName(month, Utils.TextCase.Genitive);

//            cells["B" + 6].Value = ((DateTime)model.DateOrder).Day.ToString();
//            cells["D" + 6].Value = rez;
//            cells["F" + 6].Value = ((DateTime)model.DateOrder).Year.ToString();
//            cells["K" + 6].Value = model.NumberOrder;
//            double years = Convert.ToDouble(model.UsefulMonth) / 12.0;

//            cells["A" + 8].HorizontalAlignment = HAlign.Left;

//            for (int i = 13; i < 26; i++)
//            {
//                cells["B" + i].HorizontalAlignment = HAlign.Left;
//                cells["A" + i].HorizontalAlignment = HAlign.Center;
//            }
           
//            for (int i = 0; i < materialsList.Count;i++ )
//            {
//                if (materialsList[i].Flag==0)
//                    allPrice += (decimal)materialsList[i].TotalPrice;
//            }
//            cells["B14"].Font.Bold = true;
//            cells["B" + 13].HorizontalAlignment = HAlign.Left;
//            cells["A" + 8].Value = "« Про введення в експлуатацію " + model.InventoryName + " Інв. " + model.InventoryNumber + " »";
//            //SourseData["InventoryName"] + ;
//            cells["A" + 13].Value = " 1" + " . ";
//            cells["B" + 13].Value = " Ввести в експлуатацію з " + ((DateTime)model.DateOrder).ToShortDateString() + "р.";
//            cells["B" + 14].Value = " " + model.InventoryName;
//            cells["B" + 15].Value = " Вартістю " + allPrice + " грн. в кількості 1 шт.";
//            cells["B" + 16].Value = " та надати наступний інвентарний номер: №" + model.InventoryNumber + ".";
//            cells["A" + 18].Value = " 2 . ";
//            cells["B" + 18].Value = " Для цілей бухгалтерського обліку використати рахунок №" + model.BalanceAccountNum + ", ";
//            cells["B" + 19].Value = " податкового обліку група №" + GetFixedAssetsGroupByAccountNumber(model.BalanceAccountNum.ToString()) + ",";
//            cells["B" + 20].Value = " бухгалтерії вести облік вищевказаного основного засобу,";
//            cells["B" + 21].Value = " амортизацію нарахувати з " + amortizationDate.ToShortDateString() + " р.";
//            cells["A" + 23].Value = " 3 . ";
//            cells["B" + 23].Value = " Термін корисного використання " + years + " " +NumberToYear(Convert.ToInt32(years)) + ".";
//            cells["A" + 25].Value = " 4 . ";
//            cells["B" + 25].Value = " Контроль за виконанням цього наказу покладаю  ";
//            cells["B" + 26].Value = " на Першого заступника директора - Кондрашова В.В.. ";
//            try
//            {
//                worksheet.SaveAs(GeneratedReportsDir + "Наказ № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Наказ № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); 
//            }       
//        }

//        public static string NumberToYear(int number)
//        {
//            string year = "";
//            switch (number)
//            {
//                case 1:
//                    year = "рік";
//                    break;
//                case 2:
//                case 3:
//                case 4:
//                    year = "роки";
//                    break;
//                case 5:
//                case 6:
//                case 7:
//                case 8:
//                case 9:
//                case 10:
//                case 11:
//                case 12:
//                case 13:
//                case 14:
//                case 15:
//                case 16:
//                case 17:
//                case 18:
//                case 19:
//                case 20:
//                    year = "років";
//                    break;
//                default:
//                    break;

//            }
//            return year;
//        }


//        public void FixedAssetsDecreeAddedPrice(FixedAssetsOrderRegJournalDTO model, FixedAssetsMaterialsDTO modelMaterials)
//        {
//            var pad = new Ua();
//            string templateName = @"\Templates\FixedAssetsDecreeAddedPriceTemplate.xls";
//            SpreadsheetGear.IWorkbook workbook = SpreadsheetGear.Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            DateTime amortizationDate = new DateTime(Convert.ToDateTime(modelMaterials.OrderDate).AddMonths(1).Year, Convert.ToDateTime(modelMaterials.OrderDate).AddMonths(1).Month, 1);
//            // Add in cell date, month, year
//            cells["B7"].HorizontalAlignment = HAlign.Center;
//            cells["D7"].HorizontalAlignment = HAlign.Center;
//            cells["F7"].HorizontalAlignment = HAlign.Center;
//            string s = ((DateTime)modelMaterials.OrderDate).Month.ToString();
//            int month = Int32.Parse(s);
//            string rez = RuDateAndMoneyConverter.MonthName(month, Utils.TextCase.Genitive);

//            cells["B" + 7].Value = ((DateTime)modelMaterials.ExpDate).Day.ToString();
//            cells["D" + 7].Value = rez;
//            cells["F" + 7].Value = ((DateTime)modelMaterials.ExpDate).Year.ToString();
//            cells["K" + 7].Value = model.NumberOrder;

//            var fixedAssetsOrderName = pad.Q(model.InventoryName.ToString());

//            double years = Convert.ToDouble(model.UsefulMonth) / 12.0;

//            for (int i = 9; i < 27; i++)
//            {
//                cells["B" + i].HorizontalAlignment = HAlign.Left;
//                cells["A" + i].HorizontalAlignment = HAlign.Center;
//            }

//            cells["A" + 9].HorizontalAlignment = HAlign.Left;
//            cells["A" + 9].Value = "« Про збільшення вартості  " + fixedAssetsOrderName[3] + "-" + " інв. №" + model.InventoryNumber + " »";
//            cells["A" + 14].Value = " 1 . ";
//            cells["B" + 14].Value = "З " + ((DateTime)modelMaterials.OrderDate).ToShortDateString() + "р. збільшити вартість " + fixedAssetsOrderName[3] + "- інв. №" + model.InventoryNumber;
//            cells["B" + 16].Value = "На суму ";
//            //cells["E" + 16].Value = SourseDataMaterials["UNIT_PRICE"];
//            cells["E" + 16].Value = modelMaterials.TotalPrice;

//            cells["I" + 16].Value = " грн. ";
//            cells["A" + 18].Value = " 2 . ";
//            cells["B" + 18].Value = "Для цілей бухгатерського обліку використовувати рахунок № " + model.BalanceAccountNum + ", ";
//            cells["B" + 19].Value = "податкового обліку група №" + GetFixedAssetsGroupByAccountNumber(model.BalanceAccountNum.ToString()) + ", ";
//            cells["B" + 20].Value = "бугалтерії вести облік вищевказаного засобу, ";
//            cells["B" + 21].Value = "амортизацію нарахувати з " + amortizationDate.ToShortDateString() + " р.";
//            cells["A" + 23].Value = " 3 . ";
//            cells["B" + 23].Value = "Термін корисного використання " + years + " " + NumberToYear(Convert.ToInt32(years)) + ".";//RuDateAndMoneyConverter.NumberToYear(Convert.ToInt32(years)) + " . ";
//            cells["A" + 25].Value = " 4 . ";
//            cells["B" + 25].Value = "Контроль за виконанням цього наказу покладаю на ";
//            cells["B" + 26].Value = "Першого заступника директора Кондрашова В.В.. ";

//            try
//            {
//                worksheet.SaveAs(GeneratedReportsDir + "Наказ на збільшення вартості № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Наказ на збільшення вартості № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


//        }

//        public void PrintFixedAssetsOrderActForSaleSoftWare(FixedAssetsOrderRegJournalDTO model)
//        {
//            string templateName = @"\Templates\FixedAssetsOrderActForSaleSoftware.xls";
//            SpreadsheetGear.IWorkbook workbook = SpreadsheetGear.Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;
//            DateTime dt = DateTime.Now;
//            cells["C" + 23].Value = "1";
//            cells["D" + 23].Value = model.InventoryName;
//            cells["E" + 23].Value = model.InventoryNumber;
//            cells["D" + 23].Value = model.InventoryName;
//            cells["H" + 23].Value = model.BeginDate;
//            cells["M" + 23].Value = model.SupplierName;
//            cells["S" + 23].Value = model.UsefulMonth;
//            cells["W" + 23].Value = model.BalanceAccountNum;
//            cells["AL" + 23].Value = model.DateOrder;
//            cells["AN" + 23].Value = model.SoldPrice;
//            cells["AQ" + 23].Value = model.TransferPrice;
//            cells["AI" + 29].Value = model.SoldPrice;

//            try
//            {
//                worksheet.SaveAs(GeneratedReportsDir + 
//                    "Акт вибуття (ліквідації) об'єкта права інтелектуальної власності у складі нематеріальних актів № " +
//                    model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + 
//                    "Акт вибуття (ліквідації) об'єкта права інтелектуальної власності у складі нематеріальних актів № " +
//                    model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void PrintFixedAssetsDecreeSold(FixedAssetsOrderRegJournalDTO model)
//        {
//            string templateName = @"\Templates\FixedAssetsDecreeExpenditureTemplate.xls";
//            SpreadsheetGear.IWorkbook workbook = SpreadsheetGear.Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var pad = new Ua();

//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            // Add in cell date, month, year
//            cells["B7"].HorizontalAlignment = HAlign.Center;
//            cells["D7"].HorizontalAlignment = HAlign.Center;
//            cells["F7"].HorizontalAlignment = HAlign.Center;

//            string s = ((DateTime)model.DateOrder).Month.ToString();
//            int month = Int32.Parse(s);
//            string rez = RuDateAndMoneyConverter.MonthName(month, Utils.TextCase.Genitive);
//            cells["B" + 7].Value = ((DateTime)model.DateOrder).Day.ToString();
//            cells["D" + 7].Value = rez;
//            cells["F" + 7].Value = ((DateTime)model.DateOrder).Year.ToString();
//            cells["J" + 7].Value = model.NumberOrder;

//            for (int i = 13; i < 27; i++)
//            {
//                cells["B" + i].HorizontalAlignment = HAlign.Left;
//                cells["A" + i].HorizontalAlignment = HAlign.Center;
//            }
//            cells["B" + 15].HorizontalAlignment = HAlign.Center;
//            cells["B" + 23].HorizontalAlignment = HAlign.Center;

//            cells["A" + 9].HorizontalAlignment = HAlign.Left;
//            cells["A" + 9].Value = "« Про продаж замортизованих основних засобів " + model.InventoryName +
//                " інвентарний № " + model.InventoryNumber + " »";
//            cells["A" + 14].Value = " 1 . ";
//            cells["B" + 14].Value = "Продати замортизований " + model.InventoryName + ":";
//            cells["B" + 15].Value = "інвентарний № " + model.InventoryNumber + " . ";
//            cells["A" + 17].Value = " 2 . ";
//            cells["B" + 17].Value = "Відповідальним за продаж призначаю: ";
//            cells["B" + 18].Value = "Першого заступника директора - Кондрашова В.В.. ";

//            cells["A" + 20].Value = " 3 . ";
//            cells["B" + 20].Value = "Головному бухгалтеру Сергієнко Л.В. виконати необхідні ";
//            cells["B" + 21].Value = "бухгалтерські операції при продажу та при знятті ";
//            cells["B" + 22].Value = "Основних засобів з бухгалтерського обліку:";
//            cells["B" + 23].Value = "інвентарний № " + model.InventoryNumber + " . ";
//            cells["A" + 25].Value = " 4 . ";
//            cells["B" + 25].Value = "Контроль за виконанням цього наказу покладаю на ";
//            cells["B" + 26].Value = "Першого заступника директора - Кондрашова В.В.. ";

//            try
//            {
//                worksheet.SaveAs(GeneratedReportsDir + "Наказ на продаж № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Наказ на продаж № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//        }

//        public void PrintFixedAssetsDecreeExpenditure(FixedAssetsOrderRegJournalDTO model)
//        {
//            string templateName = @"\Templates\FixedAssetsDecreeExpenditureTemplate.xls";
//            SpreadsheetGear.IWorkbook workbook = SpreadsheetGear.Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var pad = new Ua();

//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;

//            // Add in cell date, month, year
//            cells["B7"].HorizontalAlignment = HAlign.Center;
//            cells["D7"].HorizontalAlignment = HAlign.Center;
//            cells["F7"].HorizontalAlignment = HAlign.Center;

//            string s = ((DateTime)model.DateOrder).Month.ToString();
//            int month = Int32.Parse(s);
//            string rez = RuDateAndMoneyConverter.MonthName(month, Utils.TextCase.Genitive);
//            cells["B" + 7].Value = ((DateTime)model.DateOrder).Day.ToString();
//            cells["D" + 7].Value = rez;
//            cells["F" + 7].Value = ((DateTime)model.DateOrder).Year.ToString();
//            cells["J" + 7].Value = model.NumberOrder;

//            for (int i = 13; i < 27; i++)
//            {
//                cells["B" + i].HorizontalAlignment = HAlign.Left;
//                cells["A" + i].HorizontalAlignment = HAlign.Center;
//            }
//            cells["B" + 15].HorizontalAlignment = HAlign.Center;
//            cells["B" + 23].HorizontalAlignment = HAlign.Center;

//            cells["A" + 9].HorizontalAlignment = HAlign.Left;
//            cells["A" + 9].Value = "« Про списання замортизованих основних засобів " + model.InventoryName +
//                " інвентарний № " + model.InventoryNumber + " »";
//            cells["A" + 14].Value = " 1 . ";
//            cells["B" + 14].Value = "Списати замортизований " + model.InventoryName + ":";
//            cells["B" + 15].Value = "інвентарний № " + model.InventoryNumber + " . ";
//            cells["A" + 17].Value = " 2 . ";
//            cells["B" + 17].Value = "Відповідальним за продаж призначаю: ";
//            cells["B" + 18].Value = "Першого заступника директора - Кондрашова В.В.. ";

//            cells["A" + 20].Value = " 3 . ";
//            cells["B" + 20].Value = "Головному бухгалтеру Сергієнко Л.В. виконати необхідні ";
//            cells["B" + 21].Value = "бухгалтерські операції при продажу та при знятті ";
//            cells["B" + 22].Value = "Основних засобів з бухгалтерського обліку:";
//            cells["B" + 23].Value = "інвентарний № " + model.InventoryNumber + " . ";
//            cells["A" + 25].Value = " 4 . ";
//            cells["B" + 25].Value = "Контроль за виконанням цього наказу покладаю на ";
//            cells["B" + 26].Value = "Першого заступника директора - Кондрашова В.В.. ";

//            try
//            {
//                worksheet.SaveAs(GeneratedReportsDir + "Наказ на списання № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Наказ на списання № 00-00-00-інв.№" + model.InventoryNumber.ToString().Replace("/", "_") + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//        }


//        public void PrintAllJournalFixedAssetsOder(List<FixedAssetsOrderRegJournalDTO> modelList, DateTime beginDate, DateTime endDate)
//        {
//            string templateName = " ";
//            templateName = @"\Templates\TemplateWithStamp.xls";

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            IRange cells = Worksheet.Cells;
//            int startRow = 3;
//            int indexRow = startRow + 1;

//            cells["D6"].Font.Bold = true;
//            cells["A8:G8"].Font.Bold = true;
//            cells["A8:G8"].HorizontalAlignment = HAlign.Center;

//            cells["A8:G8"].Borders.LineStyle = LineStyle.Continuous;

//            cells["A8:f8"].ColumnWidth = 20;
//            cells["G8"].ColumnWidth = 28;
//            string periodArchiveStr = beginDate.ToShortDateString() + " - " + endDate.ToShortDateString();
//            cells["D" + 6].Value = "Журнал регістрації наказів по Основним засобам за " + periodArchiveStr;
//            cells["A" + 8].Value = "№ п./п.";
//            cells["b" + 8].Value ="Інвентарний номер";
//            cells["c" + 8].Value ="Дата";
//            cells["d" + 8].Value ="Бал.рах.";
//            cells["e" + 8].Value ="Номер наказу	";
//            cells["f" + 8].Value ="Зміст";	
//            cells["g" + 8].Value ="Тип наказу";
//            int col = 9;
//            foreach (var item in modelList)
//            {
//                cells["a" + col].Value = item.Pos;
//                cells["b" + col].Value = item.InventoryNumber;
//                cells["c" + col].Value = item.DateOrder;
//                cells["d" + col].Value = item.BalanceAccountNum;
//                cells["e" + col].Value = item.NumberOrder;
//                cells["f" + col].Value = item.InventoryName;
//                cells["g" + col].Value = item.TypeOrder;

//                cells["a"+col].Borders.LineStyle = LineStyle.Continuous;
//                cells["b" + col].Borders.LineStyle = LineStyle.Continuous;
//                cells["c" + col].Borders.LineStyle = LineStyle.Continuous;
//                cells["d" + col].Borders.LineStyle = LineStyle.Continuous;
//                cells["e" + col].Borders.LineStyle = LineStyle.Continuous;
//                cells["f" + col].Borders.LineStyle = LineStyle.Continuous;
//                cells["g" + col].Borders.LineStyle = LineStyle.Continuous;

//                col++;
//            }

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Журнал регістрації наказів по Основним засобам за " + periodArchiveStr + ".xls", FileFormat.Excel8); Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Журнал регістрації наказів по Основним засобам за " + periodArchiveStr + ".xls";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        #region Report
//        public void FixedAssetsReportStrait(List<FixedAssetsOrderReportStraitDTO> model, DateTime startDate, DateTime endDate, Boolean Zero)
//        {
//            BindingSource FixedAssetsReportStraitBS = new BindingSource();
//            int check = 0;
//            int amorStartMonth = Convert.ToDateTime(startDate).Month;
//            int amorEndMonth = Convert.ToDateTime(startDate).Month;
//            int amorStarYear = Convert.ToDateTime(startDate).Year;
//            int amorEndYear = Convert.ToDateTime(startDate).Year;
//            List<FixedAssetsOrderReportStraitDTO> amorList = new List<FixedAssetsOrderReportStraitDTO>();
//            var findId = model.Find(a => a.Id == 56);
//            if (amorStartMonth == 12 && amorEndMonth == 12 && amorStarYear == 2020 && amorEndYear == 2020&&findId.Id==56)
//            {
//                check = 1;                
//                findId.CurrentAmortization = (decimal)1609.25;
//                amorList.Add(findId);
//            }

//            if(check==1)
//            {
//                model.Add(findId);
//               // var w = model.Single(a => a.InventoryNumber == "104530" && a.CurrentAmortization == (decimal)313.25);
//               // model.Remove(w);
//            }



//            FixedAssetsReportStraitBS.DataSource = model;
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsReportStrait.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;
//            StringBuilder SumH = new StringBuilder("=");
//            StringBuilder SumJ = new StringBuilder("=");
//            StringBuilder SumI = new StringBuilder("=");
//            StringBuilder SumK = new StringBuilder("=");
//            StringBuilder SumL = new StringBuilder("=");
//            StringBuilder SumM = new StringBuilder("=");
//            StringBuilder SumN = new StringBuilder("=");

//            Dictionary<string, string> ColumNameAsFAM_NUM = new Dictionary<string, string>();
//            Dictionary<string, StringBuilder> FAM_NUMAsColumSum = new Dictionary<string, StringBuilder>();

//            Func<Int32, string> ColumNameByIndex = (x) => { return vsS[x + 1]; };

           








//            Action<IRange, int, int, int, Dictionary<string, string>> WriteHatSum = (cel, currentPos, rowsStartGr, lastColIndexHat, DColumNameAsFAM_NUM) =>
//            {
//                cells["A" + currentPos + ":" + "G" + currentPos].Merge();
//                cel["A" + currentPos].Value = "Всього";
//                string startIndexSum = (rowsStartGr + 1).ToString();
//                string endIndexSum = (currentPos - 1).ToString();
//                cel["H" + currentPos].Value = "=SUM(H" + startIndexSum + ":H" + endIndexSum + ")";
//                SumH.AppendFormat("+H{0}", currentPos.ToString());
//                cel["I" + currentPos].Value = "=SUM(I" + startIndexSum + ":I" + endIndexSum + ")";
//                SumI.AppendFormat("+I{0}", currentPos.ToString());

//                cel["J" + currentPos].Value = "=SUM(J" + startIndexSum + ":J" + endIndexSum + ")";
//                SumJ.AppendFormat("+J{0}", currentPos.ToString());
//                cel["K" + currentPos].Value = "=SUM(K" + startIndexSum + ":K" + endIndexSum + ")";
//                SumK.AppendFormat("+K{0}", currentPos.ToString());

//                cel["L" + currentPos].Value = "=SUM(L" + startIndexSum + ":L" + endIndexSum + ")";
//                SumL.AppendFormat("+L{0}", currentPos.ToString());

//                cel["M" + currentPos].Value = "=SUM(M" + startIndexSum + ":M" + endIndexSum + ")";
//                SumM.AppendFormat("+M{0}", currentPos.ToString());

//                foreach (var item in DColumNameAsFAM_NUM)
//                {
//                    cel[item.Key + currentPos].Value = "=SUM(" + item.Key + startIndexSum + ":" + item.Key + endIndexSum + ")";
//                    if (FAM_NUMAsColumSum.ContainsKey(item.Value))
//                    {
//                        FAM_NUMAsColumSum[item.Value].AppendFormat("+{0}{1}", item.Key, currentPos.ToString());
//                    }
//                }
//                cells["A" + rowsStartGr + ":" + "H" + rowsStartGr].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + currentPos + ":" + ColumNameByIndex(lastColIndexHat) + currentPos].Interior.Color = Color.LightGreen;
//                cells["A" + currentPos + ":" + ColumNameByIndex(lastColIndexHat) + currentPos].NumberFormat = "### ### ##0.00"; 
//            };

//            Action<IRange, int, int, int, Dictionary<string, string>> WriteHatGlobalSum = (cel, currentPos, rowsStartGr, lastColIndexHat, DColumNameAsFAM_NUM) =>
//            {
//                cells["A" + currentPos + ":" + "G" + currentPos].Merge();
//                cel["A" + currentPos].Value = "Сума";
//                string startIndexSum = (rowsStartGr + 1).ToString();
//                string endIndexSum = (currentPos - 1).ToString();
//                cel["H" + currentPos].Value = SumH.ToString();
//                cel["I" + currentPos].Value = SumI.ToString();
//                cel["J" + currentPos].Value = SumJ.ToString();
//                cel["K" + currentPos].Value = SumK.ToString();

//                cel["L" + currentPos].Value = SumL.ToString();
//                cel["M" + currentPos].Value = SumM.ToString();
                    
//                foreach (var item in DColumNameAsFAM_NUM)
//                {
//                    cel[item.Key + currentPos].Value = FAM_NUMAsColumSum[item.Value].ToString();
//                }
//                cells["A" + rowsStartGr + ":" + "G" + rowsStartGr].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + currentPos + ":" + ColumNameByIndex(lastColIndexHat) + currentPos].Interior.Color = Color.Silver;
//                cells["A" + currentPos + ":" + ColumNameByIndex(lastColIndexHat) + currentPos].Font.Bold = true;
//                cells["A" + currentPos + ":" + ColumNameByIndex(lastColIndexHat) + currentPos].NumberFormat = "### ### ##0.00"; 
//            };

//            int n = 1;
//            int captionPosition = 7;
//            int startPosition = captionPosition + 2;
//            int currentPosition = startPosition + 1;
//            string activGroup = "@#$%^@&&";
//            int rowsStartGroup = 0;
//            int startNumColumIndexHat = 12;
//            int lastColumIndexHat = -1;
          
//            List<String> listOSNum = new List<String>() { "23", "91", "92", "93"};
           
//            foreach (var item in listOSNum)
//            {
//                ColumNameAsFAM_NUM.Add(ColumNameByIndex(startNumColumIndexHat), item);
//                FAM_NUMAsColumSum.Add(item, new StringBuilder("="));
//                cells[ColumNameByIndex(startNumColumIndexHat) + (startPosition).ToString()].Value = item;
//                startNumColumIndexHat++;
//                lastColumIndexHat = startNumColumIndexHat - 1;
//            }
         

//            cells["A" + (startPosition).ToString() + ":" + ColumNameByIndex(lastColumIndexHat) + (startPosition).ToString()].Borders.LineStyle = LineStyle.Continous;

//            cells["A" + captionPosition + ":" + ColumNameByIndex(lastColumIndexHat) + captionPosition].Merge();
//            cells["A" + captionPosition].Value = "Відомість основних засобів по групам" + (Zero ? " (замортизовано)" : "");
//            cells["A" + (captionPosition + 1) + ":" + ColumNameByIndex(lastColumIndexHat) + (captionPosition + 1)].Merge();
//            cells["A" + (captionPosition + 1)].Value = "за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//            cells["A" + (startPosition).ToString() + ":" + ColumNameByIndex(lastColumIndexHat) + (startPosition)].AutoFilter(1, null, AutoFilterOperator.Or, null, true);

//            for (int i = 0; i < FixedAssetsReportStraitBS.Count; i++)
//            {
//                if (activGroup != ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).GroupName.ToString())
//                {
//                    //Sum
//                    if (i != 0)
//                    {
//                        WriteHatSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);
//                        currentPosition++;
//                    }
//                    activGroup = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).GroupName.ToString();

//                    //Group
//                    rowsStartGroup = currentPosition;
//                    cells["A" + currentPosition].Value = "Группа: " + ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).FAONum + " "
//                        + ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).GroupName;
//                    cells["A" + currentPosition + ":" + "M" + currentPosition].Merge();
//                    cells["A" + currentPosition.ToString() + ":" + "H" + currentPosition.ToString()].Font.Bold = true;
//                    currentPosition++;
//                }
//                cells["A" + currentPosition].Value = n;
//                cells["B" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).FAONum;
//                cells["C" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).BeginDate;
//                cells["D" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).SupplierName;
//                cells["E" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).RegionName;
//                cells["F" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).InventoryNumber;
//                cells["G" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).InventoryName;
//                //    SUPPLIER_NAME

//                cells["H" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).BeginPrice;
//                cells["H" + currentPosition].NumberFormat = "### ### ##0.00";

//                cells["I" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).IncreasePrice;
//                cells["I" + currentPosition].NumberFormat = "### ### ##0.00";

//                cells["J" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).TotalPrice;
//                cells["J" + currentPosition].NumberFormat = "### ### ##0.00";

//                cells["K" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).CurrentPrice;
//                cells["K" + currentPosition].NumberFormat = "### ### ##0.00";

//                cells["L" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).PeriodAmortization;
//                cells["L" + currentPosition].NumberFormat = "### ### ##0.00";

//                cells["M" + currentPosition].Value = ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).PeriodYearAmortization;
//                cells["M" + currentPosition].NumberFormat = "### ### ##0.00";

//                string columName =ColumNameAsFAM_NUM.First((x) => x.Value == ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).FAMNum.ToString()).Key;
//                cells[columName + currentPosition].Value =
//                    (((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).PeriodYearAmortization.Value != 0) ? ((FixedAssetsOrderReportStraitDTO)FixedAssetsReportStraitBS[i]).CurrentAmortization.Value : 0;//cells["J" + currentPosition].Value;    

//                cells[columName + currentPosition].NumberFormat = "### ### ##0.00";
//                currentPosition++;
//                n++;
//            }
//            WriteHatSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);
//            currentPosition++;
//            WriteHatGlobalSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);

//            cells["A" + startPosition + ":" + ColumNameByIndex(lastColumIndexHat) + (currentPosition).ToString()].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + (startPosition - 2) + ":" + ColumNameByIndex(lastColumIndexHat) + (currentPosition).ToString()].Font.Size = 12;
//            cells["A" + (startPosition - 2) + ":" + ColumNameByIndex(lastColumIndexHat) + (startPosition).ToString()].Font.Bold = true;
//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Відомість основних засобів по групам" + Convert.ToDateTime(startDate).Month + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість основних засобів по групам" + Convert.ToDateTime(startDate).Month + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        double faGroupShort103 = 0;
//        public void FixedAssetsReportGroupShort(List<FixedAssetsOrderByGroupShortReportDTO> model, DateTime startDate, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
//            else
//            {
//                string templateName = " ";
//                templateName = @"\Templates\FixedAssetsByGroupShort.xls";
//                var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//                var Worksheet = Workbook.Worksheets[0];
//                var cells = Worksheet.Cells;
//                String activBalance_Account_Num = String.Empty;
//                String activGroupName = String.Empty;

//                Dictionary<String, String> mumIndex = new Dictionary<String, String>();
//                mumIndex.Add(vsS[1], "18");//23
//                mumIndex.Add(vsS[2], "19");//91
//                mumIndex.Add(vsS[3], "21");//92
//                mumIndex.Add(vsS[4], "23");//93

//                StringBuilder sumB = new StringBuilder("=SUM(");
//                StringBuilder sumC = new StringBuilder("=SUM(");
//                StringBuilder sumD = new StringBuilder("=SUM(");
//                StringBuilder sumE = new StringBuilder("=SUM(");
//                StringBuilder sumF = new StringBuilder("=SUM(");

//                int captionPosition = 6;
//                int startRow = captionPosition + 3;
//                int activRow = startRow;
//                String sumColIndex = "F";

//                Action<int> WriteSum = (sendActivRow) =>
//                {
//                    cells[String.Format("{0}{1}", sumColIndex, sendActivRow)].NumberFormat = "### ### ##0.00";
//                    cells[String.Format("{0}{1}", sumColIndex, sendActivRow)].Value = "=SUM(B" + sendActivRow + ":E" + sendActivRow + ")";
//                };

//                Action<int, int, int, string, Boolean, Boolean> WriteColumSum = (sendActivRow, sendStartActivSumRowIndex, sendEndActivSumRowIndex, numName, isLastSum, isNotGlobalSum) =>
//                {
//                    string activColumName = "B";
//                    string activAdressName = string.Empty;
//                    //A
//                    activColumName = "A";
//                    cells[String.Format("{0}{1}", activColumName, sendActivRow)].Value = isNotGlobalSum ? String.Format("{0} по рахунку {1}", "Всього", numName) : "Всього";
//                    cells[String.Format("{1}{0}:{2}{0}", sendActivRow, activColumName, "F")].Interior.Color = isNotGlobalSum ? Color.LightGreen : Color.Silver;
//                    //B
//                    activColumName = "B";
//                    activAdressName = String.Format("{0}{1}", activColumName, sendActivRow);
//                    cells[activAdressName].Value = isNotGlobalSum ? String.Format("=SUM({0}{1}:{0}{2})", activColumName, sendStartActivSumRowIndex, sendEndActivSumRowIndex) : sumB.ToString();
//                    //faGroupShort103 = (float)cells[activAdressName].Value;

//                    faGroupShort103 = Convert.ToDouble(cells[activAdressName].Value);

//                    cells[activAdressName].NumberFormat = "### ### ##0.00";
//                    sumB.Append(String.Format("{0}{1}", activAdressName, isLastSum ? ")" : "+"));
//                    //C
//                    activColumName = "C";
//                    activAdressName = String.Format("{0}{1}", activColumName, sendActivRow);
//                    cells[activAdressName].Value = isNotGlobalSum ? String.Format("=SUM({0}{1}:{0}{2})", activColumName, sendStartActivSumRowIndex, sendEndActivSumRowIndex) : sumC.ToString();
//                    cells[activAdressName].NumberFormat = "### ### ##0.00";
//                    sumC.Append(String.Format("{0}{1}", activAdressName, isLastSum ? ")" : "+"));
//                    //D
//                    activColumName = "D";
//                    activAdressName = String.Format("{0}{1}", activColumName, sendActivRow);
//                    cells[activAdressName].Value = isNotGlobalSum ? String.Format("=SUM({0}{1}:{0}{2})", activColumName, sendStartActivSumRowIndex, sendEndActivSumRowIndex) : sumD.ToString();
//                    cells[activAdressName].NumberFormat = "### ### ##0.00";
//                    sumD.Append(String.Format("{0}{1}", activAdressName, isLastSum ? ")" : "+"));
//                    //E
//                    activColumName = "E";
//                    activAdressName = String.Format("{0}{1}", activColumName, sendActivRow);
//                    cells[activAdressName].Value = isNotGlobalSum ? String.Format("=SUM({0}{1}:{0}{2})", activColumName, sendStartActivSumRowIndex, sendEndActivSumRowIndex) : sumE.ToString();
//                    cells[activAdressName].NumberFormat = "### ### ##0.00";
//                    sumE.Append(String.Format("{0}{1}", activAdressName, isLastSum ? ")" : "+"));
//                    //F
//                    activColumName = "F";
//                    activAdressName = String.Format("{0}{1}", activColumName, sendActivRow);
//                    cells[activAdressName].Value = isNotGlobalSum ? String.Format("=SUM({0}{1}:{0}{2})", activColumName, sendStartActivSumRowIndex, sendEndActivSumRowIndex) : sumF.ToString();
//                    cells[activAdressName].NumberFormat = "### ### ##0.00";
//                    sumF.Append(String.Format("{0}{1}", activAdressName, isLastSum ? ")" : "+"));
//                };

//                var activAdressRange = String.Format("A" + captionPosition + ":{0}" + captionPosition, sumColIndex);
//                cells[activAdressRange].Merge();
//                cells["A" + captionPosition].Value = "Відомість основних засобів по групам (скорочено)";
//                cells[activAdressRange].Font.Bold = true;
//                cells[activAdressRange].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//                cells[activAdressRange].VerticalAlignment = SpreadsheetGear.VAlign.Center;

//                activAdressRange = String.Format("A" + (captionPosition + 1) + ":{0}" + (captionPosition + 1), sumColIndex);
//                cells[activAdressRange].Merge();
//                cells["A" + (captionPosition + 1)].Value = "за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString();
//                cells[activAdressRange].Font.Bold = true;
//                cells[activAdressRange].HorizontalAlignment = SpreadsheetGear.HAlign.Center;
//                cells[activAdressRange].VerticalAlignment = SpreadsheetGear.VAlign.Center;

//                int startActivSumRowIndex = -1;
//                int endActivSumRowIndex = -1;

//                activRow--;
//                foreach (var item in model)
//                {
//                    if (String.Compare(activGroupName, item.Name.ToString(), true) != 0)
//                    {
//                        if (String.Compare(activGroupName, String.Empty, true) != 0)
//                        {
//                            WriteSum(activRow);
//                        }

//                        if (String.Compare(activBalance_Account_Num, item.Num.ToString(), true) != 0)
//                        {
//                            if (String.Compare(activBalance_Account_Num, String.Empty, true) != 0)
//                            {
//                                activRow++;
//                                endActivSumRowIndex = activRow - 1;
//                                WriteColumSum(activRow, startActivSumRowIndex, endActivSumRowIndex, activBalance_Account_Num, false, true);
//                            }
//                            startActivSumRowIndex = activRow + 1;
//                            activGroupName = String.Empty;
//                            activBalance_Account_Num = item.Num.ToString();

//                        }
//                        activRow++;
//                        activGroupName = item.Name.ToString();
//                    }


//                    cells[String.Format("{0}{1}", "A", activRow)].Value = item.Name;

//                    var columName = mumIndex.FirstOrDefault(X => String.Compare(X.Value, item.Fixed_Account_Id.ToString(), true) == 0).Key;
//                    if (columName != null)
//                    {
//                        cells[String.Format("{0}{1}", columName, activRow)].Value = item.PeriodAmortization;
//                        cells[String.Format("{0}{1}", columName, activRow)].NumberFormat = "### ### ##0.00";
//                    }
//                }
//                WriteSum(activRow);
//                endActivSumRowIndex = activRow;
//                activRow++;
//                WriteColumSum(activRow, startActivSumRowIndex, endActivSumRowIndex, activBalance_Account_Num, true, true);
//                //Global ROW sum
//                activRow++;
//                WriteColumSum(activRow, startActivSumRowIndex, endActivSumRowIndex, activBalance_Account_Num, true, false);

//                PrintSignatures(cells, activRow + 3);

//                cells["A" + startRow + ":" + sumColIndex + activRow].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + startRow + ":" + sumColIndex + activRow].Font.Size = 12;

//                try
//                {
//                    Workbook.SaveAs(GeneratedReportsDir + "Відомість ОЗ по групам (скорочено)" + "за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                    Process process = new Process();
//                    process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Відомість ОЗ по групам (скорочено)" + "за період з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls";// +"\"";
//                    process.StartInfo.FileName = "Excel.exe";
//                    process.Start();
//                }
//                catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//                catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            }
//        }


//        public void FixedAssetsRegisterCh1(List<FixedAssetsReportRegisterCh1DTO> model, DateTime startDate, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
//            else
//            {
//                string templateName = " ";
//                templateName = @"\Templates\FixedAssetsRegisterCh1.xls";
//                var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//                var Worksheet = Workbook.Worksheets[0];
//                var cells = Worksheet.Cells;

//                var containsList = new List<int> { 2, 10 }; // разделяем амортизацию 

//                var dataIncludePO = (from data in model//.AsEnumerable()
//                                     where !containsList.Contains(data.RecId)
//                                     group data by data.FamNum
//                                     into grdata
//                                     select new
//                                     {
//                                         FAM_NUM = grdata.Key,
//                                         CURRENTAMORTIZATIONFORPERIOD = grdata.Sum(o => o.CurrentAmortizationForPeriod)
//                                     }).ToList();

//                var dataOnly133 = (from data in model
//                                   where containsList.Contains(data.RecId)
//                                   group data by data.FamNum 
//                                   into grdata
//                                   select new
//                                   {
//                                       FAM_NUM = grdata.Key,
//                                       CURRENTAMORTIZATIONFORPERIOD = grdata.Sum(o => o.CurrentAmortizationForPeriod)
//                                   }).ToList();
               
//                Dictionary<string, int> listSNumToIIndexRow = new Dictionary<string, int>();
//                listSNumToIIndexRow.Add("13", 16);
//                listSNumToIIndexRow.Add("14", 17);
//                listSNumToIIndexRow.Add("15", 18);
//                listSNumToIIndexRow.Add("23", 19);
//                listSNumToIIndexRow.Add("37", 20);
//                listSNumToIIndexRow.Add("39", 21);
//                listSNumToIIndexRow.Add("42", 22);
//                listSNumToIIndexRow.Add("68", 23);
//                listSNumToIIndexRow.Add("83", 24);
//                listSNumToIIndexRow.Add("84", 25);
//                listSNumToIIndexRow.Add("85", 26);
//                listSNumToIIndexRow.Add("91", 27);
//                listSNumToIIndexRow.Add("92", 28);
//                listSNumToIIndexRow.Add("93", 29);
//                listSNumToIIndexRow.Add("94", 30);
//                listSNumToIIndexRow.Add("97", 31);
//                listSNumToIIndexRow.Add("99", 32);

//                foreach (var item in dataIncludePO)
//                {
//                    try
//                    {
//                        var indexRow = listSNumToIIndexRow.First(X => X.Key == item.FAM_NUM.ToString()).Value;
//                        cells["E" + indexRow].NumberFormat = "### ### ##0.00";
//                        cells["E" + indexRow].Value = item.CURRENTAMORTIZATIONFORPERIOD;

//                    }
//                    catch (InvalidOperationException)
//                    {
//                    }
//                }

//                foreach (var item in dataOnly133)
//                {
//                    try
//                    {
//                        var indexRow = listSNumToIIndexRow.First(X => X.Key == item.FAM_NUM.ToString()).Value;
//                        cells["G" + indexRow].NumberFormat = "### ### ##0.00";
//                        cells["G" + indexRow].Value = item.CURRENTAMORTIZATIONFORPERIOD;
//                    }
//                    catch (InvalidOperationException)
//                    {
//                    }
//                }


//                try
//                {
//                    Workbook.SaveAs(GeneratedReportsDir + "Журнал №4 ч.1 з "+ startDate.ToShortDateString()+" по "+ endDate.ToShortDateString() + ".xls", FileFormat.Excel8);
                  
//                    Process process = new Process();
//                    process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Журнал №4 ч.1 з " + startDate.ToShortDateString() + " по " + endDate.ToShortDateString() + ".xls" + "\"";
//                    process.StartInfo.FileName = "Excel.exe";
//                    process.Start();
//                }
//                catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//                catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            }
//        }
        
        
//        public void FixedAssetsRegisterCh2(List<FixedAssetsReportRegisterCh2DTO> model, DateTime startDate, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
//            string templateName = " ";
//            templateName = @"\Templates\FixedAssetsRegisterCh2.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);

//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;

//            Dictionary<int, int> listITableFAGroupIdToIIndexRow = new Dictionary<int, int>();
            
//            listITableFAGroupIdToIIndexRow.Add(3, 12);//103 "Будівлі"
//            listITableFAGroupIdToIIndexRow.Add(8, 13);//103 "Споруди"
//            listITableFAGroupIdToIIndexRow.Add(1, 14);//103 "Передавальні пристрої"
//            listITableFAGroupIdToIIndexRow.Add(4, 15);//104
//            listITableFAGroupIdToIIndexRow.Add(5, 16);//104.1
//            listITableFAGroupIdToIIndexRow.Add(6, 17);//105
//            listITableFAGroupIdToIIndexRow.Add(7, 18);//106
//            listITableFAGroupIdToIIndexRow.Add(9, 19);//109
//            listITableFAGroupIdToIIndexRow.Add(2, 21);//112

//            for (int i = 0; i < model.Count; i++)
//            {
//                try
//                {
//                    var indexColum = "D";
//                    var indexRow = listITableFAGroupIdToIIndexRow.First(X => X.Key.ToString() == model[i].GroupId.ToString()).Value;
//                    cells[indexColum + indexRow].NumberFormat = "### ### ##0.00";
//                    cells[indexColum + indexRow].Value = model[i].FixedPrice;//
//                }
//                catch (InvalidOperationException)
//                {
//                }
//            }

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + String.Format("Журнал №4 ч.2 з {0} по {1} ", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + String.Format("Журнал №4 ч.2 з {0} по {1} ", startDate.ToShortDateString(), endDate.ToShortDateString()) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }


//        }

//        public void InputFixedAssetsForGroup(List<InputFixedAssetsForGroupDTO> model, DateTime startDate, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
//            string templateName = " ";
//            templateName = @"\Templates\InputFixedAssetsForGroup.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
           
//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;

//            int captionPosition = 7;
//            int startGroupPosition = -100;
//            int startPosition = captionPosition + 2;
//            int currentPosition = startPosition;
//            int n = 1;
//            string activGroup = "";
//            DateTime beginHeaderDate = Convert.ToDateTime(startDate).AddDays(-1);
//            DateTime endHeaderDate = Convert.ToDateTime(endDate);

//            StringBuilder SumG = new StringBuilder("=");
//            StringBuilder SumH = new StringBuilder("=");
//            StringBuilder SumI = new StringBuilder("=");


//            cells["D" + captionPosition + ":" + "H" + captionPosition].Merge();
//            cells["D" + captionPosition].HorizontalAlignment = HAlign.Center;
//            cells["D" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["D" + captionPosition].Font.Bold = true;
//            cells["D" + captionPosition].Value = "Введення основних засобів з " + beginHeaderDate.ToShortDateString() + " по " + endHeaderDate.ToShortDateString() + "(по групам)";
//            cells["G" + (captionPosition + 1)].Value = cells["G" + (captionPosition + 1)].Value + beginHeaderDate.ToShortDateString();
//            cells["H" + (captionPosition + 1)].Value = cells["H" + (captionPosition + 1)].Value + endHeaderDate.ToShortDateString();

//            Action<int, int> EndSumWrite = (currentPos, startGroupPos) =>
//            {
//                cells["A" + currentPos + ":I" + currentPos].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + currentPos + ":I" + currentPos].Interior.Color = Color.LightGreen;
//                cells["A" + currentPos + ":I" + currentPos].Font.Bold = true;

//                cells["A" + currentPos].Value = "Всього:";
//                cells["G" + currentPos].Value = "=SUM(G" + startGroupPos.ToString() + ":G" + (currentPos - 1).ToString() + ")";
//                cells["H" + currentPos].Value = "=SUM(H" + startGroupPos.ToString() + ":H" + (currentPos - 1).ToString() + ")";
//                cells["I" + currentPos].Value = "=SUM(I" + startGroupPos.ToString() + ":I" + (currentPos - 1).ToString() + ")";


//                cells["G" + currentPosition + ":" + "I" + currentPosition].NumberFormat = "### ### ##0.00";

//                //global sum add
//                SumG.AppendFormat("+G{0}", currentPosition.ToString());
//                SumH.AppendFormat("+H{0}", currentPosition.ToString());
//                SumI.AppendFormat("+I{0}", currentPosition.ToString());
//            };

//            for (int i = 0; i < model.Count; i++)
//            {
//                if (activGroup != model[i].Group_Id.ToString())
//                {
//                    if (startGroupPosition != -100)
//                    {
//                        EndSumWrite(currentPosition, startGroupPosition);
//                        currentPosition++;
//                    }
//                    activGroup = model[i].Group_Id.ToString();
//                    //Group
//                    cells["A" + currentPosition].Value = "Група: " + model[i].GroupName;
//                    cells["A" + currentPosition + ":" + "I" + currentPosition].Merge();
//                    cells["A" + currentPosition.ToString() + ":" + "I" + currentPosition.ToString()].Font.Bold = true;
//                    currentPosition++;
//                    startGroupPosition = currentPosition;
//                }

//                cells["A" + currentPosition].Value = n;
//                cells["B" + currentPosition].Value = model[i].Num;
//                cells["C" + currentPosition].Value = model[i].YearSet;
//                cells["D" + currentPosition].Value = model[i].MonthSet;
//                cells["E" + currentPosition].Value = model[i].InventoryNumber;
//                cells["E" + currentPosition].HorizontalAlignment = HAlign.Right;
//                cells["F" + currentPosition].Value = model[i].InventoryName;
//                cells["G" + currentPosition].Value = model[i].FYearPrice;
//                cells["H" + currentPosition].Value = model[i].LYearPrice;
//                cells["I" + currentPosition].Value = model[i].Difference;
//                cells["G" + currentPosition + ":" + "I" + currentPosition].NumberFormat = "### ### ##0.00";
//                currentPosition++;
//                n++;
//            }
//            EndSumWrite(currentPosition, startGroupPosition);
//            currentPosition++;

//            cells["A" + currentPosition].Value = "Сума:";
//            cells["A" + currentPosition + ":" + "I" + currentPosition].Font.Bold = true;
//            cells["G" + currentPosition].Value = SumG.ToString();
//            cells["H" + currentPosition].Value = SumH.ToString();
//            cells["I" + currentPosition].Value = SumI.ToString();
//            cells["A" + currentPosition + ":" + "I" + currentPosition].NumberFormat = "### ### ##0.00";

//            cells["A" + currentPosition + ":I" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + currentPosition + ":I" + currentPosition].Interior.Color = Color.Silver;
//            cells["A" + currentPosition + ":I" + currentPosition].Font.Bold = true;

//            PrintSignatures(cells, currentPosition + 3);

//            cells["A" + startPosition + ":I" + currentPosition].Borders.LineStyle = LineStyle.Continous;

//            try
//            {
//                string documentAddresName = GeneratedReportsDir + "Введення основних засобів з " + beginHeaderDate.ToShortDateString() + " по " + endHeaderDate.ToShortDateString() + "(по групам).xls";
//                Workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        public void InputFixedAssetsForQuarterReport(List<InputFixedAssetsForQuarterDTO> model, string reportYear)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }
//            string templateName = " ";
//            templateName = @"\Templates\InputFixedAssetsForQuarter.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);


//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;

//            string headerValue = reportYear;

//            Action<int, int, string> EndSumWrite = (currentRow, starRowFormula, accountValue) =>
//            {
//                cells["A" + currentRow].Value = "Всього: " + accountValue;
//                cells["A" + currentRow].HorizontalAlignment = HAlign.Left;
//                cells["A" + currentRow + ":N" + currentRow].Interior.Color = Color.DeepSkyBlue;
//                cells["B" + currentRow].Value = "=SUM(B" + starRowFormula + ":B" + (currentRow - 1) + ")";
//                cells["C" + currentRow].Value = "=SUM(C" + starRowFormula + ":C" + (currentRow - 1) + ")";
//                cells["D" + currentRow].Value = "=SUM(D" + starRowFormula + ":D" + (currentRow - 1) + ")";
//                cells["E" + currentRow].Value = "=SUM(E" + starRowFormula + ":E" + (currentRow - 1) + ")";
//                cells["F" + currentRow].Value = "=SUM(F" + starRowFormula + ":F" + (currentRow - 1) + ")";
//                cells["G" + currentRow].Value = "=SUM(G" + starRowFormula + ":G" + (currentRow - 1) + ")";
//                cells["H" + currentRow].Value = "=SUM(H" + starRowFormula + ":H" + (currentRow - 1) + ")";
//                cells["I" + currentRow].Value = "=SUM(I" + starRowFormula + ":I" + (currentRow - 1) + ")";
//                cells["J" + currentRow].Value = "=SUM(J" + starRowFormula + ":J" + (currentRow - 1) + ")";
//                cells["K" + currentRow].Value = "=SUM(K" + starRowFormula + ":K" + (currentRow - 1) + ")";
//                cells["L" + currentRow].Value = "=SUM(L" + starRowFormula + ":L" + (currentRow - 1) + ")";
//                cells["M" + currentRow].Value = "=SUM(M" + starRowFormula + ":M" + (currentRow - 1) + ")";

//                cells["N" + currentRow].Value = "=SUM(B" + currentRow + ",E" + currentRow + ",H" + currentRow + ",K" + currentRow + ")";
//            };

//            int captionPosition = 6;
//            int startPosition = captionPosition + 2;
//            int currentPosition = startPosition;
//            int startFormulaPosition = currentPosition;
//            short currentAccountId = (short)model[0].BalanceAccountId;
//            string currentAccountNum = (string)model[0].BalanceAccountNum;

//            cells["A" + captionPosition].Value = "Введення основних засобів у " + headerValue + "р.";

//            for (int i = 0; i < model.Count; i++)
//            {
//                if (currentAccountId != (short)model[i].BalanceAccountId)
//                {
//                    EndSumWrite(currentPosition, startFormulaPosition, currentAccountNum);
//                    currentAccountNum = (string)model[i].BalanceAccountNum;
//                    currentAccountId = (short)model[i].BalanceAccountId;

//                    currentPosition++;
//                    startFormulaPosition = currentPosition;
//                }

//                cells["A" + currentPosition].Value = model[i].GroupName;
//                cells["B" + currentPosition].Value = model[i].FirstQuarterSum;
//                cells["C" + currentPosition].Value = model[i].FirstQuarterSumSold;
//                cells["D" + currentPosition].Value = model[i].FirstQuarterSumExpen;
//                cells["E" + currentPosition].Value = model[i].SecondQuarterSum;
//                cells["F" + currentPosition].Value = model[i].SecondQuarterSumSold;
//                cells["G" + currentPosition].Value = model[i].SecondQuarterSumExpen;
//                cells["H" + currentPosition].Value = model[i].ThirdQuarterSum;
//                cells["I" + currentPosition].Value = model[i].ThirdQuarterSumSold;
//                cells["J" + currentPosition].Value = model[i].ThirdQuarterSumExpen;
//                cells["K" + currentPosition].Value = model[i].FourthQuarterSum;
//                cells["L" + currentPosition].Value = model[i].FourthQuarterSumSold;
//                cells["M" + currentPosition].Value = model[i].FourthQuarterSumExpen;
//                cells["N" + currentPosition].Value = "=SUM(B" + currentPosition + ",D" + currentPosition + ",F" + currentPosition + ",H" + currentPosition + ")";

//                currentPosition++;
//            }

//            EndSumWrite(currentPosition, startFormulaPosition, currentAccountNum);
//            currentPosition++;

//            cells["A" + currentPosition].Value = "Сума: ";
//            cells["A" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["A" + currentPosition + ":N" + currentPosition].Interior.Color = Color.LightGreen;

//            cells["B" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FirstQuarterSum);
//            cells["C" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FirstQuarterSumSold);
//            cells["D" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FirstQuarterSumExpen);
//            cells["E" + currentPosition].Value = model.AsEnumerable().Sum(x => x.SecondQuarterSum);
//            cells["F" + currentPosition].Value = model.AsEnumerable().Sum(x => x.SecondQuarterSumSold);
//            cells["G" + currentPosition].Value = model.AsEnumerable().Sum(x => x.SecondQuarterSumExpen);
//            cells["H" + currentPosition].Value = model.AsEnumerable().Sum(x => x.ThirdQuarterSum);
//            cells["I" + currentPosition].Value = model.AsEnumerable().Sum(x => x.ThirdQuarterSumSold);
//            cells["J" + currentPosition].Value = model.AsEnumerable().Sum(x => x.ThirdQuarterSumExpen);
//            cells["K" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FourthQuarterSum);
//            cells["L" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FourthQuarterSumSold);
//            cells["M" + currentPosition].Value = model.AsEnumerable().Sum(x => x.FourthQuarterSumExpen);

//            cells["N" + currentPosition].Value = "=SUM(B" + currentPosition + ",E" + currentPosition + ",H" + currentPosition + ",K" + currentPosition + ")";

//            cells["A" + startPosition + ":N" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//            cells["B" + startPosition + ":N" + currentPosition].NumberFormat = "### ### ##0.00";

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                string documentAddresName = GeneratedReportsDir + "Введення основних засобів у " + headerValue + "р.xls";
//                Workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }


//        public void InventoryFixedAssetsForGroups(List<FixedAssetsOrderReportStraitDTO> model, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            var orderSource = model.AsEnumerable().OrderBy(r => r.GroupId).ThenByDescending(r => r.FAONum);

//            string templateName = " ";
//            templateName = @"\Templates\TemplateWithStamp.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);

//            var Worksheet = Workbook.Worksheets[0];
//            var cells = Worksheet.Cells;
//            StringBuilder SumH = new StringBuilder("=");
//            StringBuilder SumJ = new StringBuilder("=");
//            StringBuilder SumI = new StringBuilder("=");
//            StringBuilder SumK = new StringBuilder("=");
//            StringBuilder SumL = new StringBuilder("=");
//            StringBuilder SumM = new StringBuilder("=");

//            Dictionary<string, string> ColumNameAsFAM_NUM = new Dictionary<string, string>();
//            Dictionary<string, StringBuilder> FAM_NUMAsColumSum = new Dictionary<string, StringBuilder>();

//            Func<Int32, string> ColumNameByIndex = (x) => { return vsS[x + 1]; };

//            Action<IRange, int, int, int, Dictionary<string, string>> WriteHatSum = (cel, currentPos, rowsStartGr, lastColIndexHat, DColumNameAsFAM_NUM) =>
//            {
//                cells["A" + currentPos + ":" + "G" + currentPos].Merge();
//                cel["A" + currentPos].Value = "Всього";
//                string startIndexSum = (rowsStartGr + 1).ToString();
//                string endIndexSum = (currentPos - 1).ToString();
//                cel["I" + currentPos].Value = "=SUM(I" + startIndexSum + ":I" + endIndexSum + ")";
//                SumH.AppendFormat("+I{0}", currentPos.ToString());
//                cel["J" + currentPos].Value = "=SUM(J" + startIndexSum + ":J" + endIndexSum + ")";
//                SumI.AppendFormat("+J{0}", currentPos.ToString());

//                cells["H" + currentPos + ":" + "J" + currentPos].NumberFormat = "### ### ##0.00";

//                cells["A" + rowsStartGr + ":" + "J" + rowsStartGr].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + currentPos + ":" + "J" + currentPos].Interior.Color = Color.LightGreen;
//            };

//            Action<IRange, int, int, int, Dictionary<string, string>> WriteHatGlobalSum = (cel, currentPos, rowsStartGr, lastColIndexHat, DColumNameAsFAM_NUM) =>
//            {
//                cells["A" + currentPos + ":" + "G" + currentPos].Merge();
//                cel["A" + currentPos].Value = "Сума";
//                string startIndexSum = (rowsStartGr + 1).ToString();
//                string endIndexSum = (currentPos - 1).ToString();
//                cel["I" + currentPos].Value = SumH.ToString();
//                cel["J" + currentPos].Value = SumI.ToString();

//                cells["I" + currentPos + ":" + "J" + currentPos].NumberFormat = "### ### ##0.00";

//                cells["A" + rowsStartGr + ":" + "G" + rowsStartGr].Borders.LineStyle = LineStyle.Continous;
//                cells["A" + currentPos + ":" + "J" + currentPos].Interior.Color = Color.Silver;
//                cells["A" + currentPos + ":" + "J" + currentPos].Font.Bold = true;
//            };

//            int captionPosition = 6;
//            int n = 1;
//            int startPosition = captionPosition + 2;
//            int currentPosition = 0;
//            string activGroup = "@#$%^@&&";
//            int rowsStartGroup = 0;
//            int lastColumIndexHat = -1;

//            cells["A" + captionPosition + ":" + "J" + captionPosition].Merge();
//            cells["A" + captionPosition].Value = "Інвентаризаційна відомість основных засобів (по групам)";
//            cells["A" + (captionPosition + 1) + ":" + "J" + (captionPosition + 1)].Merge();
//            cells["A" + (captionPosition + 1)].Value = "станом на " + endDate.ToShortDateString();

//            cells["A" + captionPosition + ":" + "J" + (captionPosition + 1)].HorizontalAlignment = HAlign.Center;
//            cells["A" + captionPosition + ":" + "J" + (captionPosition + 1)].VerticalAlignment = VAlign.Center;

//            cells["A" + startPosition].Value = "№";
//            cells["B" + startPosition].Value = "Балансовый рахунок";
//            cells["C" + startPosition].Value = "Дата прийняття до обліку";
//            cells["D" + startPosition].Value = "Відповідальна особа";
//            cells["E" + startPosition].Value = "Експлуатуюча особа";
//            cells["F" + startPosition].Value = "Дільниця";
//            cells["G" + startPosition].Value = "Інвентарний номер";
//            cells["H" + startPosition].Value = "Найменування";
//            cells["I" + startPosition].Value = "Первинна вартість";
//            cells["J" + startPosition].Value = "Залишкова вартість";

//            cells["A" + startPosition].RowHeight = 30;
//            cells["A" + startPosition + ":" + "J" + startPosition].AutoFilter(1, null, AutoFilterOperator.Or, null, true);
//            cells["A" + startPosition + ":" + "J" + startPosition].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + "J" + startPosition].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + "J" + startPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + "J" + startPosition].WrapText = true;

//            cells["A1"].ColumnWidth = 15;
//            cells["B1"].ColumnWidth = 15;
//            cells["C1"].ColumnWidth = 20;
//            cells["D1"].ColumnWidth = 70;
//            cells["E1"].ColumnWidth = 70;
//            cells["F1"].ColumnWidth = 30;
//            cells["G1"].ColumnWidth = 15;
//            cells["H1"].ColumnWidth = 50;
//            cells["I1"].ColumnWidth = 15;
//            cells["J1"].ColumnWidth = 15;

//            startPosition++;

//            currentPosition = startPosition;

//            for (int i = 0; i < model.Count; i++)
//            {
//                if (activGroup != model[i].GroupName.ToString())
//                {
//                    //Sum
//                    if (i != 0)
//                    {
//                        WriteHatSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);
//                        currentPosition++;
//                    }
//                    activGroup = model[i].GroupName.ToString();

//                    rowsStartGroup = currentPosition;
//                    cells["A" + currentPosition].Value = "Группа: " + model[i].FAONum + " " + model[i].GroupName;
//                    cells["A" + currentPosition + ":" + "I" + currentPosition].Merge();
//                    cells["A" + currentPosition].Font.Bold = true;
//                    currentPosition++;
//                }
//                cells["A" + currentPosition].Value = n;
//                cells["B" + currentPosition].Value = model[i].FAONum;
//                cells["C" + currentPosition].Value = model[i].BeginDate;
//                cells["D" + currentPosition].Value = model[i].SupplierName;
//                cells["E" + currentPosition].Value = model[i].OperatingPersonName;
//                cells["F" + currentPosition].Value = model[i].RegionName;
//                cells["G" + currentPosition].Value = model[i].InventoryNumber;
//                cells["H" + currentPosition].Value = model[i].InventoryName;
//                cells["I" + currentPosition].Value = model[i].TotalPriceFull;
//                cells["I" + currentPosition].NumberFormat = "### ### ##0.00";
//                cells["J" + currentPosition].Value = model[i].CurrentPrice;
//                cells["J" + currentPosition].NumberFormat = "### ### ##0.00";

//                currentPosition++;
//                n++;
//            }
//            WriteHatSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);
//            currentPosition++;
//            WriteHatGlobalSum(cells, currentPosition, rowsStartGroup, lastColumIndexHat, ColumNameAsFAM_NUM);

//            cells["A" + startPosition + ":" + "J" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + captionPosition + ":" + "J" + currentPosition].Font.Size = 12;
//            cells["A" + captionPosition + ":" + "J" + startPosition].Font.Bold = true;
//            cells["A" + startPosition + ":" + "J" + currentPosition].WrapText = true;
//            cells["A" + startPosition + ":" + "J" + currentPosition].HorizontalAlignment = HAlign.Left;
//            cells["A" + startPosition + ":" + "J" + currentPosition].VerticalAlignment = VAlign.Center;

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Інвентаризаційна відомість ОЗ (по групам) станом на " + endDate.ToShortDateString() + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Інвентаризаційна відомість ОЗ (по групам) станом на " + endDate.ToShortDateString() + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//        }

//        public void InventoryForFixedAssets(List<FixedAssetsOrderReportStraitDTO> model, DateTime endDate)
//        {
//            if (model.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return;
//            }

//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook();
//            SpreadsheetGear.IWorksheet worksheet = workbook.Worksheets[0];
//            SpreadsheetGear.IRange cells = worksheet.Cells;


//            int currentPosition = 0;
//            int startPosition = 2;

//            #region FirstPage func
//            Func<int, int> FirstPage = (currentRow) =>
//            {
//                cells["A" + currentRow].Value = "ТОВ «Науково-виробнича Фірма «ТЕХВАГОНМАШ»";
//                cells["A" + currentRow + ":E" + currentRow].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 1) + ":E" + (currentRow + 1)].Merge();
//                cells["A" + (currentRow + 1) + ":E" + (currentRow + 1)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 1)].Value = "(установа, органiзацiя)";
//                cells["A" + (currentRow + 2)].Value = "Iдентифiкацiйний код за ЄДРПОУ:";
//                cells["E" + (currentRow + 2)].Value = "32686844";
//                cells["E" + (currentRow + 2) + ":E" + (currentRow + 2)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 3) + ":B" + (currentRow + 3)].Merge();
//                cells["A" + (currentRow + 3) + ":B" + (currentRow + 3)].HorizontalAlignment = HAlign.Left;
//                cells["A" + (currentRow + 3)].Value = "м.Кременчук";
//                cells["A" + (currentRow + 4) + ":L" + (currentRow + 4)].Merge();
//                cells["A" + (currentRow + 4)].Value = "Iнвентарiзацiйний опис основних засобiв";
//                cells["A" + (currentRow + 4) + ":L" + (currentRow + 4)].Font.Bold = true;
//                cells["A" + (currentRow + 4) + ":L" + (currentRow + 4)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 6) + ":C" + (currentRow + 6)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 7) + ":C" + (currentRow + 7)].Merge();
//                cells["A" + (currentRow + 7)].Value = "(дата складання)";
//                cells["A" + (currentRow + 7) + ":C" + (currentRow + 7)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 9) + ":B" + (currentRow + 9)].Merge();
//                cells["A" + (currentRow + 9)].Value = "Основнi засоби";
//                cells["C" + (currentRow + 9) + ":L" + (currentRow + 9)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 10) + ":B" + (currentRow + 10)].Merge();
//                cells["A" + (currentRow + 10)].Value = "Мiсцезнаходження";
//                cells["C" + (currentRow + 10)].Value = "ТОВ «Науково-виробнича Фірма «ТЕХВАГОНМАШ»";
//                cells["C" + (currentRow + 10) + ":L" + (currentRow + 10)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["F" + (currentRow + 12) + ":H" + (currentRow + 12)].Merge();
//                cells["F" + (currentRow + 12)].Value = "Розписка";
//                cells["F" + (currentRow + 12) + ":H" + (currentRow + 12)].Font.Bold = true;
//                cells["F" + (currentRow + 12) + ":H" + (currentRow + 12)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 14) + ":L" + (currentRow + 16)].Merge();
//                cells["A" + (currentRow + 14) + ":L" + (currentRow + 16)].WrapText = true;
//                cells["A" + (currentRow + 14)].Value = "До початку проведення інвентаризації всі видаткові та прибуткові документі на основні засобі здані в бухгалтерію і всі основні засобі," +
//                                                       " що надійшли на мою (нашу) відповідальність, оприбутковані, а ті, що вибули, списані.\n" +
//                                                       "Особа(и), відповідально(і) за збереження основніх засобів:";
//                cells["B" + (currentRow + 18) + ":D" + (currentRow + 18)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["F" + (currentRow + 18) + ":H" + (currentRow + 18)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["J" + (currentRow + 18) + ":L" + (currentRow + 18)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["B" + (currentRow + 19) + ":D" + (currentRow + 19)].Merge();
//                cells["F" + (currentRow + 19) + ":H" + (currentRow + 19)].Merge();
//                cells["J" + (currentRow + 19) + ":L" + (currentRow + 19)].Merge();
//                cells["B" + (currentRow + 19) + ":D" + (currentRow + 19)].Value = "(посада, підпис)";
//                cells["F" + (currentRow + 19) + ":H" + (currentRow + 19)].Value = "(посада, підпис)";
//                cells["J" + (currentRow + 19) + ":L" + (currentRow + 19)].Value = "(посада, підпис)";
//                cells["B" + (currentRow + 19) + ":D" + (currentRow + 19)].HorizontalAlignment = HAlign.Center;
//                cells["F" + (currentRow + 19) + ":H" + (currentRow + 19)].HorizontalAlignment = HAlign.Center;
//                cells["J" + (currentRow + 19) + ":L" + (currentRow + 19)].HorizontalAlignment = HAlign.Center;
//                cells["B" + (currentRow + 20) + ":D" + (currentRow + 20)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["F" + (currentRow + 20) + ":H" + (currentRow + 20)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["J" + (currentRow + 20) + ":L" + (currentRow + 20)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["B" + (currentRow + 21) + ":D" + (currentRow + 21)].Merge();
//                cells["F" + (currentRow + 21) + ":H" + (currentRow + 21)].Merge();
//                cells["J" + (currentRow + 21) + ":L" + (currentRow + 21)].Merge();
//                cells["B" + (currentRow + 21) + ":D" + (currentRow + 21)].Value = "(прізв., ім'я, по батькові)";
//                cells["F" + (currentRow + 21) + ":H" + (currentRow + 21)].Value = "(прізв., ім'я, по батькові)";
//                cells["J" + (currentRow + 21) + ":L" + (currentRow + 21)].Value = "(прізв., ім'я, по батькові)";
//                cells["B" + (currentRow + 21) + ":D" + (currentRow + 21)].HorizontalAlignment = HAlign.Center;
//                cells["F" + (currentRow + 21) + ":H" + (currentRow + 21)].HorizontalAlignment = HAlign.Center;
//                cells["J" + (currentRow + 21) + ":L" + (currentRow + 21)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 23)].Value = "На підставі (розпорядження) від '____'  ____________20___р.";
//                cells["A" + (currentRow + 25)].Value = "Виконано знімання фактичних залишків";


//                cells["E" + (currentRow + 25) + ":L" + (currentRow + 25)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 26)].Value = "що значаться на обліку станом на";
//                cells["E" + (currentRow + 26)].Value = endDate.ToShortDateString() + " р.";
//                cells["E" + (currentRow + 26) + ":F" + (currentRow + 26)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["A" + (currentRow + 28)].Value = "Інвентаризація: ";
//                cells["C" + (currentRow + 28)].Value = "розпочата '____'  ___________20___р.";
//                cells["C" + (currentRow + 29)].Value = "закінчена '____'  ___________20___р.";

//                cells["A" + (currentRow + 30)].PageBreak = PageBreak.Manual;

//                return (currentRow + 32);
//            };
//            #endregion

//            #region BodyPage func
//            Func<int, int> BodyPage = (currentRow) =>
//            {
//                cells["A" + currentRow].Value = "При інвентаризації встановлено таке:";
//                cells["A" + (currentRow + 1) + ":A" + (currentRow + 2)].Merge();
//                cells["A" + (currentRow + 1)].Value = "№";
//                cells["B" + (currentRow + 1) + ":D" + (currentRow + 2)].Merge();
//                cells["B" + (currentRow + 1)].Value = "Найменування";
//                cells["E" + (currentRow + 1) + ":E" + (currentRow + 2)].Merge();
//                cells["E" + (currentRow + 1)].Value = "Номер";
//                cells["F" + (currentRow + 1) + ":H" + (currentRow + 1)].Merge();
//                cells["F" + (currentRow + 1)].Value = "Фактична наявність";
//                cells["F" + (currentRow + 2)].Value = "К-сть";
//                cells["G" + (currentRow + 2)].Value = "Перв. вартість";
//                cells["H" + (currentRow + 2)].Value = "Залиш. вартість";
//                cells["I" + (currentRow + 1) + ":K" + (currentRow + 1)].Merge();
//                cells["I" + (currentRow + 1)].Value = "За даними бух. обліку";
//                cells["I" + (currentRow + 2)].Value = "К-сть";
//                cells["J" + (currentRow + 2)].Value = "Перв. вартість";
//                cells["K" + (currentRow + 2)].Value = "Залиш. вартість";
//                cells["L" + (currentRow + 1) + ":L" + (currentRow + 2)].Merge();
//                cells["L" + (currentRow + 1)].Value = "Відм. про виб.";
//                cells["L" + (currentRow + 1) + ":L" + (currentRow + 2)].WrapText = true;

//                cells["A" + (currentRow + 3)].Value = "1";
//                cells["B" + (currentRow + 3) + ":D" + (currentRow + 3)].Merge();
//                cells["B" + (currentRow + 3)].Value = "2";
//                cells["E" + (currentRow + 3)].Value = "3";
//                cells["F" + (currentRow + 3)].Value = "4";
//                cells["G" + (currentRow + 3)].Value = "5";
//                cells["H" + (currentRow + 3)].Value = "6";
//                cells["I" + (currentRow + 3)].Value = "7";
//                cells["J" + (currentRow + 3)].Value = "8";
//                cells["K" + (currentRow + 3)].Value = "9";
//                cells["L" + (currentRow + 3)].Value = "10";

//                cells["A" + (currentRow + 3) + ":L" + (currentRow + 3)].Interior.Color = Color.LightGray;
//                cells["A" + (currentRow + 1) + ":L" + (currentRow + 3)].HorizontalAlignment = HAlign.Center;
//                cells["A" + (currentRow + 1) + ":L" + (currentRow + 3)].VerticalAlignment = VAlign.Center;
//                cells["A" + (currentRow + 1) + ":L" + (currentRow + 3)].Borders.LineStyle = LineStyle.Continous;

//                return (currentRow + 4);
//            };
//            #endregion

//            #region LastPage func
//            Func<int, int, double, int> LastPage = (currentRow, itemCount, sumPrice) =>
//            {
//                cells["A" + currentRow].Value = "Разом за описом:";
//                cells["D" + currentRow].Value = "а) кількість порядкових номерів";
//                cells["H" + currentRow + ":L" + currentRow].Merge();
//                cells["H" + currentRow].Value = RuDateAndMoneyConverter.NumeralsToTxt(itemCount, Utils.TextCase.Nominative, true, false);
//                cells["H" + currentRow + ":L" + currentRow].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["J" + (currentRow + 1)].Value = "(прописом)";
//                cells["D" + (currentRow + 2)].Value = "б) загальна кількість одиниць, фактично";
//                cells["H" + (currentRow + 2) + ":L" + (currentRow + 2)].Merge();
//                cells["H" + (currentRow + 2)].Value = RuDateAndMoneyConverter.NumeralsToTxt(itemCount, Utils.TextCase.Nominative, false, false);
//                cells["H" + (currentRow + 2) + ":L" + (currentRow + 2)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["J" + (currentRow + 3)].Value = "(прописом)";
//                cells["D" + (currentRow + 4)].Value = "в) на суму, грн., фактично";
//                cells["G" + (currentRow + 4) + ":L" + (currentRow + 5)].Merge();
//                cells["G" + (currentRow + 4) + ":L" + (currentRow + 5)].WrapText = true;
//                cells["G" + (currentRow + 4) + ":L" + (currentRow + 5)].HorizontalAlignment = HAlign.Left;
//                cells["G" + (currentRow + 4) + ":L" + (currentRow + 5)].VerticalAlignment = VAlign.Top;
//                cells["G" + (currentRow + 4)].Value = RuDateAndMoneyConverter.CurrencyToTxt(sumPrice, false);
//                cells["G" + (currentRow + 5) + ":L" + (currentRow + 5)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["J" + (currentRow + 6)].Value = "(прописом)";

//                cells["A" + (currentRow + 8)].Value = "Голова комісії";
//                cells["D" + (currentRow + 8) + ":F" + (currentRow + 8)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["H" + (currentRow + 8) + ":I" + (currentRow + 8)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["K" + (currentRow + 8) + ":L" + (currentRow + 8)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["D" + (currentRow + 9) + ":F" + (currentRow + 9)].Merge();
//                cells["H" + (currentRow + 9) + ":I" + (currentRow + 9)].Merge();
//                cells["K" + (currentRow + 9) + ":L" + (currentRow + 9)].Merge();
//                cells["D" + (currentRow + 9) + ":F" + (currentRow + 9)].Value = "(посада)";
//                cells["H" + (currentRow + 9) + ":I" + (currentRow + 9)].Value = "(підпис)";
//                cells["K" + (currentRow + 9) + ":L" + (currentRow + 9)].Value = "(прізв., ім'я, по батькові)";
//                cells["D" + (currentRow + 9) + ":F" + (currentRow + 9)].HorizontalAlignment = HAlign.Center;
//                cells["H" + (currentRow + 9) + ":I" + (currentRow + 9)].HorizontalAlignment = HAlign.Center;
//                cells["K" + (currentRow + 9) + ":L" + (currentRow + 9)].HorizontalAlignment = HAlign.Center;

//                cells["A" + (currentRow + 10)].Value = "Члени комісії";
//                cells["D" + (currentRow + 10) + ":F" + (currentRow + 10)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["H" + (currentRow + 10) + ":I" + (currentRow + 10)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["K" + (currentRow + 10) + ":L" + (currentRow + 10)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["D" + (currentRow + 11) + ":F" + (currentRow + 11)].Merge();
//                cells["H" + (currentRow + 11) + ":I" + (currentRow + 11)].Merge();
//                cells["K" + (currentRow + 11) + ":L" + (currentRow + 11)].Merge();
//                cells["D" + (currentRow + 11) + ":F" + (currentRow + 11)].Value = "(посада)";
//                cells["H" + (currentRow + 11) + ":I" + (currentRow + 11)].Value = "(підпис)";
//                cells["K" + (currentRow + 11) + ":L" + (currentRow + 11)].Value = "(прізв., ім'я, по батькові)";
//                cells["D" + (currentRow + 11) + ":F" + (currentRow + 11)].HorizontalAlignment = HAlign.Center;
//                cells["H" + (currentRow + 11) + ":I" + (currentRow + 11)].HorizontalAlignment = HAlign.Center;
//                cells["K" + (currentRow + 11) + ":L" + (currentRow + 11)].HorizontalAlignment = HAlign.Center;

//                cells["D" + (currentRow + 12) + ":F" + (currentRow + 12)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["H" + (currentRow + 12) + ":I" + (currentRow + 12)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["K" + (currentRow + 12) + ":L" + (currentRow + 12)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["D" + (currentRow + 13) + ":F" + (currentRow + 13)].Merge();
//                cells["H" + (currentRow + 13) + ":I" + (currentRow + 13)].Merge();
//                cells["K" + (currentRow + 13) + ":L" + (currentRow + 13)].Merge();
//                cells["D" + (currentRow + 13) + ":F" + (currentRow + 13)].Value = "(посада)";
//                cells["H" + (currentRow + 13) + ":I" + (currentRow + 13)].Value = "(підпис)";
//                cells["K" + (currentRow + 13) + ":L" + (currentRow + 13)].Value = "(прізв., ім'я, по батькові)";
//                cells["D" + (currentRow + 13) + ":F" + (currentRow + 13)].HorizontalAlignment = HAlign.Center;
//                cells["H" + (currentRow + 13) + ":I" + (currentRow + 13)].HorizontalAlignment = HAlign.Center;
//                cells["K" + (currentRow + 13) + ":L" + (currentRow + 13)].HorizontalAlignment = HAlign.Center;

//                cells["D" + (currentRow + 14) + ":F" + (currentRow + 14)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["H" + (currentRow + 14) + ":I" + (currentRow + 14)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["K" + (currentRow + 14) + ":L" + (currentRow + 14)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["D" + (currentRow + 15) + ":F" + (currentRow + 15)].Merge();
//                cells["H" + (currentRow + 15) + ":I" + (currentRow + 15)].Merge();
//                cells["K" + (currentRow + 15) + ":L" + (currentRow + 15)].Merge();
//                cells["D" + (currentRow + 15) + ":F" + (currentRow + 15)].Value = "(посада)";
//                cells["H" + (currentRow + 15) + ":I" + (currentRow + 15)].Value = "(підпис)";
//                cells["K" + (currentRow + 15) + ":L" + (currentRow + 15)].Value = "(прізв., ім'я, по батькові)";
//                cells["D" + (currentRow + 15) + ":F" + (currentRow + 15)].HorizontalAlignment = HAlign.Center;
//                cells["H" + (currentRow + 15) + ":I" + (currentRow + 15)].HorizontalAlignment = HAlign.Center;
//                cells["K" + (currentRow + 15) + ":L" + (currentRow + 15)].HorizontalAlignment = HAlign.Center;

//                cells["A" + (currentRow + 17) + ":L" + (currentRow + 20)].Merge();
//                cells["A" + (currentRow + 17) + ":L" + (currentRow + 20)].WrapText = true;
//                cells["A" + (currentRow + 17)].Value = "Усі цінності, пойменовані в цьому інвентаризаційному описі з № ____ до № ____, перевірені комісією в натурі за моєї (нашої) присутності та внесені в опис," +
//                                                       " у зв'язку з чим претензій до інвентариційної комісії не маю (не маємо). Цінності, перелічені в описі, знаходяться на моєму (нашому) відповідальному зберіганні.\n" +
//                                                       "Особа(и), відповідальна(і) за збереження основних засобів:";
//                cells["A" + (currentRow + 21)].Value = " '____'_____________20___р.";
//                cells["A" + (currentRow + 23) + ":L" + (currentRow + 23)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;

//                cells["A" + (currentRow + 25)].Value = "Вказані у даному описі дані перевірив";
//                cells["G" + (currentRow + 25) + ":H" + (currentRow + 25)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["K" + (currentRow + 25) + ":L" + (currentRow + 25)].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
//                cells["G" + (currentRow + 26) + ":H" + (currentRow + 26)].Merge();
//                cells["K" + (currentRow + 26) + ":L" + (currentRow + 26)].Merge();
//                cells["G" + (currentRow + 26) + ":H" + (currentRow + 26)].Value = "(посада)";
//                cells["K" + (currentRow + 26) + ":L" + (currentRow + 26)].Value = "(підпис)";
//                cells["G" + (currentRow + 26) + ":H" + (currentRow + 26)].HorizontalAlignment = HAlign.Center;
//                cells["K" + (currentRow + 26) + ":L" + (currentRow + 26)].HorizontalAlignment = HAlign.Center;

//                cells["A" + (currentRow + 28)].Value = " '____'_____________20___р.";
//                return (currentRow + 28);
//            };
//            #endregion

//            int countRow = model.Count;
//            short currentGroupId = 0;
//            string group;
//            for (int i = 0; i < countRow; i++)
//            {
//                if ((short)model[i].GroupId != currentGroupId)
//                {
//                    currentGroupId = (short)model[i].GroupId;

//                    worksheet = workbook.Worksheets.Add();
//                    worksheet.PageSetup.Orientation = PageOrientation.Landscape;

//                    worksheet.PageSetup.RightMargin = 0.25;
//                    worksheet.PageSetup.TopMargin = 0.3;
//                    worksheet.PageSetup.BottomMargin = 0.3;
//                    group = (((string)model[i].FAONum).Replace("/", ".") + ' ' + (string)model[i].GroupName);

//                    worksheet.Name = (group.Length > 25) ? group.Substring(0, 25) : group;
//                    cells = worksheet.Cells;

//                    cells["C" + (startPosition + 9)].Value = group;
//                    cells["E" + (startPosition + 25)].Value = group;

//                    cells["A1"].ColumnWidth = 3;
//                    cells["B1"].ColumnWidth = 10;
//                    cells["C1"].ColumnWidth = 10;
//                    cells["D1"].ColumnWidth = 10;
//                    cells["E1"].ColumnWidth = 8;
//                    cells["F1"].ColumnWidth = 6;
//                    cells["G1"].ColumnWidth = 14;
//                    cells["H1"].ColumnWidth = 14;
//                    cells["I1"].ColumnWidth = 6;
//                    cells["J1"].ColumnWidth = 14;
//                    cells["K1"].ColumnWidth = 14;
//                    cells["L1"].ColumnWidth = 8;

//                    currentPosition = FirstPage(startPosition);
//                    currentPosition = BodyPage(currentPosition);

//                    int startBorderRow = currentPosition;

//                    var currentGroupItems = model.AsEnumerable().Where(r => r.GroupId == currentGroupId).OrderBy(o => o.InventoryNumber).ToList();
//                    var sumBeginPrice = currentGroupItems.Sum(s => s.TotalPriceFull);
//                    var sumCurrentPrice = currentGroupItems.Sum(s => s.CurrentPrice);

//                    for (int j = 0; j < currentGroupItems.Count; j++)
//                    {
//                        cells["A" + currentPosition + ":A" + (currentPosition + 1)].Merge();
//                        cells["A" + currentPosition].Value = j + 1;
//                        cells["A" + currentPosition + ":A" + (currentPosition + 1)].HorizontalAlignment = HAlign.Center;
//                        cells["A" + currentPosition + ":A" + (currentPosition + 1)].VerticalAlignment = VAlign.Center;
//                        cells["B" + currentPosition + ":D" + (currentPosition + 1)].Merge();
//                        cells["B" + currentPosition].Value = currentGroupItems[j].InventoryName;
//                        cells["B" + currentPosition + ":D" + (currentPosition + 1)].WrapText = true;
//                        cells["B" + currentPosition + ":D" + (currentPosition + 1)].HorizontalAlignment = HAlign.Left;
//                        cells["B" + currentPosition + ":D" + (currentPosition + 1)].VerticalAlignment = VAlign.Center;
//                        cells["E" + currentPosition + ":E" + (currentPosition + 1)].Merge();
//                        cells["E" + currentPosition].Value = currentGroupItems[j].InventoryNumber;
//                        cells["F" + currentPosition + ":F" + (currentPosition + 1)].Merge();
//                        cells["F" + currentPosition].Value = 1;
//                        cells["G" + currentPosition + ":G" + (currentPosition + 1)].Merge();
//                        cells["G" + currentPosition].Value = currentGroupItems[j].TotalPriceFull;
//                        cells["H" + currentPosition + ":H" + (currentPosition + 1)].Merge();
//                        cells["H" + currentPosition].Value = currentGroupItems[j].CurrentPrice;
//                        cells["I" + currentPosition + ":I" + (currentPosition + 1)].Merge();
//                        cells["I" + currentPosition].Value = 1;
//                        cells["J" + currentPosition + ":J" + (currentPosition + 1)].Merge();
//                        cells["J" + currentPosition].Value = currentGroupItems[j].TotalPriceFull;
//                        cells["K" + currentPosition + ":K" + (currentPosition + 1)].Merge();
//                        cells["K" + currentPosition].Value = currentGroupItems[j].CurrentPrice;
//                        cells["L" + currentPosition + ":L" + (currentPosition + 1)].Merge();
//                        cells["L" + currentPosition].Value = "";
//                        cells["E" + currentPosition + ":L" + (currentPosition + 1)].HorizontalAlignment = HAlign.Center;
//                        cells["E" + currentPosition + ":L" + (currentPosition + 1)].VerticalAlignment = VAlign.Center;
//                        currentPosition += 2;
//                    }

//                    cells["B" + currentPosition + ":D" + currentPosition].Merge();
//                    cells["B" + currentPosition].Value = "Разом";
//                    cells["B" + currentPosition].HorizontalAlignment = HAlign.Right;
//                    cells["F" + currentPosition].Value = currentGroupItems.Count;
//                    cells["G" + currentPosition].Value = sumBeginPrice;
//                    cells["H" + currentPosition].Value = sumCurrentPrice;
//                    cells["I" + currentPosition].Value = currentGroupItems.Count;
//                    cells["J" + currentPosition].Value = sumBeginPrice;
//                    cells["K" + currentPosition].Value = sumCurrentPrice;
//                    cells["F" + currentPosition + ":K" + currentPosition].HorizontalAlignment = HAlign.Center;
//                    cells["G" + startBorderRow + ":H" + currentPosition].NumberFormat = "### ### ##0.00";
//                    cells["J" + startBorderRow + ":K" + currentPosition].NumberFormat = "### ### ##0.00";
//                    cells["A" + startBorderRow + ":L" + currentPosition].Borders.LineStyle = LineStyle.Continous;
//                    cells["B" + currentPosition + ":K" + currentPosition].Font.Bold = true;
//                    currentPosition += 2;
//                    cells["A" + currentPosition].PageBreak = PageBreak.Manual;
//                    currentPosition = LastPage(currentPosition, currentGroupItems.Count, (double)sumBeginPrice);
//                }
//            }

//            workbook.Worksheets[0].Delete();
//            try
//            {
//                string documentAddresName = GeneratedReportsDir + "Инвентаризационная ведомость " + endDate.ToShortDateString() + ".xls";
//                workbook.SaveAs(documentAddresName, FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//        }

//        #endregion

//        #endregion

//        #region StoreHouseTrialBalance report's

//        public bool GetTrialBalanceReport(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""SHReportTrialBalanceTest""(@StartDate, @EndDate)";


//            var dataSource = mapper.Map<IEnumerable<StoreHouseTrialBalance>, List<StoreHouseTrialBalanceDTO>>(storeHouseTrialBalance.SQLExecuteProc(procName, Parameters));

//            return PrintStoreHouseTrialBalance(dataSource, startDate.Date.ToShortDateString(), endDate.Date.ToShortDateString());
//        }

//        public bool PrintStoreHouseTrialBalance(List<StoreHouseTrialBalanceDTO> reportList, string StartDate, string EndDate)
//        {
//            if (reportList.Count == 0)
//            {
//                MessageBox.Show("За вибраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            SpreadsheetGear.IWorkbook Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TrialBalance.xls");
//            //var Workbook = Factory.GetWorkbook(TemplatesDir + "TrialBalance.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            // закрепление панели в эксель
//            Worksheet.WindowInfo.ScrollRow = 0;
//            Worksheet.WindowInfo.SplitRows = 10;
//            Worksheet.WindowInfo.FreezePanes = true;
//            //

//            int fontSize = 18;

//            int captionPosition = 6;
//            int startWith = captionPosition + 4;
//            int a = 0;
//            decimal sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;

//            Сells["A" + captionPosition].Value = "Оборотно-сальдова відомість по складу за період з " + StartDate + " по " + EndDate;
//            Сells["I" + captionPosition].Font.Size = 20;

//            for (int i = 0; i < reportList.Count; i++)
//            {
//                if (i == 0 || reportList[i].BalanceAccount.ToString().Trim() != reportList[i - 1].BalanceAccount.ToString().Trim())
//                {
//                    a = 0;
//                    Сells["A" + startWith].Value = "";

//                    startWith++;
//                    Сells["A" + startWith.ToString() + ":" + "K" + startWith.ToString()].Merge();
//                    Сells["A" + startWith].Value = "Балансовий рахунок " + reportList[i].BalanceAccount;
//                    Сells["A" + startWith].Font.Bold = true;
//                    Сells["A" + startWith].Font.Size = fontSize;
//                }

//                a++;
//                startWith++;
//                Сells["A" + startWith].Value = reportList[i].Nomenclature;
//                Сells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["A" + startWith].Font.Size = fontSize;

//                Сells["B" + startWith].Value = reportList[i].Name;
//                Сells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["B" + startWith].Font.Size = fontSize;

//                Сells["C" + startWith].Value = reportList[i].Measure;
//                Сells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                Сells["C" + startWith].Font.Size = fontSize;
//                Сells["C" + startWith].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//                Сells["D" + startWith].Value = reportList[i].RemainsQuantityBegin;
//                Сells["D" + startWith].NumberFormat = "### ### ##0.000000";
//                Сells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["D" + startWith].Font.Size = fontSize;

//                Сells["E" + startWith].Value = reportList[i].RemainsPriceBegin;
//                Сells["E" + startWith].NumberFormat = "### ### ##0.00";
//                Сells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["E" + startWith].Font.Size = fontSize;
//                Сells["E" + startWith].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//                Сells["F" + startWith].Value = reportList[i].ReceiptTotalQuantity;
//                Сells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["F" + startWith].Font.Size = fontSize;

//                Сells["G" + startWith].Value = reportList[i].ReceiptTotalPrice;
//                Сells["G" + startWith].NumberFormat = "### ### ##0.00";
//                Сells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["G" + startWith].Font.Size = fontSize;
//                Сells["G" + startWith].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//                Сells["H" + startWith].Value = reportList[i].ExpTotalQuantity;
//                Сells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["H" + startWith].Font.Size = fontSize;

//                Сells["I" + startWith].Value = reportList[i].ExpTotalPrice;
//                Сells["I" + startWith].NumberFormat = "### ### ##0.00";
//                Сells["I" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["I" + startWith].Font.Size = fontSize;
//                Сells["I" + startWith].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//                Сells["J" + startWith].Value = reportList[i].RemainsQuantityEnd;
//                Сells["J" + startWith].NumberFormat = "### ### ##0.000000";
//                Сells["J" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["J" + startWith].Font.Size = fontSize;

//                Сells["K" + startWith].Value = reportList[i].RemainsPriceEnd;
//                Сells["K" + startWith].NumberFormat = "### ### ##0.00";
//                Сells["K" + startWith].Borders.LineStyle = LineStyle.Continous;
//                Сells["K" + startWith].Font.Size = fontSize;
//                Сells["K" + startWith].Borders[BordersIndex.EdgeRight].Weight = BorderWeight.Medium;

//                if ((decimal)reportList[i].RemainsQuantityEnd < 0 || (decimal)reportList[i].RemainsPriceEnd < 0)
//                    Сells["A" + startWith + ":" + "K" + startWith].Interior.Color = Color.LightCoral;

//                if ((i < reportList.Count - 1 && reportList[i].BalanceAccount.ToString() != reportList[i + 1].BalanceAccount.ToString()) || i == reportList.Count - 1)
//                {
//                    startWith++;
//                    Сells["A" + startWith.ToString() + ":" + "D" + startWith.ToString()].Merge();
//                    Сells["A" + startWith.ToString() + ":" + "K" + startWith.ToString()].Borders.LineStyle = LineStyle.Continous;
//                    Сells["A" + startWith].Value = "Разом за балансовим рахунком    " + reportList[i].BalanceAccount;
//                    Сells["A" + startWith].Font.Bold = true;
//                    Сells["A" + startWith].Font.Size = fontSize;

//                    Сells["E" + startWith].Formula = "=SUM(E" + (startWith - a) + ":E" + (startWith - 1) + ")";
//                    Сells["E" + startWith].NumberFormat = "### ### ##0.00";
//                    Сells["E" + startWith].Interior.Color = System.Drawing.Color.LightGreen;
//                    sum1 += Convert.ToDecimal(Сells["E" + startWith].Value.ToString());
//                    Сells["E" + startWith].Font.Size = fontSize;

//                    Сells["G" + startWith].Formula = "=SUM(G" + (startWith - a) + ":G" + (startWith - 1) + ")";
//                    Сells["G" + startWith].NumberFormat = "### ### ##0.00";
//                    Сells["G" + startWith].Interior.Color = System.Drawing.Color.LightGreen;
//                    sum2 += Convert.ToDecimal(Сells["G" + startWith].Value.ToString());
//                    Сells["G" + startWith].Font.Size = fontSize;

//                    Сells["I" + startWith].Formula = "=SUM(I" + (startWith - a) + ":I" + (startWith - 1) + ")";
//                    Сells["I" + startWith].NumberFormat = "### ### ##0.00";
//                    Сells["I" + startWith].Interior.Color = System.Drawing.Color.LightGreen;
//                    sum3 += Convert.ToDecimal(Сells["I" + startWith].Value.ToString());
//                    Сells["I" + startWith].Font.Size = fontSize;

//                    Сells["K" + startWith].Formula = "=SUM(K" + (startWith - a) + ":K" + (startWith - 1) + ")";
//                    Сells["K" + startWith].NumberFormat = "### ### ##0.00";
//                    Сells["K" + startWith].Interior.Color = System.Drawing.Color.LightGreen;

//                    Сells["A" + (startWith - a) + ":" + "A" + (startWith - 1)].EntireRow.Group();

//                    sum4 += Convert.ToDecimal(Сells["K" + startWith].Value);
//                    Сells["K" + startWith].Font.Size = fontSize;
//                    startWith++;
//                }
//            }

//            startWith++;
//            startWith++;
//            Сells["A" + startWith.ToString() + ":" + "D" + startWith.ToString()].Merge();
//            Сells["A" + startWith].Value = "Разом:";
//            Сells["A" + startWith].Font.Bold = true;
//            Сells["A" + startWith].Font.Size = fontSize;

//            Сells["E" + startWith].Value = sum1;
//            Сells["E" + startWith].NumberFormat = "### ### ##0.00";
//            Сells["E" + startWith].Interior.Color = System.Drawing.Color.Green;
//            Сells["E" + startWith].Font.Size = fontSize;

//            Сells["G" + startWith].Value = sum2;
//            Сells["G" + startWith].NumberFormat = "### ### ##0.00";
//            Сells["G" + startWith].Interior.Color = System.Drawing.Color.Green;
//            Сells["G" + startWith].Font.Size = fontSize;

//            Сells["I" + startWith].Value = sum3;
//            Сells["I" + startWith].NumberFormat = "### ### ##0.00";
//            Сells["I" + startWith].Interior.Color = System.Drawing.Color.Green;
//            Сells["I" + startWith].Font.Size = fontSize;

//            Сells["K" + startWith].Value = sum4;
//            Сells["K" + startWith].NumberFormat = "### ### ##0.00";
//            Сells["K" + startWith].Interior.Color = System.Drawing.Color.Green;
//            Сells["K" + startWith].Font.Size = fontSize;

//            PrintSignatures(Сells, startWith + 3);

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "ОСВ по складу за період з " + StartDate + " по " + EndDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "ОСВ по складу за період з " + StartDate + " по " + EndDate + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//                return true;
//            }
//            catch (System.IO.IOException) { 
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception) { 
//                MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }

//        public bool GetTrialBalanceByAccountsReport(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""SHReportTrialBalanceByAccounts""(@StartDate, @EndDate)";


//            var dataSource = mapper.Map<IEnumerable<TrialBalanceByAccountsReport>, List<TrialBalanceByAccountsReportDTO>>(trialBalanceByAccountsReport.SQLExecuteProc(procName, Parameters));

//            return PrintTrialBalanceAccounts(dataSource, startDate.Date.ToShortDateString(), endDate.Date.ToShortDateString());
//        }




//        public bool  PrintTrialBalanceAccounts(List<TrialBalanceByAccountsReportDTO> reportList, string StartDate, string EndDate)
//        {

//            var balanceSource = reportList
//                                .OrderBy(s => s.BalanceAccountNum)
//                                .ThenBy(w => w.FlagDebitCredit)
//                                .ToList();
//            SpreadsheetGear.IWorkbook workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            //var workbook = Factory.GetWorkbook(TemplatesDir + "TemplateWithStamp.xls");
//            var worksheet = workbook.Worksheets[0];
//            var cells = worksheet.Cells;

//            Dictionary<int?, string> DebitAcc = new Dictionary<int?, string>();
//            Dictionary<int?, string> CreditAcc = new Dictionary<int?, string>();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();

//            int startDebitAccount = 0;
//            int startCreditAccount = 0;
//            int endDebitAccount = 0;
//            int endCreditAccount = 0;

//            int captionPosition = 6;
//            int startPosition = captionPosition + 1;
//            int currentPosition = startPosition + 3;
//            byte startHeaderPosition = 1;

//            #region Generate report header

//            var Debit_Accounts = reportList.Where(c => c.FlagDebitCredit == 1).Select(c => new
//            {
//                AccountNum = c.PeriodAccountNum,
//                AccountId = c.PeriodAccountId
//            }).Distinct().OrderBy(c => c.AccountNum);

//            foreach (var dict in Debit_Accounts)
//                DebitAcc.Add(dict.AccountId, dict.AccountNum);


//            var Credit_Accounts = reportList.Where(c => c.FlagDebitCredit == 2).Select(c => new
//            {
//                AccountNum = c.PeriodAccountNum,
//                AccountId = c.PeriodAccountId
//            }).Distinct().OrderBy(c => c.AccountNum).ToList();

//            foreach (var dict in Credit_Accounts)
//                CreditAcc.Add(dict.AccountId, dict.AccountNum);

//            HeaderColumn.Add("BalanceAccountNum", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "№ рах.";

//            startHeaderPosition++;

//            HeaderColumn.Add("BeginRemains", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на початок";

//            startHeaderPosition++;

//            if (DebitAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("У кредит рахунків");
//                HeaderColumn.Add("SumDebit", startHeaderPosition);
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Разом в дебет рахунку";

//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + (DebitAcc.Count + 1)] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("У кредит рахунків");
//                HeaderColumn.Add("SumDebit", startHeaderPosition);
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Разом в дебет рахунку";

//                startHeaderPosition++;

//                startDebitAccount = startHeaderPosition;
//                foreach (var debit_account in DebitAcc)
//                {
//                    HeaderColumn.Add("DebitAccount" + debit_account.Key.ToString(), startHeaderPosition);
//                    cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                    cells[startPosition, startHeaderPosition - 1].Value = debit_account.Value;
//                    startHeaderPosition++;
//                }
//                endDebitAccount = startHeaderPosition;
//            }

//            if (CreditAcc.Count == 0)
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("У дебет рахунків");
//                HeaderColumn.Add("SumCredit", startHeaderPosition);
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Разом в кредит рахунку";

//                startHeaderPosition++;
//            }
//            else
//            {
//                cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 2 + (CreditAcc.Count + 1)] + (startPosition)].Merge();
//                cells[startPosition - 1, startHeaderPosition - 1].Value = String.Format("У дебет рахунків");
//                HeaderColumn.Add("SumCredit", startHeaderPosition);
//                cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                cells[startPosition, startHeaderPosition - 1].Value = "Разом в кредит рахунку";

//                startHeaderPosition++;

//                startCreditAccount = startHeaderPosition;
//                foreach (var credit_account in CreditAcc)
//                {
//                    HeaderColumn.Add("CreditAccount" + credit_account.Key.ToString(), startHeaderPosition);
//                    cells[vsS[startHeaderPosition - 1] + (startPosition + 1) + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//                    cells[startPosition, startHeaderPosition - 1].Value = credit_account.Value;
//                    startHeaderPosition++;

//                }
//                endCreditAccount = startHeaderPosition;
//            }

//            HeaderColumn.Add("EndRemains", startHeaderPosition);
//            cells[vsS[startHeaderPosition - 1] + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Merge();
//            cells[startPosition - 1, startHeaderPosition - 1].Value = "Сальдо на кінець";

//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Borders.LineStyle = LineStyle.Continous;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].WrapText = true;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].VerticalAlignment = VAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].HorizontalAlignment = HAlign.Center;
//            cells["A" + startPosition + ":" + vsS[startHeaderPosition - 1] + (startPosition + 2)].Font.Bold = true;
//            cells["A" + ":" + vsS[startHeaderPosition - 1]].ColumnWidth = 18;

//            #endregion

//            #region Loop body

//            int balanceAccountId = 0;
//            string account = "";
//            int sumPosition = 0;

//            Action<int, int, int> WriteBalance = (sourceId, currentPos, _balanceAccountId) =>
//            {
//                var DebitBalance = balanceSource.AsEnumerable()
//                                 .Where(s => (int)s.BalanceAccountId == _balanceAccountId && (int)s.FlagDebitCredit == 1);

//                var CreditBalance = balanceSource.AsEnumerable()
//                                 .Where(s => (int)s.BalanceAccountId == _balanceAccountId && (int)s.FlagDebitCredit == 2);

//                if (DebitBalance.Count() > 0)
//                {
//                    foreach (var item in DebitBalance)
//                    {
//                        if ((int)item.PeriodAccountId > 0)
//                        {
//                            account = "DebitAccount" + item.PeriodAccountId.ToString();
//                            cells[vsS[HeaderColumn[account] - 1] + currentPos].Value = Decimal.Round(item.PeriodPrice,2);
//                        }
//                    }
//                }
                
//                if (CreditBalance.Count() > 0)
//                {
//                    foreach (var item in CreditBalance)
//                    {
//                        if ((int)item.PeriodAccountId > 0)
//                        {
//                            account = "CreditAccount" + item.PeriodAccountId.ToString();
//                            //cells[vsS[HeaderColumn[account] - 1] + currentPos].Value = item.PeriodPrice;
//                            cells[vsS[HeaderColumn[account] - 1] + currentPos].Value = Decimal.Round(item.PeriodPrice, 2);                          
//                        }
//                    }
//                }

//            };

//            for (int i = 0; i < balanceSource.Count; i++)
//            {
//                if (balanceAccountId != (int)balanceSource[i].BalanceAccountId)
//                {
//                    balanceAccountId = (int)balanceSource[i].BalanceAccountId;

//                    if (i > 0)
//                    {
//                        cells[vsS[HeaderColumn["BeginRemains"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["BeginRemains"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightGreen;
//                        cells[vsS[HeaderColumn["EndRemains"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["EndRemains"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightGreen;
//                        cells[vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightSkyBlue;
//                        cells[vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightSkyBlue;

//                        cells[vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1)].Formula = SetFormula(vsS[HeaderColumn["SumDebit"]], currentPosition - 1, vsS[HeaderColumn["SumCredit"] - 2], currentPosition - 1, "SUM");
//                        cells[vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1)].Formula = SetFormula(vsS[HeaderColumn["SumCredit"]], currentPosition - 1, vsS[HeaderColumn["EndRemains"] - 2], currentPosition - 1, "SUM");
//                    }

//                    cells[vsS[HeaderColumn["BalanceAccountNum"] - 1] + (currentPosition)].HorizontalAlignment = HAlign.Right;
//                    cells[vsS[HeaderColumn["BalanceAccountNum"] - 1] + (currentPosition)].Value = balanceSource[i].BalanceAccountNum;
//                    cells[vsS[HeaderColumn["BeginRemains"] - 1] + (currentPosition)].Value = balanceSource[i].BeginRemains;
//                    cells[vsS[HeaderColumn["EndRemains"] - 1] + (currentPosition)].Value = balanceSource[i].EndRemains;

//                    WriteBalance(i, currentPosition, balanceAccountId);
//                    currentPosition++;
//                }

//            }

//            #endregion

//            #region Finally step output

//            cells[vsS[HeaderColumn["BeginRemains"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["BeginRemains"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightGreen;
//            cells[vsS[HeaderColumn["EndRemains"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["EndRemains"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightGreen;
//            cells[vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightSkyBlue;
//            cells[vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1) + ":" + vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1)].Interior.Color = Color.LightSkyBlue;

//            cells[vsS[HeaderColumn["SumDebit"] - 1] + (currentPosition - 1)].Formula = SetFormula(vsS[HeaderColumn["SumDebit"]], currentPosition - 1, vsS[HeaderColumn["SumCredit"] - 2], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["SumCredit"] - 1] + (currentPosition - 1)].Formula = SetFormula(vsS[HeaderColumn["SumCredit"]], currentPosition - 1, vsS[HeaderColumn["EndRemains"] - 2], currentPosition - 1, "SUM");

//            cells["A" + (startPosition + 3) + ":" + vsS[startHeaderPosition - 1] + currentPosition].Borders.LineStyle = LineStyle.Continous;


//            #endregion

//            #region Result summary

//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Interior.Color = Color.Bisque;
//            cells["A" + currentPosition].HorizontalAlignment = HAlign.Right;
//            cells["A" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].Font.Bold = true;
//            cells["A" + currentPosition].Value = "Всього";
//            cells["B" + currentPosition + ":" + vsS[startHeaderPosition - 1] + currentPosition].NumberFormat = "### ### ##0.00";
//            cells[vsS[HeaderColumn["BeginRemains"] - 1] + (startPosition + 3) + ":" + vsS[HeaderColumn["EndRemains"] - 1] + currentPosition].NumberFormat = "### ### ##0.00";

//            cells[vsS[HeaderColumn["BeginRemains"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["BeginRemains"] - 1], (startPosition + 3), vsS[HeaderColumn["BeginRemains"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["EndRemains"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["EndRemains"] - 1], (startPosition + 3), vsS[HeaderColumn["EndRemains"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["SumDebit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["SumDebit"] - 1], (startPosition + 3), vsS[HeaderColumn["SumDebit"] - 1], currentPosition - 1, "SUM");
//            cells[vsS[HeaderColumn["SumCredit"] - 1] + currentPosition].Formula = SetFormula(vsS[HeaderColumn["SumCredit"] - 1], (startPosition + 3), vsS[HeaderColumn["SumCredit"] - 1], currentPosition - 1, "SUM");

//            if (DebitAcc.Count > 0)
//            {
//                foreach (var dict in DebitAcc)
//                {
//                    sumPosition = HeaderColumn["DebitAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = SetFormula(vsS[sumPosition - 1], (startPosition + 3), vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }
//            if (CreditAcc.Count > 0)
//            {
//                foreach (var dict in CreditAcc)
//                {
//                    sumPosition = HeaderColumn["CreditAccount" + dict.Key];
//                    cells[vsS[sumPosition - 1] + currentPosition].Value = SetFormula(vsS[sumPosition - 1], (startPosition + 3), vsS[sumPosition - 1], currentPosition - 1, "SUM");
//                }
//            }

//            #endregion

//            #region Report caption

//            cells["A" + captionPosition + ":" + vsS[startHeaderPosition - 1] + captionPosition].Merge();
//            cells["A" + captionPosition].Value = "Оборотно-сальдова відомість по складу та рахункам за період з " + StartDate + " по " + EndDate;
//            cells["A" + captionPosition].Font.Bold = true;
//            cells["A" + captionPosition].VerticalAlignment = VAlign.Center;
//            cells["A" + captionPosition].HorizontalAlignment = HAlign.Center;

//            #endregion

//            PrintSignatures(cells, currentPosition + 3);

//            try
//            {
//                workbook.SaveAs(GeneratedReportsDir + "ОСВ по складу та рахункам за період з " + StartDate + " по " + EndDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "ОСВ по складу та рахункам за період з " + StartDate + " по " + EndDate + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//                return true;
//            }
//            catch (System.IO.IOException)
//            {
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception)
//            {
//                MessageBox.Show("Не знайдена програма Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }

//        public bool GetStoreHouseTrialBalanceReport(DateTime startDate, DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", startDate),
//                    new FbParameter("EndDate", endDate),
//                };

//            string procName = @"select * from ""SHReportTrialBalance""(@StartDate, @EndDate)";


//            var dataSource = mapper.Map<IEnumerable<TrialBalanceByAccountsReport>, List<TrialBalanceByAccountsReportDTO>>(trialBalanceByAccountsReport.SQLExecuteProc(procName, Parameters));

//            return PrintTrialBalanceAccounts(dataSource, startDate.Date.ToShortDateString(), endDate.Date.ToShortDateString());
//        }


//        #endregion

//        #region StoreHouse report's

//        public bool GetStoreHouseInventoryReport(DateTime endDate)
//        {
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDate", endDate)
//                };

//            string procName = @"select * from ""SHReportInventory""(@StartDate)";


//            var dataSource = mapper.Map<IEnumerable<StoreHouseInventory>, List<StoreHouseInventoryDTO>>(storeHouseInventory.SQLExecuteProc(procName, Parameters));

//            return PrintStoreHouseInventory(dataSource, endDate.Date.ToShortDateString());
//        }

//        public bool PrintStoreHouseInventory(List<StoreHouseInventoryDTO> reportList, string reportDate)
//        {
//            if (reportList.Count == 0)
//            {
//                MessageBox.Show("За обраний період немає даних!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            SpreadsheetGear.IWorkbook Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\TemplateWithStamp.xls");
//            IWorksheet Worksheet = Workbook.Worksheets[0];
//            IRange Cells = Worksheet.Cells;

//            string curSheetName = "Лист1";
//            ushort StartWith = 1, n = 1;
//            //byte WSheet = 0;

//            for (int i = 0; i < reportList.Count; i++)
//            {
//                if (i == 0 || reportList[i].BalanceNum.ToString().Trim() != reportList[i - 1].BalanceNum.ToString().Trim())
//                {
//                    Worksheet = (IWorksheet)Workbook.Worksheets["Лист1"].CopyAfter(Workbook.Worksheets[curSheetName]);
//                    Worksheet.PageSetup.RightFooter = "&A - &P";
//                    Worksheet.PageSetup.FooterMargin = 0.1;
//                    Worksheet.PageSetup.TopMargin = 15;
//                    Worksheet.PageSetup.BottomMargin = 28;
//                    Worksheet.PageSetup.LeftMargin = 15;
//                    Worksheet.PageSetup.RightMargin = 15;

//                    curSheetName = reportList[i].BalanceNum.ToString().Replace('/', '.');
//                    Worksheet.Name = curSheetName;
//                    Cells = Worksheet.Cells;

//                    StartWith = 29;
//                    n = 1;

//                    Cells["A1"].ColumnWidth = 6;
//                    Cells["C1"].ColumnWidth = 23;
//                    Cells["D27"].ColumnWidth = 12;
//                    Cells["E27"].ColumnWidth = 14.5;
//                    Cells["F27"].ColumnWidth = 12;
//                    Cells["G27"].ColumnWidth = 14.5;
//                    Cells["B26"].ColumnWidth = 12;

//                    Cells["A6"].Value = "Цех(Склад)";
//                    Cells["A7:G8"].Merge();
//                    Cells["A7"].HorizontalAlignment = HAlign.Center;
//                    Cells["A7"].Value = "Інвентаризаційна відомість № \n товарно-матеріальних цінностей";

//                    Cells["A9:G9"].Merge();
//                    Cells["A9"].HorizontalAlignment = HAlign.Center;
//                    Cells["A9"].VerticalAlignment = VAlign.Center;
//                    Cells["A9"].Value = "за станом на " + reportDate;//"\"" + Convert.ToDateTime(reportDate).Day + "\"" + Convert.ToDateTime(reportDate).Month + " " + Convert.ToDateTime(reportDate).Year + " г. \n";

//                    Cells["A11:G11"].Merge();
//                    Cells["A11"].HorizontalAlignment = HAlign.Center;
//                    Cells["A11"].Value = "Розписка";
//                    Cells["A12:G12"].Merge();
//                    Cells["A12"].RowHeight = 50;
//                    Cells["A12:G12"].HorizontalAlignment = HAlign.Left; Cells["A10:G10"].VerticalAlignment = VAlign.Center;
//                    Cells["A12:G12"].WrapText = true;
//                    Cells["A12"].Value =
//                        "До початку проведення інвентаризації всі видаткові та прибуткові документи на " +
//                        "товарно-матеріальні цінності здані в бухгалтерію і всі товарно-матеріальні " +
//                        "цінності надійшли на мою (нашу) відповідальність, оприбутковані, а вибулі " +
//                        "списані у витрати.";
//                    Cells["A13:G13"].Merge();
//                    Cells["A13"].HorizontalAlignment = HAlign.Center; Cells["A13"].VerticalAlignment = VAlign.Center;
//                    //Cells["A13"].Value = "                                                                                       ";
//                    Cells["A14"].Value = "Посада"; Cells["D14"].Value = "Прізвище І.Б."; Cells["G14"].Value = "Підпис"; Cells["G14"].HorizontalAlignment = HAlign.Right;
//                    Cells["A16:G16"].Merge();
//                    Cells["A16"].HorizontalAlignment = HAlign.Center; Cells["A16"].VerticalAlignment = VAlign.Center;
//                    //Cells["A16"].Value = "                                                                                       ";
//                    Cells["A17"].Value = "Посада"; Cells["D17"].Value = "Прізвище І.Б."; Cells["G17"].Value = "Підпис"; Cells["G17"].HorizontalAlignment = HAlign.Right;

//                    Cells["A19:G19"].Merge();
//                    Cells["A19"].WrapText = true;
//                    Cells["A19"].HorizontalAlignment = HAlign.Left; Cells["A19"].VerticalAlignment = VAlign.Center;
//                    Cells["A19"].Value =
//                        "На підставі наказу (розпорядження) № від року " +
//                        "зроблено зняття фактичних залишків цінностей діляться на балансовому рахунку № " + reportList[i].BalanceNum.ToString().Replace('/', '.') +
//                        " станом на " + reportDate;
//                    Cells["A19"].RowHeight = 32;

//                    Cells["A21:G21"].Merge();
//                    Cells["A21"].Value = "Інвентаризація розпочата \"_____\"______________20___р.";
//                    Cells["A23:G23"].Merge();
//                    Cells["A23"].Value = "Інвентаризація розпочата \"_____\"______________20___р.";
//                    Cells["A25:G25"].Merge();
//                    Cells["A25"].Value = "При інвентаризації встановлено таке:";


//                    Cells["A26:G28"].HorizontalAlignment = HAlign.Center; Cells["A26:G28"].VerticalAlignment = VAlign.Center;
//                    Cells["A26:G28"].Font.Bold = true;
//                    Cells["A26:G28"].Borders.LineStyle = LineStyle.Continous;

//                    Cells["A26:A27"].Merge();
//                    Cells["A26"].Value = "№ п/п";
//                    Cells["B26:B27"].Merge();
//                    Cells["B26"].Value = "Ном. номер";
//                    Cells["C26:C27"].Merge();
//                    Cells["C26"].Value = "Найменування";
//                    Cells["D26:E26"].Merge();
//                    Cells["D26"].Value = "Фактична наявність";
//                    Cells["D27"].Value = "Кіль-ть";
//                    Cells["E27"].Value = "Сума";

//                    Cells["F26:G26"].Merge();
//                    Cells["F26"].Value = "За даними бухобліку";
//                    Cells["F27"].Value = "Кіль-ть";
//                    Cells["G27"].Value = "Сума";
//                    Cells["A26:G27"].Font.Bold = true;

//                    Cells["A28"].Value = "1";
//                    Cells["B28"].Value = "2";
//                    Cells["C28"].Value = "3";
//                    Cells["D28"].Value = "4";
//                    Cells["E28"].Value = "5";
//                    Cells["F28"].Value = "6";
//                    Cells["G28"].Value = "7";
//                }

//                Cells["A" + StartWith].Value = n.ToString();
//                Cells["B" + StartWith].Value = reportList[i].Nomenclature;
//                Cells["C" + StartWith].Value = reportList[i].Name;
//                Cells["D" + StartWith].Value = reportList[i].RemainsQuantity;
//                Cells["D" + StartWith].NumberFormat = "### ##0.000";
//                Cells["E" + StartWith].Value = reportList[i].RemainsSum;
//                Cells["E" + StartWith].NumberFormat = "### ### ##0.00";
//                Cells["F" + StartWith].Value = reportList[i].RemainsQuantity;
//                Cells["F" + StartWith].NumberFormat = "### ##0.000";
//                Cells["G" + StartWith].Value = reportList[i].RemainsSum;
//                Cells["G" + StartWith].NumberFormat = "### ### ##0.00";

//                Cells["A" + StartWith + ":" + "A" + StartWith].HorizontalAlignment = HAlign.Center;
//                Cells["B" + StartWith + ":" + "B" + StartWith].HorizontalAlignment = HAlign.Left;

//                Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                Cells["A" + StartWith + ":" + "G" + StartWith].Borders.LineStyle = LineStyle.Continous;
//                n++;
//                StartWith++;

//                if ((i < reportList.Count - 1 && reportList[i].BalanceNum.ToString() != reportList[i + 1].BalanceNum.ToString()) || i == reportList.Count - 1)
//                {
//                    Cells["C" + (StartWith - n + 1) + ":" + "C" + (StartWith - 1)].WrapText = true;
//                    //Cells["A" + StartWith + ":" + "D" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Разом за балансовим рахунком " + reportList[i].BalanceNum.ToString().Replace('/', '.');
//                    Cells["E" + StartWith].Value = SetFormula("E", StartWith - n + 1, "E", StartWith - 1, "SUM");
//                    double Sum = Convert.ToDouble(Cells["E" + StartWith].Value);
//                    Cells["E" + StartWith].Font.Bold = true;
//                    Cells["E" + StartWith].NumberFormat = "### ### ##0.00";
//                    Cells["G" + StartWith].Value = SetFormula("G", StartWith - n + 1, "G", StartWith - 1, "SUM");
//                    Cells["G" + StartWith].Font.Bold = true;
//                    Cells["G" + StartWith].NumberFormat = "### ### ##0.00";
//                    //
//                    StartWith += 2;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Загальна кількість одиниць фактично";
//                    StartWith++;
//                    Cells["E" + StartWith].Value = "(Прописом)";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Разом фактично за описом:";
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = RuDateAndMoneyConverter.CurrencyToTxt(Sum, true);
//                    StartWith++;
//                    Cells["E" + StartWith].Value = "(Прописом)";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Голова комісії";
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["C" + StartWith].Value = "Посада"; Cells["E" + StartWith].Value = "Прізвище І.Б."; Cells["G" + StartWith].Value = "Підпис";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Члени комісії";
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["C" + StartWith].Value = "Посада"; Cells["E" + StartWith].Value = "Прізвище І.Б."; Cells["G" + StartWith].Value = "Підпис";
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    //Cells["A" + StartWith].Value = "_________________________________________________________________________________________";
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["C" + StartWith].Value = "Посада"; Cells["E" + StartWith].Value = "Прізвище І.Б."; Cells["G" + StartWith].Value = "Підпис";
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    //Cells["A" + StartWith].Value = "_________________________________________________________________________________________";
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["C" + StartWith].Value = "Посада"; Cells["E" + StartWith].Value = "Прізвище І.Б."; Cells["G" + StartWith].Value = "Підпис";
//                    //
//                    StartWith += 2;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Усі цінності пойменовані в цьому інвентаризаційному описі з № по № ";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    //Cells["A" + StartWith].Value = "_______________________________________________________________________________________";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    //Cells["A" + StartWith].Value = "_______________________________________________________________________________________";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    //Cells["A" + StartWith].Value = "_______________________________________________________________________________________";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].HorizontalAlignment = HAlign.Center; Cells["A" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["A" + StartWith].Value = "Матеріально-відповідальна особа (особи)";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "\"_____\"______________20___р."; ;
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "Вказані у даному описі дані і підрахунки перевірив";
//                    //
//                    StartWith++;
//                    Cells["A" + StartWith + ":" + "G" + StartWith].Merge();
//                    Cells["A" + StartWith].Value = "\"_____\"______________20___р.";
//                    StartWith++;
//                    Cells["E" + StartWith + ":" + "G" + StartWith].HorizontalAlignment = HAlign.Center; Cells["E" + StartWith + ":" + "G" + StartWith].VerticalAlignment = VAlign.Center;
//                    Cells["E" + StartWith].Value = "Посада";
//                    Cells["G" + StartWith].Value = "Підпис";

//                }
//            }

//            Workbook.Worksheets[0].Delete();
//            Workbook.WindowInfo.ActiveSheet = Workbook.Worksheets[0];

//            try
//            {
//                Workbook.SaveAs(GeneratedReportsDir + "Інвентаризаційна відомість за " + reportDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + GeneratedReportsDir + "Інвентаризаційна відомість за " + reportDate + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//                return true;
//            }
//            catch (System.IO.IOException) { 
//                MessageBox.Show("Документ вже відкритий!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//            catch (System.ComponentModel.Win32Exception) { 
//                MessageBox.Show("Не знайдено програму Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }
//        }


//        #endregion

//        #region Contractors report's

//        public bool GetOperationActByPeriod(DateTime startDate, DateTime endDate, IEnumerable<InvoicesDTO> invoicesData)
//        {

//            //var invoicesData = mapper.Map<IEnumerable<Invoices>, List<InvoicesDTO>>(invoices.GetAll().Where(bdsm => bdsm.Month_Current >= startDate && bdsm.Month_Current <= endDate));

//            var bankPaymantsData = mapper.Map<IEnumerable<Bank_Payments>, List<Bank_PaymentsDTO>>(bankPayments.GetAll().Where(bdsm => bdsm.Payment_Date >= startDate && bdsm.Payment_Date <= endDate));

//            FbParameter[] Parameters =
//            {
//                new FbParameter("BeginDate", startDate),
//                new FbParameter("EndDate", endDate),
//                new FbParameter("FLAG1", 1),
//                new FbParameter("FLAG2", 1),
//                new FbParameter("FLAG3", 1),
//                new FbParameter("FLAG4", 1)
//            };
//            string procName = @"select * from ""GetOrdersAccountByPeriod""(@BeginDate,@EndDate,@FLAG1, @FLAG2, @FLAG3, @FLAG4)";

//            var ordersData = mapper.Map<IEnumerable<AccountOrders>, List<AccountOrdersDTO>>(accountOrders.SQLExecuteProc(procName, Parameters));

//            List<DateTime> monthsFromPeriod = GetMonthFromPeriod(startDate, endDate);

//            return PrintOperationActByPeriod(bankPaymantsData, invoicesData, ordersData, monthsFromPeriod);
//        }

        


//        public bool PrintOperationActByPeriod(IEnumerable<Bank_PaymentsDTO> bankPaymantData, IEnumerable<InvoicesDTO> invoicesData, IEnumerable<AccountOrdersDTO> ordersData, List<DateTime> monthFromPeriod)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\OperationActTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            var workBook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\OperationActTemplate.xls");
//            var worksheet = workBook.Worksheets[0];
//            IRange Cells = worksheet.Cells;
//            var cells = worksheet.Cells;

//            int startWith = 5;
//            //было так
//            //var allContractors = contractors.GetAll().Where(bdsm => !bdsm.Name.StartsWith("Дог")).ToList();
//            var allContractors = contractors.GetAll().ToList();
//            foreach (var itemMonth in monthFromPeriod)
//            {
//                decimal? invoiceTotaMonthPrice = 0m;
//                decimal? invoiceMonthPrice = 0m;
//                decimal? invoiceMonthVat = 0m;

//                decimal? orderTotalMonthWithWat = 0m;
//                decimal? orderTotalMonthPrice = 0m;
//                decimal? orderMonthVat = 0m;

//                decimal? bankPaymantPaymantMonthPrice = 0m;
//                decimal? bankPaymantVatMonthPrice = 0m;

//                RuDateAndMoneyConverter.MonthName(itemMonth.Date.Month, Utils.TextCase.Nominative);

//                cells["A" + startWith + ":R" + startWith].Merge();
//                cells["A" + startWith + ":R" + startWith].Interior.Color = System.Drawing.Color.MistyRose;
//                cells["A" + startWith + ":R" + startWith].Value = RuDateAndMoneyConverter.MonthName(itemMonth.Date.Month, Utils.TextCase.Nominative) + " " + itemMonth.Date.Year + " р.";
//                cells["A" + startWith + ":R" + startWith].HorizontalAlignment = HAlign.Center;
//                cells["A" + startWith + ":R" + startWith].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous;

//                ++startWith;

//                foreach (var item in allContractors)
//                {
//                    List<int> maxCounter = new List<int>();

//                    var bankPaymantByContractor = bankPaymantData.Where(srt => srt.Contractor_Id == item.Id && srt.Payment_Date.Value.Month == itemMonth.Date.Month).OrderBy(ord => ord.Payment_Date).ToList();
//                    var invoiceDataByContractor = invoicesData.Where(srt => srt.Contractor_Id == item.Id && srt.Month_Invoice.Month == itemMonth.Date.Month).OrderBy(ord => ord.Month_Invoice).ToList();
//                    var ordersDataByContractor = ordersData.Where(srt => srt.VendorId == item.Id && srt.InvoiceDate.Value.Month == itemMonth.Date.Month).OrderBy(ord => ord.InvoiceDate).ToList();

//                    decimal? invoiceTotalPrice = 0m;
//                    decimal? invoicePrice = 0m;
//                    decimal? invoiceVat = 0m;

//                    decimal? orderTotalWithWat = 0m;
//                    decimal? orderTotalPrice = 0m;
//                    decimal? orderVat = 0m;

//                    decimal? bankPaymantPaymantPrice = 0m;
//                    decimal? bankPaymantVatPrice = 0m;

//                    maxCounter.Add(bankPaymantByContractor.Count);
//                    maxCounter.Add(invoiceDataByContractor.Count);
//                    maxCounter.Add(ordersDataByContractor.Count);

//                    if (maxCounter.Max() == 0)
//                        continue;

//                    cells["A" + startWith + ":R" + startWith].Merge();
//                    cells["A" + startWith + ":R" + startWith].Interior.Color = System.Drawing.Color.PeachPuff;
//                    cells["A" + startWith + ":R" + startWith].Value = item.Name + " " + item.Srn;
//                    cells["A" + startWith + ":R" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["A" + startWith + ":R" + startWith].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous;
//                    ////////////////////////////////////////////////////////////////////////////////////////////////////

//                    List<DateTime?> dateOfPayment = bankPaymantByContractor.Select(slc => slc.Payment_Date).ToList();
//                    List<DateTime?> groupDateOfPayment = dateOfPayment.GroupBy(x => x.Value).Select(y => y.First()).ToList();
//                    //var invoiceNoDate = invoiceDataByContractor.Except(groupDateOfPayment.);

//                     List<Bank_PaymentsDTO> addedBankPaymants = new List<Bank_PaymentsDTO>();
//                     List<InvoicesDTO> addedInvoices = new List<InvoicesDTO>();
//                     List<AccountOrdersDTO> addedAccountOrders = new List<AccountOrdersDTO>();

//                     //++startWith;

//                     //int counterTotal = 0;

//                     for (int i = 0; i < groupDateOfPayment.Count(); ++i)
//                     {
//                         var invoicesByDate = invoiceDataByContractor.Where(src => src.Month_Invoice == groupDateOfPayment[i]).ToList();
//                         var bankPaymantsByDate = bankPaymantByContractor.Where(src => src.Payment_Date == groupDateOfPayment[i]).ToList();
//                         var ordersByDate = ordersDataByContractor.Where(src => src.InvoiceDate == groupDateOfPayment[i]).ToList();

//                         int counterDatePeriod = new int[] { invoicesByDate.Count(), bankPaymantsByDate.Count(), ordersByDate.Count() }.Max();
//                         //counterTotal += counterDatePeriod;


//                         for (int k = 0; k < invoicesByDate.Count(); ++k)
//                         {
//                             cells["A" + (startWith + k + 1)].Value = invoicesByDate[k].Invoice_Number;
//                             cells["B" + (startWith + k + 1)].Value = invoicesByDate[k].Month_Invoice.ToShortDateString();
//                             cells["C" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["C" + (startWith + k + 1)].Value = invoicesByDate[k].Total_Price;
//                             cells["D" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["D" + (startWith + k + 1)].Value = invoicesByDate[k].Price;
//                             cells["E" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["E" + (startWith + k + 1)].Value = invoicesByDate[k].Vat;
//                             cells["F" + (startWith + k + 1)].NumberFormat = "";
//                             cells["F" + (startWith + k + 1)].Value = invoicesByDate[k].Bal_Name; // <=====  рахунок пдв сюда 

//                             invoiceTotalPrice += invoicesByDate[k].Total_Price;
//                             invoicePrice += invoicesByDate[k].Price;
//                             invoiceVat += invoicesByDate[k].Vat;
//                         }

//                         for (int k = 0; k < bankPaymantsByDate.Count(); ++k)
//                         {
//                             cells["N" + (startWith + k + 1)].Value = bankPaymantsByDate[k].Payment_Document;
//                             cells["O" + (startWith + k + 1)].Value = ((DateTime)bankPaymantsByDate[k].Payment_Date).ToShortDateString();
//                             cells["P" + (startWith + k + 1)].Value = bankPaymantsByDate[k].Purpose;
//                             cells["Q" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["Q" + (startWith + k + 1)].Value = bankPaymantsByDate[k].Payment_Price;
//                             cells["R" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["R" + (startWith + k + 1)].Value = bankPaymantsByDate[k].VatPrice;

//                             bankPaymantPaymantPrice += bankPaymantsByDate[k].Payment_Price;
//                             bankPaymantVatPrice += bankPaymantsByDate[k].VatPrice;
//                         }

//                         for (int k = 0; k < ordersByDate.Count(); ++k)
//                         {
//                             cells["G" + (startWith + k + 1)].Value = ordersByDate[k].InvoiceNum;
//                             cells["H" + (startWith + k + 1)].Value = ((DateTime)ordersByDate[k].InvoiceDate).ToShortDateString();
//                             cells["I" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["I" + (startWith + k + 1)].Value = ordersByDate[k].TotalWithVat;
//                             cells["J" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["J" + (startWith + k + 1)].Value = ordersByDate[k].TotalPrice;
//                             cells["K" + (startWith + k + 1)].NumberFormat = "### ### ##0.00";
//                             cells["K" + (startWith + k + 1)].Value = ordersByDate[k].Vat;
//                             cells["L" + (startWith + k + 1)].NumberFormat = "";
//                             cells["L" + (startWith + k + 1)].HorizontalAlignment = HAlign.Center;
//                             cells["L" + (startWith + k + 1)].Value = ordersByDate[k].VatAccountNum; // <=====  рахунок пдв сюда
//                             cells["M" + (startWith + k + 1)].NumberFormat = "";
//                             cells["M" + (startWith + k + 1)].Value = ordersByDate[k].AccountNum;
                             
//                             orderTotalWithWat += ordersByDate[k].TotalWithVat;
//                             orderTotalPrice += ordersByDate[k].TotalPrice;
//                             orderVat += ordersByDate[k].Vat;
//                         }     

//                         addedBankPaymants.AddRange(bankPaymantsByDate);
//                         addedInvoices.AddRange(invoicesByDate);
//                         addedAccountOrders.AddRange(ordersByDate);

//                         startWith += counterDatePeriod;
//                     }

//                    bankPaymantByContractor = bankPaymantByContractor.Except(addedBankPaymants).ToList();
//                    invoiceDataByContractor = invoiceDataByContractor.Except(addedInvoices).ToList();
//                    ordersDataByContractor = ordersDataByContractor.Except(addedAccountOrders).ToList();

//                    int counterRemains = new int[] { bankPaymantByContractor.Count(), invoiceDataByContractor.Count(), ordersDataByContractor.Count() }.Max();

//                    for (int i = 0; i < invoiceDataByContractor.Count(); ++i)
//                    {
//                        cells["A" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Invoice_Number;
//                        cells["B" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Month_Invoice.ToShortDateString();
//                        cells["C" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["C" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Total_Price;
//                        cells["D" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["D" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Price;
//                        cells["E" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["E" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Vat;
//                        cells["F" + (startWith + i + 1)].NumberFormat = "";
//                        cells["F" + (startWith + i + 1)].Value = invoiceDataByContractor[i].Bal_Name; // <=====  рахунок пдв сюда 

//                        invoiceTotalPrice += invoiceDataByContractor[i].Total_Price;
//                        invoicePrice += invoiceDataByContractor[i].Price;
//                        invoiceVat += invoiceDataByContractor[i].Vat;
//                    }

//                    for (int i = 0; i < bankPaymantByContractor.Count(); ++i)
//                    {
//                        cells["N" + (startWith + i + 1)].Value = bankPaymantByContractor[i].Payment_Document;
//                        cells["O" + (startWith + i + 1)].Value = ((DateTime)bankPaymantByContractor[i].Payment_Date).ToShortDateString();
//                        cells["P" + (startWith + i + 1)].Value = bankPaymantByContractor[i].Purpose;
//                        cells["Q" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["Q" + (startWith + i + 1)].Value = bankPaymantByContractor[i].Payment_Price;
//                        cells["R" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["R" + (startWith + i + 1)].Value = bankPaymantByContractor[i].VatPrice;

//                        bankPaymantPaymantPrice += bankPaymantByContractor[i].Payment_Price;
//                        bankPaymantVatPrice += bankPaymantByContractor[i].VatPrice;
//                    }

//                    for (int i = 0; i < ordersDataByContractor.Count(); ++i)
//                    {
//                        cells["G" + (startWith + i + 1)].Value = ordersDataByContractor[i].InvoiceNum;
//                        cells["H" + (startWith + i + 1)].Value = ((DateTime)ordersDataByContractor[i].InvoiceDate).ToShortDateString();
//                        cells["I" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["I" + (startWith + i + 1)].Value = ordersDataByContractor[i].TotalWithVat;
//                        cells["J" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["J" + (startWith + i + 1)].Value = ordersDataByContractor[i].TotalPrice;
//                        cells["K" + (startWith + i + 1)].NumberFormat = "### ### ##0.00";
//                        cells["K" + (startWith + i + 1)].Value = ordersDataByContractor[i].Vat;
//                        cells["L" + (startWith + i + 1)].NumberFormat = "";
//                        cells["L" + (startWith + i + 1)].HorizontalAlignment = HAlign.Center;
//                        cells["L" + (startWith + i + 1)].Value = ordersDataByContractor[i].VatAccountNum; // <=====  рахунок пдв сюда
//                        cells["M" + (startWith + i + 1)].NumberFormat = "";
//                        cells["M" + (startWith + i + 1)].Value = ordersDataByContractor[i].AccountNum;

//                        orderTotalWithWat += ordersDataByContractor[i].TotalWithVat;
//                        orderTotalPrice += ordersDataByContractor[i].TotalPrice;
//                        orderVat += ordersDataByContractor[i].Vat;
//                    }

//                    startWith += counterRemains;

//                    cells["C" + (startWith + 1)].Value = invoiceTotalPrice;
//                    cells["D" + (startWith + 1)].Value = invoicePrice;
//                    cells["E" + (startWith + 1)].Value = invoiceVat;
//                    cells["I" + (startWith + 1)].Value = orderTotalWithWat;
//                    cells["J" + (startWith + 1)].Value = orderTotalPrice;
//                    cells["K" + (startWith + 1)].Value = orderVat;
//                    cells["Q" + (startWith + 1)].Value = bankPaymantPaymantPrice;
//                    cells["R" + (startWith + 1)].Value = bankPaymantVatPrice;
                    
//                    invoiceTotaMonthPrice += invoiceTotalPrice;
//                    invoiceMonthPrice += invoicePrice;
//                    invoiceMonthVat += invoiceVat;
//                    orderTotalMonthWithWat += orderTotalWithWat;
//                    orderTotalMonthPrice += orderTotalPrice;
//                    orderMonthVat += orderVat;
//                    bankPaymantPaymantMonthPrice += bankPaymantPaymantPrice;
//                    bankPaymantVatMonthPrice += bankPaymantVatPrice;

//                    cells["A" + (startWith + 1)].Value = "Разом:";
//                    cells["A" + (startWith + 1) + ":R" + (startWith + 1)].Interior.Color = System.Drawing.Color.LightBlue;

//                    startWith += 3;
//                }

//                cells["C" + startWith].Value = invoiceTotaMonthPrice;
//                cells["D" + startWith].Value = invoiceMonthPrice;
//                cells["E" + startWith].Value = invoiceMonthVat;
//                cells["I" + startWith].Value = orderTotalMonthWithWat;
//                cells["J" + startWith].Value = orderTotalMonthPrice;
//                cells["K" + startWith].Value = orderMonthVat;
//                cells["Q" + startWith].Value = bankPaymantPaymantMonthPrice;
//                cells["R" + startWith].Value = bankPaymantVatMonthPrice;

//                cells["A" + startWith].Value = "Разом за " + RuDateAndMoneyConverter.MonthName(itemMonth.Date.Month, Utils.TextCase.Nominative) + " " + itemMonth.Date.Year + " року:";
//                cells["A" + startWith  + ":R" + startWith].Interior.Color = System.Drawing.Color.LightBlue;

//                startWith += 2;
//            }
//            try
//            {
//                string documentAddresName = GeneratedReportsDir +
//                                            String.Format("Звіт з податковими та оплатами") + ".xls";
//                workBook.SaveAs(documentAddresName, FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + documentAddresName + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ вже відкрито!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;
//        }

//        private List<DateTime> GetMonthFromPeriod(DateTime startDate, DateTime endDate)
//        {
//            DateTime StartDate = startDate;

//            List<DateTime> dateInMonth = new List<DateTime>();
//            //int startMonthNumber = startDate.Date.Month;
//            //int endMonthNumber = endDate.Date.Month;

//            while ((StartDate.Date.Month <= endDate.Date.Month) && (StartDate.Date.Year <= endDate.Date.Year))
//            {
//                dateInMonth.Add(StartDate);
//                StartDate = StartDate.Date.AddMonths(1);
//            }

//            return dateInMonth;
//        }
               
//        public bool GetDetalsReportByOperationContractors(DateTime StartDateSaldo, int FLAF1, int FLAG3, int FLAG4, int PFLAG3, int PFLAG4,
//            DateTime EndDateSaldo, int ContractorId, DateTime BeginDatePayment, DateTime EndDatePayment)
//        {
//            //----
//            FbParameter[] Parameters =
//                {
//                    new FbParameter("StartDateSaldo", StartDateSaldo),
//                    new FbParameter("FLAG1", FLAF1),
//                    new FbParameter("FLAG3", FLAG3),
//                    new FbParameter("FLAG4", FLAG4),
//                    new FbParameter("PFLAG3", PFLAG3),
//                    new FbParameter("PFLAG4", PFLAG4),
//                    new FbParameter("EndDateSaldo", EndDateSaldo),
//                    new FbParameter("ContractorId", ContractorId),
//                    new FbParameter("BeginDatePayment", BeginDatePayment),
//                    new FbParameter("EndDatePayment", EndDatePayment)
//                };

//            string procName = @"select * from ""GetDetalsReportByContractorProc""(@StartDateSaldo,@FLAG1,@FLAG3,@FLAG4,@PFLAG3,@PFLAG4,@EndDateSaldo,
//                                                @ContractorId,@BeginDatePayment,@EndDatePayment)";

//            var dataSource = mapper.Map<IEnumerable<DetalsReportByOperationContractors>, List<DetalsReportByOperationContractorsDTO>>
//                (detalsReportByOperationContractors.SQLExecuteProc(procName, Parameters));
//            //----
//            FbParameter[] ParametersOrd =
//                { new FbParameter("ContractorId", ContractorId)};
//            string procOrd = @"select * from ""GetOrderForDetalsContractor""(@ContractorId)";
//            var dataSourceOrd = mapper.Map<IEnumerable<OrderForDetalsContractor>, List<OrderForDetalsContractorDTO>>
//                            (orderForDetalsContractor.SQLExecuteProc(procOrd, ParametersOrd));
//            //-------

//            FbParameter[] ParametersBankPay =
//                {                      
//                    new FbParameter("StartDateSaldo", StartDateSaldo),
//                    new FbParameter("FLAG1", FLAF1),
//                    new FbParameter("FLAG3", FLAG3),
//                    new FbParameter("FLAG4", FLAG4),
//                    new FbParameter("PFLAG3", PFLAG3),
//                    new FbParameter("PFLAG4", PFLAG4),
//                    new FbParameter("EndDateSaldo", EndDateSaldo),
                    
//                    new FbParameter("BeginDate", BeginDatePayment),
//                    new FbParameter("EndDate", EndDatePayment),
//                new FbParameter("id", ContractorId)};
                    
//            string procBankPay = @"select * from ""GetBPDetalsReportByConProc""(@StartDateSaldo,@FLAG1,@FLAG3,@FLAG4,@PFLAG3
//                                                ,@PFLAG4,@EndDateSaldo,@BeginDate,@EndDate,@id)";
//            var dataSourceBankPay = mapper.Map<IEnumerable<GetBPDetalsReportByCon>, List<GetBPDetalsReportByConDTO>>
//                            (bpDetalsReportByCon.SQLExecuteProc(procBankPay, ParametersBankPay));

//            if (dataSource.Count > 0 && dataSourceOrd.Count > 0)
//                return PrintDetalsByOperationContractor(dataSource,dataSourceOrd,StartDateSaldo.Date.ToShortDateString(), EndDateSaldo.Date.ToShortDateString());
//            else
//            { 
//                if(dataSourceBankPay.Count>0)
//                    return PrintDetalsBPByOperationContractor(dataSourceBankPay,dataSourceOrd, StartDateSaldo.Date.ToShortDateString(), EndDateSaldo.Date.ToShortDateString());
//                else
//                return false;        
//            }
//        }
//        public bool PrintDetalsByOperationContractor(List<DetalsReportByOperationContractorsDTO> reportList, List<OrderForDetalsContractorDTO> reportListOrd, string StartDate, string EndDate)
//        {

//            string templateName = @"\Templates\DetalsReportByContractor.xls";

//            Factory.GetWorkbook(GeneratedReportsDir + templateName);


//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 9;

//            IRange cells = Worksheet.Cells;
//            int recCount = reportList.Count();
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();
//            int startPosition = 4, currentPosition = startPosition + 2;

//            cells["D3:J3"].Merge();
//            cells["D3:J3"].Value = "Розгорнутий звіт за операціями контрагента "+ reportList[0].ContractorName+
//                " за період "+ StartDate+" - "+ EndDate;
//            cells["D3"].Style.Font.Bold = true;

//            int stMonth = DateTime.Parse(StartDate).Month;
//            int enMonth = DateTime.Parse(EndDate).Month;

//            int findAllPrice = 0;
//            int findMonthYear = 0;
//            int findMonthMore = 0;
//            reportList = reportList.Where(a => a.MonthCurrent.Value.Month <= stMonth && a.MonthCurrent.Value.Month >= enMonth).ToList();
//            if (reportList.Count > 0)
//            {
//                for (int i = 0; i < reportList.Count; i++)
//                {
//                    Сells["A" + startWith + ":" + "X" + startWith].Borders.LineStyle = LineStyle.Continuous;

//                    cells["A" + startWith].Value = reportList[i].ContractorSrn;
//                    cells["B" + startWith].Value = reportList[i].ContractorName;


//                    cells["C" + startWith].Value = reportList[i].BeginDebit;
//                    cells["D" + startWith].Value = reportList[i].BeginCredit;

//                    cells["E" + startWith].Value = reportList[i].PaymentDocument;
//                    cells["F" + startWith].Value = reportList[i].PaymentDate;
//                    cells["G" + startWith].Value = reportList[i].Purpose;
//                    cells["H" + startWith].Value = reportList[i].CreditPrice;
//                    cells["I" + startWith].Value = reportList[i].VatPrice;

//                    cells["Q" + startWith].Value = reportList[i].InvoiceNumber;
//                    cells["R" + startWith].Value = reportList[i].MonthCurrent;
//                    cells["S" + startWith].Value = reportList[i].InvTotalPrice;
//                    cells["T" + startWith].Value = reportList[i].InvPrice;
//                    cells["U" + startWith].Value = reportList[i].InvVat;
//                    cells["V" + startWith].Value = reportList[i].BAName;

//                    var i1 = reportList[i].RegId;
//                    var i2 = reportList[i].PaymentDate;
//                    int findYear = i2.Value.Year;
//                    int findMonth = i2.Value.Month;
//                    var i3 = reportList[i].VatPrice;

//                    foreach (var item in reportListOrd.Where(a => a.VendorId == i1))//&& a.InvoiceDate.Year == findYear
//                    {
//                        if (item.InvoiceDate != null && item.InvoiceDate.Value.Month == findMonth
//                            && item.InvoiceDate.Value.Year == findYear && item.AllPrice == i3)
//                        {
//                            findMonthYear = 1;
//                            findAllPrice = 1;
//                            cells["J" + startWith].Value = item.InvoiceNum;
//                            cells["K" + startWith].Value = item.InvoiceDate;
//                            cells["M" + startWith].Value = item.AllPrice;
//                            cells["N" + startWith].Value = item.TotalPrice;
//                            cells["O" + startWith].Value = item.OrdVat;
//                            cells["P" + startWith].Value = item.VatAccountNum;
//                            startWith++;
//                        }
//                    }
//                    foreach (var item in reportListOrd.Where(a => a.VendorId == i1))
//                    {
//                        if (findAllPrice == 0 && findMonthYear == 0 && item.InvoiceDate != null && item.InvoiceDate.Value.Month == findMonth
//                            && item.InvoiceDate.Value.Year == findYear)
//                        {
//                            findMonthMore = 1;
//                            cells["J" + startWith].Value = item.InvoiceNum;
//                            cells["K" + startWith].Value = item.InvoiceDate;
//                            cells["M" + startWith].Value = item.AllPrice;
//                            cells["N" + startWith].Value = item.TotalPrice;
//                            cells["O" + startWith].Value = item.OrdVat;
//                            cells["P" + startWith].Value = item.VatAccountNum;
//                            startWith++;
//                        }
//                    }
//                    foreach (var item in reportListOrd.Where(a => a.VendorId == i1))
//                    {
//                        if (findAllPrice == 0 && findMonthYear == 0 && findMonthMore == 0 && item.InvoiceDate != null && item.InvoiceDate.Value.Month == (findMonth + 1)
//                            && item.InvoiceDate.Value.Year == findYear)
//                        {
//                            cells["J" + startWith].Value = item.InvoiceNum;
//                            cells["K" + startWith].Value = item.InvoiceDate;
//                            cells["M" + startWith].Value = item.AllPrice;
//                            cells["N" + startWith].Value = item.TotalPrice;
//                            cells["O" + startWith].Value = item.OrdVat;
//                            cells["P" + startWith].Value = item.VatAccountNum;
//                            startWith++;
//                        }
//                    }

//                }
//            }
//            else { return false; }
//            string path = @"D:\";
//            try{
//                Workbook.SaveAs(path + "Розгорнутий звіт за операціями контрагкента "  +
//                     " за період " + StartDate + " - " + EndDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + "Розгорнутий звіт за операціями контрагкента "  +
//                    " за період " + StartDate + " - " + EndDate+".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            return true;
//        }

//        public bool PrintDetalsBPByOperationContractor(List<GetBPDetalsReportByConDTO> reportBankPay,List<OrderForDetalsContractorDTO> reportListOrd, string StartDate, string EndDate)
//        {
//            string templateName = @"\Templates\DetalsReportByContractor.xls";

//            Factory.GetWorkbook(GeneratedReportsDir + templateName);


//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 9;

//            IRange cells = Worksheet.Cells;
            
//            Dictionary<string, byte> HeaderColumn = new Dictionary<string, byte>();
//            int startPosition = 4, currentPosition = startPosition + 2;

//            cells["D3:J3"].Merge();
//            cells["D3:J3"].Value = "Розгорнутий звіт за операціями контрагента " + reportBankPay[0].Name +
//                " за період " + StartDate + " - " + EndDate;
//            cells["D3"].Style.Font.Bold = true;



//            cells["A" + startWith].Value = reportBankPay[0].ContractorSrn;
//            cells["B" + startWith].Value = reportBankPay[0].Name;
//            cells["C" + 9].Value = reportBankPay[0].BeginDebit;
//            cells["D" + 9].Value = reportBankPay[0].BeginCredit;
//            cells["W" + 9].Value = reportBankPay[0].EndDebit;
//            cells["X" + 9].Value = reportBankPay[0].EndCredit;

//            foreach (var item in reportBankPay)
//            {
//                // cells["A" + startWith].Value = item.ContractorSrn;
//                // 


//                cells["E" + startWith].Value = item.PaymentDoc;
//                cells["F" + startWith].Value = item.PaymentDate;
//                cells["G" + startWith].Value = item.Purpose;
//                cells["H" + startWith].Value = item.CreditPrice;
//                cells["I" + startWith].Value = item.VatPrice;

                

//                startWith++;
                
//            }
//            int styear = DateTime.Parse(StartDate).Year;
//            int stmonth = DateTime.Parse(StartDate).Month;

   

//            int enyear = DateTime.Parse(EndDate).Year;
//            int enmonth = DateTime.Parse(EndDate).Month;

//            reportListOrd = reportListOrd.OrderBy(a => a.Id).ToList();
//            reportListOrd = reportListOrd.Where(a => a.InvoiceDate != null && a.InvoiceDate.Value.Month >= stmonth
//                && a.InvoiceDate.Value.Month <= enmonth&& a.InvoiceDate.Value.Year >= styear && a.InvoiceDate.Value.Year <= enyear).ToList();
//            startWith = 9;
//            foreach (var itemOrd in reportListOrd)//&& a.InvoiceDate.Year == findYear
//            {
//                if (itemOrd.InvoiceDate != null)
//                {
//                    cells["J" + startWith].Value = itemOrd.InvoiceNum;
//                    cells["K" + startWith].Value = itemOrd.InvoiceDate;
//                    cells["M" + startWith].Value = itemOrd.AllPrice;
//                    cells["N" + startWith].Value = itemOrd.TotalPrice;
//                    cells["O" + startWith].Value = itemOrd.OrdVat;
//                    cells["P" + startWith].Value = itemOrd.VatAccountNum;
                    

//                    Сells["A" + startWith + ":" + "X" + startWith].Borders.LineStyle = LineStyle.Continuous;
//                    startWith++;
//                } 
//            }
//            string path = @"D:\";
//            try{
//                Workbook.SaveAs(path + "Розгорнутий звіт за операціями контрагкента "  +
//                     " за період " + StartDate + " - " + EndDate + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + "Розгорнутий звіт за операціями контрагкента "  +
//                    " за період " + StartDate + " - " + EndDate+".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            return true;
//        }
//        //---------------------------------------------------------------------------------------------------------------------------------------------------------
//        public bool PrintChessAccount(List<AccountsDTO> accountModel, DateTime StartDate, DateTime EndDate, List<FixedAssetsReportRegisterCh1DTO> faGroupShort103,
//            List<InvoicesDTO> invoiceInfoList, List<CalcWithBuyersInfoDTO> calcWithBayersInfoList36_1)
//        {
            
//            string path = @"D:\";
//            string templateName = @"\Templates\ChessTemplate.xls";
//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + templateName);
//            var Worksheet = Workbook.Worksheets[0];
//            List<AccountsDTO> listWithout313=new List<AccountsDTO>();
//            listWithout313.AddRange(accountModel);
            
//            List<CalcWithBuyersReportDTO> calcWithBayer362 = GetCWB(StartDate, EndDate, 101).ToList();
//          //  List<CalcWithBuyersReportDTO> calcWithBayer362debit = GetCWB(StartDate, EndDate, 117).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 37).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311 = rez.Where(a => a.BankAccountId == 37).ToList();//GetOSVkvartal_ForChess(StartDate, EndDate, 37).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 62).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311_3 = rez.Where(a => a.BankAccountId == 62).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 39).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311_4 = rez.Where(a => a.BankAccountId == 39).ToList();//GetOSVkvartal_ForChess(StartDate, EndDate, 39).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 45).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311_5 = rez.Where(a => a.BankAccountId == 45).ToList();//GetOSVkvartal_ForChess(StartDate, EndDate, 45).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 109).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311_6 = rez.Where(a => a.BankAccountId == 109).ToList();//GetOSVkvartal_ForChess(StartDate, EndDate, 109).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 133).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv311_7 = rez.Where(a=>a.BankAccountId==133&a.RecId==2).ToList(); //GetOSVkvartal_ForChess(StartDate, EndDate, 133).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 48).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv312 = rez.Where(a => a.BankAccountId == 48).ToList(); //GetOSVkvartal_ForChess(StartDate, EndDate, 48).ToList();
//            rez = null;
//            GetOSVkvartal_ForChess(StartDate, EndDate, 14).ToList();
//            List<GetOSVkvartal_ForChessDTO> Osv372 = rez.Where(a => a.BankAccountId == 14).ToList(); //GetOSVkvartal_ForChess(StartDate, EndDate, 14).ToList();
            
//            Worksheet.WindowInfo.ScrollRow = 1;
//            Worksheet.WindowInfo.ScrollRow = 1;
//            Worksheet.WindowInfo.FreezePanes = true;

//            List<InvoicesSortDTO> invoicesSortList = new List<InvoicesSortDTO>();

//            var cells = Worksheet.Cells;
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\ChessTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            int startWithGorizontal = 1;
//            int startWithVertical = 3;
          
//            listWithout313.RemoveAll(a => a.Num.StartsWith("313/"));
//            listWithout313.AddRange(accountModel.Where(a => a.Id == 122));//add 313/1
            
//            foreach (var t in listWithout313.OrderBy(a=>a.Num))
//            {
//                cells["A" + startWithVertical].Value = t.Num;
//                cells[1, startWithGorizontal].Value = t.Num;
//                startWithVertical++;
//                startWithGorizontal++;  
//            }
           
//            List<MSTrialBalanceByAccountsDTO> list63 =GetCreditDebit63ForChess(StartDate, EndDate, "-1", "-1", "1", "16", "16").ToList();

//            //decimal credit03      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 1 || a.RecId == 3 || a.RecId == 8)).Sum(a => a.CurrentAmortizationForPeriod);//23--131/03          
//            //decimal credit04      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 4)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/04         
//            //decimal credit0401    = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 5)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/04/01
//            //decimal credit05      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 6)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/05
//            //decimal credit06      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 7)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/06
//            //decimal credit09      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 9)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/09
//            //decimal credit25      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 10)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/25
//            //decimal credit27      = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 2)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/27

           
        
//            int row = 1;
//            int col;
//            string rezValueCredit, rezValueDebit;
//            foreach (var itemD in listWithout313)
//            {
//              //  int debet=itemD.Id;
//                row++;
                
//                var cellValueDebit = Worksheet.Workbook.Worksheets[0].Range[row, 0].Value;//str, stolbets
//                rezValueDebit = Convert.ToString(cellValueDebit);
//                col = 0;
//                foreach (var itemC in listWithout313)
//                {
//                    col++;
                 
//                  //  int credit = itemC.Id;
                                       
//                    var cellValueCredit = Worksheet.Workbook.Worksheets[0].Range[1, col].Value;//str, stolbets
//                    rezValueCredit = Convert.ToString(cellValueCredit);

//                    #region Debit23

//                    if (rezValueDebit == "23" && rezValueCredit == "131/03")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 1 || a.RecId == 3 || a.RecId == 8)).Sum(a => a.CurrentAmortizationForPeriod);//23--131/03    
//                    if (rezValueDebit == "23" && rezValueCredit == "131/04")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 4)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/04       
//                    if (rezValueDebit == "23" && rezValueCredit == "131/04/01")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 5)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/04/01
//                    if (rezValueDebit == "23" && rezValueCredit == "131/05")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 6)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/05
//                    if (rezValueDebit == "23" && rezValueCredit == "131/06")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 7)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/06                
//                    if (rezValueDebit == "23" && rezValueCredit == "131/09")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 9)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/09
//                    if (rezValueDebit == "23" && rezValueCredit == "133/25")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 10)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/25                 
//                    if (rezValueDebit == "23" && rezValueCredit == "133/27")
//                        cells[row, col].Value = faGroupShort103.Where(a => a.FamNum == "23" && (a.RecId == 2)).Sum(a => a.CurrentAmortizationForPeriod);//23-131/27

//                    #endregion

//                    #region Debit63

//                    if (rezValueDebit == "63" && rezValueCredit == "103")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 27).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "104")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 30).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "104/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 58).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "105")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 32).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "106")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 22).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "109")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 108).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "112")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 25).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "125")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 124).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "127")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 35).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 204).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/03")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 205).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/04")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 206).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/04/01")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 239).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/05")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 207).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/06")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 208).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/09")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 209).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "132")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 210).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "133")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 211).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "131/25")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 212).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "133/27")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 213).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "143")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 130).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "151")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 10).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "151/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 11).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "152")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 2).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "153")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 13).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "154")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 34).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "183")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 214).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "201/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 4).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "201/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 5).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "202")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 8).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "203")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 1).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "204")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 7).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "205")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 12).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "207")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 6).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "209")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 9).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "22")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 3).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "23")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 18).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "23/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 31).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "24")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 139).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "26")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 215).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "26/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 216).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "281")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 203).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "282")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 28).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "283")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 126).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "286")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 217).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "301")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 86).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "301/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 121).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 37).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/2")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 49).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 62).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/4")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 39).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 45).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/6")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 109).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "311/7")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 133).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 48).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 63).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/1")//??????
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 218).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/1-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 219).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/10")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 74).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/10-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 73).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/11")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 98).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/11-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 97).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/12")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 110).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/12-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 111).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/13")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 112).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/13-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 113).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/14")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 201).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/14-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 200).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 52).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/2-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 64).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 46).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/3-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 116).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 47).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/4-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 65).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 66).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/5-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 67).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 40).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/6-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 68).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 53).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/7-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 194).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/8")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 54).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/8-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 100).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/81")//??????
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 57).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/9")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 51).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "312/9-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 75).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "313")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 220).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "313/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 122).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "313/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 123).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 69).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 70).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 71).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 72).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 76).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 77).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "314/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 78).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "333")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 241).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "334")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 79).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "334/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 221).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "352")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 222).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "36")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 55).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "36/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 24).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "362")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 101).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "372")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 14).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "373")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 125).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "375")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 131).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "377")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 107).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "378")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 106).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "39")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 128).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "40")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 223).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "44")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 17).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "44/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 224).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "471")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 225).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "473")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 176).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "474")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 134).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "482")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 226).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "531")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 240).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "60")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 115).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "60/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 135).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "60/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 127).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "60/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 136).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "631")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 15).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "632")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 60).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 87).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 92).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/2")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 38).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 90).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 102).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 103).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 91).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "641/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 89).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "642")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 80).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "643")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 141).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "644")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 26).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 85).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 105).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 83).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 82).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 81).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 104).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 88).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "651/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 84).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "652")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 94).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "652/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 227).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "661")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 59).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "671")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 228).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "681")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 96).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "684")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 114).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "685")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 36).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "701")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 117).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "702")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 132).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "703")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 118).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "704")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 129).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "711")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 93).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "712")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 119).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "714")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 41).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "715")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 61).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "716")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 199).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "717")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 145).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "718")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 229).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "719")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 120).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "733")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 99).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "74")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 230).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "79")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 50).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "901")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 231).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "903")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 232).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "91")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 19).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "92")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 21).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "92/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 20).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "93")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 23).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "94")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 233).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "942")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 95).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "943")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 33).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "944")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 146).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "945")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 42).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "948")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 44).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "949")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 43).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "949/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 234).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "951")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 235).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "971")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 236).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "972")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 237).Sum(x => x.PeriodPrice);
//                    if (rezValueDebit == "63" && rezValueCredit == "981")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 1 && w.AccountId == 238).Sum(x => x.PeriodPrice);


//                    #endregion

//                    #region Credit63

//                    if (rezValueCredit == "63" && rezValueDebit == "103")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 27).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "104")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 30).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "104/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 58).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "105")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 32).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "106")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 22).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "109")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 108).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "112")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 25).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "125")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 124).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "127")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 35).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 204).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/03")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 205).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/04")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 206).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/04/01")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 239).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/05")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 207).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/06")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 208).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/09")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 209).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "132")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 210).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "133")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 211).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "131/25")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 212).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "133/27")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 213).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "143")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 130).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "151")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 10).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "151/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 11).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "152")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 2).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "153")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 13).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "154")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 34).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "183")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 214).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "201/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 4).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "201/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 5).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "202")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 8).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "203")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 2).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "204")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 7).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "205")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 12).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "207")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 6).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "209")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 9).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "22")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 3).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "23")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 18).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "23/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 31).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "24")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 139).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "26")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 215).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "26/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 216).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "281")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 203).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "282")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 28).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "283")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 126).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "286")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 217).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "301")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 86).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "301/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 121).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 37).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/2")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 49).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 62).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/4")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 39).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 45).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/6")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 109).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "311/7")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 133).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 48).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 63).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/1")//??????
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 218).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/1-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 219).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/10")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 74).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/10-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 73).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/11")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 98).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/11-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 97).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/12")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 110).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/12-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 111).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/13")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 112).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/13-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 113).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/14")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 201).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/14-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 200).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 52).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/2-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 64).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 46).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/3-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 116).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 47).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/4-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 65).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 66).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/5-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 67).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 40).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/6-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 68).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 53).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/7-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 194).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/8")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 54).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/8-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 100).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/81")//??????
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 57).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/9")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 51).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "312/9-1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 75).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "313")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 220).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "313/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 122).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "313/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 123).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 69).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 70).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 71).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 72).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 76).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 77).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "314/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 78).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "333")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 241).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "334")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 79).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "334/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 221).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "352")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 222).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "36")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 55).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "36/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 24).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "362")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 101).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "372")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 14).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "373")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 125).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "375")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 131).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "377")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 107).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "378")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 106).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "39")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 128).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "40")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 223).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "44")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 17).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "44/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 224).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "471")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 225).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "473")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 176).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "474")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 134).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "482")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 226).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "531")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 240).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "60")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 115).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "60/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 135).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "60/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 127).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "60/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 136).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "631")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 15).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "632")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 60).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 87).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 92).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/2")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 38).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 90).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 102).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 103).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 91).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "641/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 89).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "642")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 80).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "643")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 141).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "644")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 26).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 85).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 105).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/2")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 83).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/3")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 82).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/4")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 81).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/5")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 104).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/6")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 88).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "651/7")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 84).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "652")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 94).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "652/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 227).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "661")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 59).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "671")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 228).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "681")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 96).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "684")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 114).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "685")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 36).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "701")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 117).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "702")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 132).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "703")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 118).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "704")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 129).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "711")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 93).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "712")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 119).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "714")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 41).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "715")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 61).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "716")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 199).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "717")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 145).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "718")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 229).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "719")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 120).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "733")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 99).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "74")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 230).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "79")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 50).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "901")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 231).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "903")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 232).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "91")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 19).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "92")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 21).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "92/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 20).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "93")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 23).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "94")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 233).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "942")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 95).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "943")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 33).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "944")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 146).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "945")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 42).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "948")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 44).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "949")//
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 43).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "949/1")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 234).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "951")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 235).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "971")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 236).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "972")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 237).Sum(x => x.PeriodPrice);
//                    if (rezValueCredit == "63" && rezValueDebit == "981")
//                        cells[row, col].Value = (decimal)list63.AsEnumerable().Where(w => w.FlagDebitCredit == 2 && w.AccountId == 238).Sum(x => x.PeriodPrice);

//                    #endregion

//                    #region Debit641/2



//                    if (rezValueDebit == "641/2" && rezValueCredit == "631")
//                    {
//                        invoicesSortList = invoiceInfoList.Where(a => a.Bal_Name == "631-641/2").GroupBy(a => a.Balance_Account_Id).Select(cl => new InvoicesSortDTO { SumVat = cl.Sum(a => a.Vat) }).ToList();
//                        cells[row, col].Value = (invoicesSortList.Count) != 0 ? invoicesSortList[0].SumVat : 0;
//                    }
//                    if (rezValueDebit == "641/2" && rezValueCredit == "372")
//                    {
//                        invoicesSortList = invoiceInfoList.Where(a => a.Bal_Name == "372-641/2").GroupBy(a => a.Balance_Account_Id).Select(cl => new InvoicesSortDTO { SumVat = cl.Sum(a => a.Vat) }).ToList();
//                        cells[row, col].Value = (invoicesSortList.Count) != 0 ? invoicesSortList[0].SumVat : 0;
//                    }
//                    #endregion

//                    #region Debit36/1

//                    if (rezValueDebit == "36/1" && rezValueCredit == "377")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayersInfoList36_1.Where(a => a.BalanceAccountId == 119 && a.PurposeAccountId == 24).Sum(a => a.Payment + a.PaymentVatPrice));//377-36/1
//                    if (rezValueDebit == "36/1" && rezValueCredit == "712")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayersInfoList36_1.Where(a => a.BalanceAccountId == 119 && a.PurposeAccountId == 24).Sum(a => a.Payment + a.PaymentVatPrice));//377-36/1
//                    if (rezValueDebit == "36/1" && rezValueCredit == "719")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayersInfoList36_1.Where(a => a.BalanceAccountId == 120 && a.PurposeAccountId == 24).Sum(a => a.Payment + a.PaymentVatPrice));
//                    if (rezValueDebit == "36/1" && rezValueCredit == "703")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayersInfoList36_1.Where(a => a.BalanceAccountId == 118 && a.PurposeAccountId == 24).Sum(a => a.Payment + a.PaymentVatPrice));

//                    #endregion


//                    #region Credit36/1
//                    //так не считается 
//                    #endregion

//                    #region debet361
//                    if (rezValueDebit == "362" && rezValueCredit == "701")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "701").Sum(a => a.PeriodPrice));
//                    #endregion
//                    #region credit362
//                    if (rezValueDebit == "377" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "377").Sum(a => a.PeriodPrice));
//                    if (rezValueDebit == "681" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "681").Sum(a => a.PeriodPrice));
//                    if (rezValueDebit == "704" && rezValueCredit == "362")
//                        cells[row, col].Value = (decimal)calcWithBayersInfoList36_1.Where(a => a.BalanceAccountId == 101 && a.PurposeAccountId == 129)
//                            .Sum(a => (a.Payment + a.PaymentVatPrice) == null ? a.Payment : (a.Payment + a.PaymentVatPrice));
//                    if (rezValueDebit == "945" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "945").Sum(a => a.PeriodPrice));
//                    if (rezValueDebit == "312/5-1" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "312/5-1").Sum(a => a.PeriodPrice));
//                    if (rezValueDebit == "312/3-1" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "312/3-1").Sum(a => a.PeriodPrice));
//                    if (rezValueDebit == "312/6-1" && rezValueCredit == "362")
//                        cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "312/6-1").Sum(a => a.PeriodPrice));

//                    #endregion
//                    #region debit362

//                    #endregion

//                    //if (rezValueDebit == "681" && rezValueCredit == "701")
//                    //    cells[row, col].Value = Convert.ToDecimal(calcWithBayer362.Where(a => a.Num == "701").Sum(a => a.PeriodPrice));

//                    #region credit631

//                    if (rezValueDebit == "152" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 2).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "153" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 13).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "154" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 34).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "201/1" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 4).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "201/2" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 5).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "202" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 8).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "203" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 1).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "204" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 7).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "205" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 12).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "207" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 6).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "209" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 9).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "22" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 3).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "282" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 28).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "311" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 37).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "311/2" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 49).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "311/4" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 39).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "631" && rezValueCredit == "631") 
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 15).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "641/2" && rezValueCredit == "631")//???
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 38).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "644" && rezValueCredit == "631")
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 26).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "79" && rezValueCredit == "631")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 50).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "91" && rezValueCredit == "631")
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 19).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "92" && rezValueCredit == "631")
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 21).Sum(a => a.PeriodPrice);
//                    //if (rezValueDebit == "949" && rezValueCredit == "631")
//                    //    cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 43).Sum(a => a.PeriodPrice);

//                    #endregion

//                    #region debit631

//                    if (rezValueDebit == "631" && rezValueCredit == "311/4")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 39).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "631" && rezValueCredit == "311/7")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => /*a.FlagDebitCredit == 1 && */a.AccountId == 133).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "631" && rezValueCredit == "311")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts631_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 37).Sum(a => a.PeriodPrice);

//                    #endregion


//                    #region Debit632

//                    if (rezValueDebit == "632" && rezValueCredit == "714")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 41).Sum(a => a.PeriodPrice);//632-714
//                    if (rezValueDebit == "632" && rezValueCredit == "312/10")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 74).Sum(a => a.PeriodPrice);//632-312/10
//                    if (rezValueDebit == "632" && rezValueCredit == "312/6")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 40).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "632" && rezValueCredit == "312/13")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 112).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "632" && rezValueCredit == "681")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 96).Sum(a => a.PeriodPrice);//261.82 02 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "641/2")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 38).Sum(a => a.PeriodPrice);//28963.59 02 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "312/3")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 46).Sum(a => a.PeriodPrice);//54087 02 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "362")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 101).Sum(a => a.PeriodPrice);//21245.76 03 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "312/4")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 47).Sum(a => a.PeriodPrice);//35152.85 10 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "641/2")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 38).Sum(a => a.PeriodPrice);//7030.57 10 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "312/9")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 51).Sum(a => a.PeriodPrice);//14935.43 12 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "312/5")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 66).Sum(a => a.PeriodPrice);//49052.11 12 2020
//                    if (rezValueDebit == "632" && rezValueCredit == "312/8")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 54).Sum(a => a.PeriodPrice);//123709.47 01 2015

//                    #endregion

//                    #region Credit632

//                    if (rezValueDebit == "202" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 8).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "203" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 1).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "22" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 3).Sum(a => a.PeriodPrice);//22-632
//                    if (rezValueDebit == "641/2" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 38).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "945" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 42).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "92" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 21).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "93" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 23).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "949" && rezValueCredit == "632")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts632_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 43).Sum(a => a.PeriodPrice);


//                    #endregion


//                    #region credit39
//                    //   aa
//                    #endregion

//                    #region credit681

//                    if (rezValueDebit == "311/4" && rezValueCredit == "681")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 39).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "312/9-1" && rezValueCredit == "681")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 75).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "312/10-1" && rezValueCredit == "681")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 2 && a.AccountId == 73).Sum(a => a.PeriodPrice);


//                    #endregion

//                    #region debit681

//                    if (rezValueDebit == "681" && rezValueCredit == "311/7")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 133).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "681" && rezValueCredit == "36")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 55).Sum(a => a.PeriodPrice);
//                    if (rezValueDebit == "681" && rezValueCredit == "362")
//                        cells[row, col].Value = GetMSTrialBalanceByAccounts681_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.AccountId == 101).Sum(a => a.PeriodPrice);


//                    #endregion


//                    #region credit644
//                    if (rezValueDebit == "641/2" && rezValueCredit == "644")
//                        cells[row, col].Value = GetContractorVatForChess(StartDate, EndDate).Sum(a => a.CreditPeriod);
//                    #endregion

//                    #region debit644
//                    if (rezValueDebit == "644" && rezValueCredit == "631")
//                        cells[row, col].Value = GetContractorVatForChess(StartDate, EndDate).Sum(a => a.DebitVat631);
//                    #endregion

//                    #region credit372

//                    if (rezValueDebit == "201/2" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 5).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "202" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 8).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "203" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 1).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "207" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 6).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "23" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 18).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "301" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 86).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "313" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 220).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "641/2" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 38).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "644" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 26).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "91" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 19).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "92" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 21).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "91/2" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 20).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "93" && rezValueCredit == "372")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == -1 && a.PeriodAccountId == 23).Select(a => a.PeriodPayment)).FirstOrDefault();

//                    #endregion

//                    #region debit372

//                    if (rezValueDebit == "372" && rezValueCredit == "301")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.PeriodAccountId == 86).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "372" && rezValueCredit == "311/2")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.PeriodAccountId == 49).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "372" && rezValueCredit == "313")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.PeriodAccountId == 220).Select(a => a.PeriodPayment)).FirstOrDefault();
//                    if (rezValueDebit == "372" && rezValueCredit == "63")
//                        cells[row, col].Value = (GetEconomicsNeeds_ForChess(StartDate, EndDate).Where(a => a.FlagDebitCredit == 1 && a.PeriodAccountId == 16).Select(a => a.PeriodPayment)).FirstOrDefault();

//                    #endregion


//                    #region credit311
//                    if (rezValueDebit == "301" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "301").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/2" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/2").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/4" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/7" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/7").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "651" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "651").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "651/3" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "651/3").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "631" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "631").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "642" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "642").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "681" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "681").Select(a => a.Credit).FirstOrDefault();

//                    #endregion

//                    #region debit311
//                    if (rezValueDebit == "311" && rezValueCredit == "301")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "301").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "36")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "36").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "311/3")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/3").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "311/2")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/2").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "311/6")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/6").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "311/7").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "631")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "631").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "641/2")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "641/2").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "681")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "681").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "711")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "711").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311" && rezValueCredit == "733")
//                        cells[row, col].Value = Osv311.Where(a => a.PurposeAccountNum == "733").Select(a => a.Debit).FirstOrDefault();
//                    #endregion




//                    #region credit311/3
//                    if (rezValueDebit == "641" && rezValueCredit == "311/3")
//                        cells[row, col].Value = Osv311_3.Where(a => a.PurposeAccountNum == "641").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "642" && rezValueCredit == "311/3")
//                        cells[row, col].Value = Osv311_3.Where(a => a.PurposeAccountNum == "642").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "661" && rezValueCredit == "311/3")
//                        cells[row, col].Value = Osv311_3.Where(a => a.PurposeAccountNum == "661").Select(a => a.Credit).FirstOrDefault();
//                    #endregion

//                    #region debit311/3
//                    if (rezValueDebit == "311/3" && rezValueCredit == "652")
//                        cells[row, col].Value = Osv311_3.Where(a => a.PurposeAccountNum == "652").Select(a => a.Debit).FirstOrDefault();
//                    #endregion


//                    #region credit311/4
//                    if (rezValueDebit == "311/6" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "311/6").Sum(b => b.Credit);
//                    if (rezValueDebit == "311/7" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "311/7").Select(a => a.Credit).FirstOrDefault();//1 130 000
//                    if (rezValueDebit == "631" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "631").Sum(b => b.Credit);
//                    if (rezValueDebit == "641/3" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "641/3").Sum(b => b.Credit);
//                    if (rezValueDebit == "685" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "685").Sum(b => b.Credit);

//                    #endregion

//                    #region debit311/4
//                    if (rezValueDebit == "311/4" && rezValueCredit == "711")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "711").Sum(b => b.Debit);
//                    if (rezValueDebit == "311/4" && rezValueCredit == "311/2")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "311/4").Sum(b => b.Debit);
//                    if (rezValueDebit == "311/4" && rezValueCredit == "36")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "36").Sum(b => b.Debit);
//                    if (rezValueDebit == "311/4" && rezValueCredit == "681")
//                        cells[row, col].Value = Osv311_4.Where(a => a.PurposeAccountNum == "681").Sum(b => b.Debit);
//                    #endregion




//                    #region credit311/5
//                    if (rezValueDebit == "311/5" && rezValueCredit == "311/5")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "311/5").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/4" && rezValueCredit == "311/5")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "334" && rezValueCredit == "311/5")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "334").Select(a => a.Credit).FirstOrDefault();

//                    //if (rezValueDebit == "63" && rezValueCredit == "311/5")
//                    //    cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "63").Select(a => a.Credit).FirstOrDefault();

//                    if (rezValueDebit == "641/7" && rezValueCredit == "311/5")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "341/7").Select(a => a.Credit).FirstOrDefault();
//                    #endregion

//                    #region debit311/5
//                    if (rezValueDebit == "311/5" && rezValueCredit == "311/5")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "311/5").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/5" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "311").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/5" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/5" && rezValueCredit == "334")
//                        cells[row, col].Value = Osv311_5.Where(a => a.PurposeAccountNum == "334").Select(a => a.Debit).FirstOrDefault();
//                    #endregion

//                    #region credit311/6
//                    if (rezValueDebit == "311" && rezValueCredit == "311/6")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "311").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/2" && rezValueCredit == "311/6")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "311/2").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/4" && rezValueCredit == "311/6")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "334" && rezValueCredit == "311/6")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "334").Select(a => a.Credit).FirstOrDefault();

//                    //DELETE if (rezValueDebit == "63" && rezValueCredit == "311/6")
//                    //    cells[row, col].Value = GetOSVkvartal_ForChess(StartDate, EndDate, 109).Where(a => a.PurposeAccountNum == "63").Select(a => a.Credit).FirstOrDefault();

//                    #endregion

//                    #region debit311/6
//                    if (rezValueDebit == "311/6" && rezValueCredit == "311/4")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/6" && rezValueCredit == "36")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "36").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/6" && rezValueCredit == "681")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "681").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/6" && rezValueCredit == "711")
//                        cells[row, col].Value = Osv311_6.Where(a => a.PurposeAccountNum == "711").Select(a => a.Debit).FirstOrDefault(); //в феврале не работает 1 024 090,87, должно быть 0

//                    #endregion

//                    #region credit311/7
//                    if (rezValueDebit == "311" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "311").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "311/2" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "311/2").Sum(a => a.Credit);
//                    if (rezValueDebit == "311/4" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "311/4").Select(a => a.Credit).FirstOrDefault();
//                    //if (rezValueDebit == "631" && rezValueCredit == "311/7")
//                    //    cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "631").Select(a => a.Credit).FirstOrDefault();//9 854 132,95
//                    if (rezValueDebit == "641/4" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "641/4").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "641/6" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "641/6").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "651/7" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "651/7").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "681" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "681").Select(a => a.Credit).FirstOrDefault();//1 500 000
//                    if (rezValueDebit == "685" && rezValueCredit == "311/7")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "685").Select(a => a.Credit).FirstOrDefault();//220
//                    #endregion

//                    #region debit311/7
//                    if (rezValueDebit == "311/7" && rezValueCredit == "311")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "311").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/7" && rezValueCredit == "311/2")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "311/2").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/7" && rezValueCredit == "63")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "63").Select(a => a.Debit).FirstOrDefault();
//                    //if (rezValueDebit == "311/7" && rezValueCredit == "631")
//                    //    cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "631").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/7" && rezValueCredit == "681")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "681").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "311/7" && rezValueCredit == "711")
//                        cells[row, col].Value = Osv311_7.Where(a => a.PurposeAccountNum == "711").Select(a => a.Debit).FirstOrDefault();


//                    #endregion

//                    #region credit312
//                    if (rezValueDebit == "632" && rezValueCredit == "312")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "632").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "681" && rezValueCredit == "312")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "681").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "942" && rezValueCredit == "312")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "942").Select(a => a.Credit).FirstOrDefault();
//                    if (rezValueDebit == "945" && rezValueCredit == "312")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "945").Select(a => a.Credit).FirstOrDefault();

//                    #endregion

//                    #region debit312
//                    if (rezValueDebit == "312" && rezValueCredit == "312/1")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "312/1").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "312" && rezValueCredit == "312/4")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "312/4").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "312" && rezValueCredit == "334")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "334").Select(a => a.Debit).FirstOrDefault();
//                    if (rezValueDebit == "312" && rezValueCredit == "714")
//                        cells[row, col].Value = Osv312.Where(a => a.PurposeAccountNum == "714").Select(a => a.Debit).FirstOrDefault();
//                    #endregion


                    

//         /*
//                      #region credit311/4
//                      if (rezValueDebit == "311/6" && rezValueCredit == "311/4")
//                          cells[row, col].Value = GetOSVkvartal_ForChess(StartDate, EndDate, 39).Where(a => a.PurposeAccountNum == "311/6").Select(a => a.Credit).FirstOrDefault();

//                      #endregion
    
//                      #region debit311/4
//                      if (rezValueDebit == "311/4" && rezValueCredit == "36")
//                          cells[row, col].Value = GetOSVkvartal_ForChess(StartDate, EndDate, 39).Where(a => a.PurposeAccountNum == "36").Select(a => a.Debit).FirstOrDefault();
//                      #endregion
//*/
//                }
//            }
//            try
//            {
//                Workbook.SaveAs(path + "Шахматка " + ToMonthName(StartDate) + ToMonthName(EndDate) + ".xls", FileFormat.Excel8);

//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + "Шахматка " +ToMonthName(StartDate)+ ToMonthName(EndDate) + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();
//            }
//            catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
//            return true;
//        }
    

//        #endregion

//        #region RequestLog

//        public bool PrintRequstLog(List<RequestLogJournalDTO> dataSource , string path)
//        {
//            try
//            {
//                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\RequestLogTemplate.xls");
//            }
//            catch (Exception ex)
//            {
//                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\RequestLogTemplate.xls");
//            var Worksheet = Workbook.Worksheets[0];
//            var Сells = Worksheet.Cells;
//            int startWith = 4;

//            IRange cells = Worksheet.Cells;

//            DateTime maxDate = dataSource.Select(bdsm => bdsm.DateRegistration).Max().Date;
//            DateTime currentDate = maxDate;
//            DateTime minDate = new DateTime(2019,12,31);
//            while (currentDate.Year != minDate.Year)
//            {  
//                var dataByMonth = dataSource.Where(srt => srt.DateRegistration.Month == currentDate.Month && srt.DateRegistration.Year == currentDate.Year).ToList();
//                if (dataByMonth.Count == 0)
//                {
//                    currentDate = currentDate.AddMonths(-1);
//                    continue;
//                }
//                cells["A" + 2].Value = dataSource.First().DateRegistration.Year.ToString() + " " + "год";
//                cells["A" + 2].HorizontalAlignment = HAlign.Center;
//                cells["A" + 2].Font.Color = Color.Red;
//                cells["A" + 2].Font.Size = 15;
//                cells["A" + 2].Font.Bold = true;
//                cells["A" + startWith + ":K" + startWith].Merge();
//                cells["A" + startWith + ":K" + startWith].Interior.Color = System.Drawing.Color.MistyRose;
//                cells["A" + startWith + ":K" + startWith].Style.Font.Bold = true;
//                cells["A" + startWith + ":K" + startWith].Style.Font.Size = 14;
//                cells["A" + startWith + ":K" + startWith].HorizontalAlignment = HAlign.Center;
//                cells["A" + startWith].Value = RuDateAndMoneyConverter.MonthName(currentDate.Date.Month, Utils.TextCase.Nominative) +" "+ currentDate.Date.Year + " "+ "р.";

//                ++startWith;

//                foreach (var item in dataByMonth)
//                {
//                    cells["A" + startWith].Value = item.SeqNum;
//                    cells["A" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["A" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["B" + startWith].Value = item.Name;
//                    cells["B" + startWith].HorizontalAlignment = HAlign.Left;
//                    cells["B" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["C" + startWith].Value = item.InformationDoc;
//                    cells["C" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["C" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["D" + startWith].Value = item.Task;
//                    cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["D" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["E" + startWith].Value = item.Spesification;
//                    cells["E" + startWith].HorizontalAlignment = HAlign.Left;
//                    cells["E" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["F" + startWith].Value = item.DateRegistration.Date.ToShortDateString();
//                    cells["F" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["F" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["G" + startWith].Value = item.Address;
//                    cells["G" + startWith].HorizontalAlignment = HAlign.Left;
//                    cells["G" + startWith].VerticalAlignment = VAlign.Top;
//                    cells["H" + startWith].Value = item.StageRegistration;
//                    cells["D" + startWith].HorizontalAlignment = HAlign.Center;
//                    cells["D" + startWith].VerticalAlignment = VAlign.Top;

//                    if (item.OrderDate!=null)
//                        cells["I" + startWith].Value = item.OrderNumber + ", " + item.OrderDate.Value.ToShortDateString();
//                    cells["J" + startWith].Value = item.DocForTender;
//                    cells["K" + startWith].Value = item.Detals;
//                    cells["K" + startWith].HorizontalAlignment = HAlign.Left;
//                    cells["K" + startWith].VerticalAlignment = VAlign.Top;

//                    cells["A" + startWith + ":K" + startWith].Borders.LineStyle = LineStyle.Continous;
//                    cells["A" + startWith + ":K" + startWith].WrapText = true;
//                    cells["A" + startWith + ":K" + startWith].Style.Font.Size = 12;
//                    cells["A" + startWith + ":K" + startWith].Style.Font.Bold = false;

//                    if (item.ColorId != null)
//                        cells["A" + startWith].Interior.Color = System.Drawing.Color.FromName(item.Color);
//                    if (item.ColorDetals != null && item.ColorDetals != false)
//                        cells["K" + startWith].Font.Color = System.Drawing.Color.Red;

//                    ++startWith;

//                }
//                currentDate = currentDate.AddMonths(-1);
//            }

//            try
//            {

//                string fileName = String.Format("Журнал регистрации запросов потребителей");
//                Workbook.SaveAs(path + fileName + ".xls", FileFormat.Excel8);
//                Process process = new Process();
//                process.StartInfo.Arguments = "\"" + path + fileName + ".xls" + "\"";
//                process.StartInfo.FileName = "Excel.exe";
//                process.Start();

//            }

//            catch (System.IO.IOException) 
//            { 
//                MessageBox.Show("Документ уже открыто, сохраните документ и попробуйте снова!!!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); 
//            }
//            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

//            return true;
//        }

//        #endregion

        #region Mts specification

        public bool SpecificationProcess(MTSSpecificationsDTO mtsSpecification, List<MTSDetailsDTO> mtsDetailsList, List<MTSPurchasedProductsDTO> mtsBuyDetailsList, List<MTSMaterialsDTO> mtsMaterialsList, bool sortament = false)
        {
            #region summaryValues

            decimal weightOfWorkpiece = 0;
            decimal shawing = 0;
            decimal scrap = 0;

            #endregion summaryValues

            #region Detail's

            var summDetailsQuantity = mtsDetailsList.GroupBy(c => c.NOMENCLATURE_ID).Select(g => new
            {
                id = g.Key,
                summQuantity = g.Sum(c =>
                  c.PROCESSING_ID == 2 ? (c.QUANTITY * c.HEIGHT * c.WIDTH * c.NOMENCLATURESWEIGHT * 0.000001m) / c.QUANTITY_OF_BLANKS :
                  c.PROCESSING_ID == 3 ? (c.QUANTITY * c.HEIGHT * c.HEIGHT * c.NOMENCLATURESWEIGHT * 0.000001m * 0.25m * 3.1415m) / c.QUANTITY_OF_BLANKS :
                  c.PROCESSING_ID == 1 ? (c.QUANTITY * c.HEIGHT * (c.NOMENCLATURESWEIGHT == 0 ? 1 : c.NOMENCLATURESWEIGHT) * 0.001m) / c.QUANTITY_OF_BLANKS : 0),
                summQ2 = g.Sum(c => c.QUANTITY),
                color = g.Sum(c => c.CHANGES),
            }).ToList();

            var sp1 = summDetailsQuantity
               .Join(mtsDetailsList, i => i.id, y => y.NOMENCLATURE_ID, (i, y) => new { i, y })
               .OrderBy(@t1 => @t1.y.NOM_GROUP_SORTPOSITION)
               .Select(t2 => new SpecificationPrintModelDTO
               {
                   Nomenclature_id = (int)t2.y.NOMENCLATURE_ID,
                   RatioOfWaste = (decimal)(t2.y.NOM_GROUP_RATIO_OF_WASTE == 0 ? 1 : t2.y.NOM_GROUP_RATIO_OF_WASTE),
                   Guage = t2.y.GUAEGENAME,
                   Gost = t2.y.GOSTNAME,
                   Name = t2.y.NOMENCLATURESNAME,
                   Note = t2.y.NOMENCLATURESNOTE,
                   Measure = t2.y.MEASURE_NAME,
                   Price = (decimal)t2.y.NOMENCLATURESPRICE,
                   AdditCalculationQuantity = (decimal)(t2.y.NOM_GROUP_ADDIT_CALCULATION_ID == 1 ? t2.i.summQuantity * t2.y.NOM_GROUP_RATIO_OF_WASTE / t2.y.NOMENCLATURESWEIGHT
                                                       : (t2.y.NOM_GROUP_ADDIT_CALCULATION_ID == 2 ? t2.i.summQ2 : 0)),
                   AdditCalculationMeasure = t2.y.NOM_GROUP_ADDIT_CALCULATION_ID == null ? string.Empty : t2.y.NOM_GROUP_ADDIT_CALCULATION_MEASURE,
                   Quantity = (decimal)(t2.i.summQuantity * (t2.y.NOM_GROUP_RATIO_OF_WASTE == 0 ? 1 : t2.y.NOM_GROUP_RATIO_OF_WASTE)),
                   NomenclatureGroupId = (int)t2.y.NOM_GROUP_ID,
                   Weight = (decimal)t2.y.NOMENCLATURESWEIGHT,
                   SortPosition = (int)t2.y.NOM_GROUP_SORTPOSITION,
                   GuageId = (int)t2.y.GUAEGESORT,
                   Color = (int)t2.i.color
               }).ToList();


            var groupMaterial = sp1.GroupBy(gr => gr.Nomenclature_id).Select(sl => sl.FirstOrDefault()).ToList();

            var sp = new List<SpecificationPrintModelDTO>();

            //если складской работник
            //for (int i = 1; i <= 77; i++)
            //{
            //    var res = (from n in sp1
            //               where n.SortPosition == i
            //               orderby GetGuage(n.Guage)
            //               select n);

            //    sp.AddRange(res);
            //}


            for (int i = 1; i <= 77; i++)
            {
                var res = (from n in groupMaterial
                           where n.SortPosition == i
                           orderby n.Name, n.GuageId
                           select n);

                sp.AddRange(res);
            }


            foreach (var tt in sp)
            {
                weightOfWorkpiece += tt.Quantity;
                scrap += tt.NomenclatureGroupId == 1 ? tt.Quantity * tt.RatioOfWaste : 0;
            }

            #endregion

            #region PurchasedProducts

            var pProductsSum1 = new List<SpecificationPrintModelDTO>();

            pProductsSum1.AddRange(from i in mtsBuyDetailsList
                                   select new SpecificationPrintModelDTO
                                       {
                                           Id = i.ID,
                                           Nomenclature_id = (int)i.NOMENCLATURES_ID,
                                           Quantity = (decimal)(i.QUANTITY * mtsSpecification.QUANTITY),
                                           Price = (decimal)i.NOMENCLATURESPRICE * mtsSpecification.QUANTITY,
                                           Name = i.NOMENCLATURESNAME,
                                           Guage = i.GUAEGENAME,
                                           Gost = i.GOSTNAME,
                                           Measure = i.MEASURENAME,
                                           Note = i.NOMENCLATURESNOTE,
                                           SortPosition = (int)i.NOM_GROUP_SORTPOSITION
                                       });
            


            var pProductsSum2 = (from i in pProductsSum1
                                 group i by new { i.Nomenclature_id, i.Name, i.Guage, i.Gost, i.Measure, i.SortPosition, i.Note } into g
                                 orderby g.Key.SortPosition, g.Key.Name
                                 select new SpecificationPrintModelDTO
                                 {
                                     Nomenclature_id = g.Key.Nomenclature_id,
                                     Quantity = g.Sum(c => c.Quantity),
                                      Price =g.Sum(c=>c.Price),
                                     Name = g.Key.Name,
                                     Guage = g.Key.Guage,
                                     Gost = g.Key.Gost,
                                     Measure = g.Key.Measure,
                                     SortPosition = g.Key.SortPosition,
                                      Note = g.Key.Note
                                 }).ToList();

            var pProductsSum = (from i in pProductsSum2
                                orderby i.SortPosition, i.Name
                                select new SpecificationPrintModelDTO
                                {
                                    Nomenclature_id = i.Nomenclature_id,
                                    Quantity = i.Quantity,
                                    Name = i.Name,
                                    Guage = i.Guage,
                                    Gost = i.Gost,
                                    Measure = i.Measure,
                                    SortPosition = i.SortPosition,
                                    Price = i.Price,
                                    Note = i.Note
                                }).ToList();


            //join gost in mtsGost.GetAll() on mtsNom.GOST_ID equals gost.ID into gosts
            //           from gost in gosts.DefaultIfEmpty()

            #endregion purchasedProducts

            #region materials

            var materialsSum1 = new List<SpecificationPrintModelDTO>();

            #region materials step 1

            materialsSum1.AddRange(from i in mtsMaterialsList
                                   select new SpecificationPrintModelDTO
                                   {
                                       Id = i.ID,
                                       Nomenclature_id = (int)i.NOMENCLATURES_ID,
                                       Quantity = (decimal)(i.QUANTITY * mtsSpecification.QUANTITY),
                                       Price = (decimal)i.NOMENCLATURESPRICE * mtsSpecification.QUANTITY,
                                       Name = i.NOMENCLATURESNAME,
                                       Guage = i.GUAGENAME,
                                       Gost = i.GOSTNAME,
                                       Measure = i.MEASURENAME,
                                       Note = i.NOMENCLATURESNOTE,
                                       SortPosition = (int)i.NOM_GROUP_SORTPOSITION
                                   });

            #endregion materials step 1

            #region materials step 2

            var materialsSum2 = (from i in materialsSum1
                                 group i by new { i.Nomenclature_id, i.Name, i.Guage, i.Gost, i.Measure, i.SortPosition, i.Note } into g
                                 orderby g.Key.SortPosition, g.Key.Name
                                 select new SpecificationPrintModelDTO
                                 {
                                     Nomenclature_id = g.Key.Nomenclature_id,
                                     Quantity = g.Sum(c => c.Quantity),
                                     Price = g.Sum(c => c.Price),
                                     Name = g.Key.Name,
                                     Guage = g.Key.Guage,
                                     Gost = g.Key.Gost,
                                     Measure = g.Key.Measure,
                                     SortPosition = g.Key.SortPosition,
                                     Note = g.Key.Note
                                 }).ToList();


            #endregion materials step 2

            #region materials step 3

            var materialsSum = (from i in materialsSum2
                                orderby i.SortPosition, i.Name
                                select new SpecificationPrintModelDTO
                                {
                                    Nomenclature_id = i.Nomenclature_id,
                                    Quantity = i.Quantity,
                                    Name = i.Name,
                                    Guage = i.Guage,
                                    Gost = i.Gost,
                                    Measure = i.Measure,
                                    SortPosition = i.SortPosition,
                                    Price = i.Price,
                                    Note = i.Note
                                }).ToList();

            #endregion materials step 3

            #endregion materials

            if (sortament)
                sp = sp.OrderBy(srt => srt.SortPosition).ThenBy(tsrt => Utils.SortStringNumbers(tsrt.Guage)).ToList();
            //sp = sp.OrderBy(srt => srt.SortPosition).ThenBy(tsrt => Utils.SortStringNumbers(tsrt.Guage)).ToList();
            var allResults = sp.Concat(pProductsSum).Concat(materialsSum).ToList();

            scrap *= 0.07m;

            //shawing = weightOfWorkpiece - ((decimal)(mtsSpecification.WEIGHT == null ? 0 : mtsSpecification.WEIGHT - scrap));

            shawing = (decimal)weightOfWorkpiece - (decimal)mtsSpecification.WEIGHT - scrap;
            PrintTechProcessSpecification(mtsSpecification, allResults, scrap, shawing, weightOfWorkpiece, sortament);

            return true;
        }

        public bool MapTechProcess(MTSSpecificationsDTO mtsSpecification, List<MTSDetailsDTO> mtsDetailsList, bool sortByDrawing, int quantity = 1)
        {

            mtsSpecification.QUANTITY = mtsSpecification.QUANTITY * quantity;

            for (int i = 0; i < mtsDetailsList.Count; i++)
                mtsDetailsList[i].QUANTITY = mtsDetailsList[i].QUANTITY * quantity;


            if (!sortByDrawing)
                return PrintMapTechProcess(mtsSpecification, mtsDetailsList);
            else
                return PrintMapTechProcess(mtsSpecification, mtsDetailsList.OrderBy(sort => sort.DRAWING).ToList());
        }

        public decimal? GetGuage(string obj)
        {
            decimal a = 0, b = 0, c = 0;

            string result = "";
            for (int i = 0; i < obj.Length; i++)
            {
                if (result.Length > 0)
                {
                    if (obj[i] == ',' || obj[i] == '.')
                    {
                        result += ',';
                        continue;
                    }

                    if (obj[i] == 'x' || obj[i] == 'X' || obj[i] == 'х' || obj[i] == 'Х')
                    {
                        char h = result[result.Length - 1];

                        if (h != 'x' || h != 'X' || h != 'х' || h != 'Х')
                        {
                            if (result.Length - 1 != i)
                            {
                                result += 'x';
                                continue;
                            }
                        }
                    }
                }

                if (Char.IsDigit(obj[i]))
                    result += obj[i];
            }

            string a1 = "";
            string b1 = "";
            string c1 = "";
            int step = 0;

            for (int i = 0; i < result.Length; i++)
            {
                char z = result[i];
                if (z != 'x')
                {
                    if (step == 0)
                        a1 += z;

                    if (step == 1)
                        b1 += z;

                    if (step == 2)
                        c1 += z;
                }
                else { step++; }
            }

            if (a1.Length != 0)
                a = Convert.ToDecimal(a1);

            if (b1.Length != 0)
                b = Convert.ToDecimal(b1);

            if (c1.Length != 0)
                c = Convert.ToDecimal(c1);

            decimal? n = a + b + c;

            if (n == null)
                return null;

            return n;
        }

        //печать спецификации
        public bool PrintTechProcessSpecification(MTSSpecificationsDTO mtsSpecification, List<SpecificationPrintModelDTO> dataSource, decimal scrap, decimal shawing, decimal weightOfWorkpiece, bool sortament = false)
        {
            

            if (!Directory.Exists(Utils.printFolderUri))
            {
                Directory.CreateDirectory(Utils.printFolderUri);
            }

            try
            {
                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedSpecificationReport.xls");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            

            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedSpecificationReport.xls");
            var Worksheet = Workbook.Worksheets[0];
            var Сells = Worksheet.Cells;

            Worksheet.PageSetup.LeftHeader = "\n Изделие: " + mtsSpecification.NAME;
            Worksheet.PageSetup.RightHeader = "\n Чертеж: " + mtsSpecification.DRAWING;

            IWorkbookSet workbookSet = Factory.GetWorkbookSet();
            workbookSet.ReadVBA = true;

            IRange cells = Worksheet.Cells;
            //mtsSpecification.COMPILATION_NAMES = mtsSpecification.COMPILATION_NAMES.Replace(";", ";\n");
            //cells["B" + 2].Value = "Изделие: "+ mtsSpecification.NAME + "\n" + mtsSpecification.COMPILATION_NAMES;

            cells["A2"].Value = "Изделие:" + mtsSpecification.NAME;

            if (mtsSpecification.COMPILATION_NAMES == null)
                cells["A2"].Value = "Изделие:" + mtsSpecification.NAME;
            else
            {
                int namesLength = 0;

                //string compilationName = "Изделия:" + spec.NAME + " \n";
                string compilationName = "";
                var arr = mtsSpecification.COMPILATION_NAMES.ToCharArray();
                foreach (var a in arr)
                {
                    if (a != ';')
                    {
                        compilationName += a;
                    }
                    else
                    {
                        if (namesLength != arr.Count() - 1)
                            compilationName += " \n";
                    }
                    namesLength++;
                }
                cells["Q3"].Value = compilationName;
            }

            cells["E1"].Value = "Составлена " + ((DateTime)mtsSpecification.CREATION_DATE).ToShortDateString();
            cells["E2"].Value = mtsSpecification.DRAWING;
            cells["A3"].Formula = "=Q3";


            if (mtsSpecification.COMPILATION_DRAWINGS == null)
                cells["E2"].Value = mtsSpecification.DRAWING;
            else
            {
                var arrQuantites = mtsSpecification.COMPILATION_QUANTITIES.ToCharArray();

                List<string> massQuantity = new List<string>();

                string h = "";
                int j = 0;

                foreach (var q in arrQuantites)
                {
                    if (q != ';')
                    {
                        h += q;

                        if (j == arrQuantites.Count() - 1)
                            massQuantity.Add(h);
                    }
                    else
                    {
                        massQuantity.Add(h);
                        h = "";
                    }
                    j++;
                }

                //string compilationDrawing = spec.DRAWING + " \n";
                string compilationDrawing = "";
                var drawingArray = mtsSpecification.COMPILATION_DRAWINGS.ToCharArray();

                int dictCount = 0;
                int drawingLength = 0;

                foreach (var a in drawingArray)
                {
                    if (a != ';')
                    {
                        compilationDrawing += a;
                    }
                    else
                    {
                        if (drawingLength == drawingArray.Count() - 1)
                            compilationDrawing += " -" + massQuantity[dictCount] + " шт.";
                        else
                            compilationDrawing += " -" + massQuantity[dictCount] + " шт." + " \n";

                        dictCount++;
                    }

                    if (drawingLength == drawingArray.Count() - 1)
                    {
                        break;
                    }

                    drawingLength++;
                }
                cells["E3"].Value = compilationDrawing;

            }

            decimal allQuantity = 0;
            int startWith = 6;
            int numbering = 1;

            string firstName = dataSource.First().Name;

            List<SpecificationPrintModelDTO> dataSourceOrderList = new List<SpecificationPrintModelDTO>();

            //if (sortament)
            //    dataSourceOrderList = dataSource.OrderBy(srt => srt.Guage).ToList();
            //else
            //    dataSourceOrderList = dataSource.ToList();

            dataSourceOrderList = dataSource.ToList();

            foreach (var dat in dataSourceOrderList)
            {

                if (dat.Color >= 1)
                {
                    cells["B" + (startWith) + ":I" + startWith].Interior.Color = Color.FromArgb(169, 169, 169);
                    //cells["B" + (startWith) + ":I" + startWith].Interior.Color = Color.Aquamarine;
                    firstName = firstName == null ? "" : firstName;
                }

                if (startWith > 5 && dat.Name.Trim().ToLower() != firstName.Trim().ToLower())
                    cells["B" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeTop].LineStyle = LineStyle.Continous;

                if (startWith > 6 && dat.Name.Trim().ToLower() == firstName.Trim().ToLower())
                {
                    cells["A" + startWith].Value = numbering;
                    cells["B" + startWith].Value = string.Empty;

                }
                else
                {
                    cells["A" + startWith].Value = numbering;


                    if (dat.Name.Length > 100)
                        cells["B" + startWith].Rows.AutoFit();

                    cells["B" + startWith].Value = dat.Name == null ? "" : dat.Name.Trim();
                    firstName = dat.Name;
                }

                cells["A" + startWith].VerticalAlignment = VAlign.Top;
                cells["B" + startWith].VerticalAlignment = VAlign.Top;
                cells["C" + startWith].VerticalAlignment = VAlign.Top;
                cells["D" + startWith].VerticalAlignment = VAlign.Top;
                cells["E" + startWith].VerticalAlignment = VAlign.Top;
                cells["F" + startWith].VerticalAlignment = VAlign.Top;
                cells["G" + startWith].VerticalAlignment = VAlign.Top;
                cells["H" + startWith].VerticalAlignment = VAlign.Top;
                cells["I" + startWith].VerticalAlignment = VAlign.Top;

                cells["C" + startWith].Value = dat.Guage;
                cells["C" + startWith].HorizontalAlignment = HAlign.Center;

                cells["D" + startWith].Value = dat.Gost == "нет" ? dat.Note : dat.Gost;

                cells["D" + startWith].HorizontalAlignment = HAlign.Center;

                cells["E" + startWith].Value = dat.Measure;

                cells["F" + startWith].Value = dat.Quantity;
                allQuantity += dat.Quantity;

                cells["G" + startWith].Value = dat.Price;

                cells["I" + startWith].Value = dat.Note;

                cells["H" + startWith].Formula = "=F" + (startWith) + "*G" + (startWith);

                cells["A" + startWith].RowHeight = 28;

                if (dat.AdditCalculationQuantity != 0)
                {
                    cells["E" + startWith].VerticalAlignment = VAlign.Top;
                    cells["F" + startWith].VerticalAlignment = VAlign.Top;

                    startWith++;
                    cells["E" + startWith].Value = dat.AdditCalculationMeasure;
                    cells["F" + startWith].Value = dat.AdditCalculationQuantity;
                    //cells["A" + startWith + ":" + "I" + startWith].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous;
                    //cells["A" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;

                    cells["A" + (startWith - 1) + ":A" + startWith].Borders[BordersIndex.EdgeLeft].LineStyle = LineStyle.Continous;
                    cells["A" + (startWith - 1) + ":A" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;

                    cells["B" + (startWith - 1) + ":B" + startWith].Borders[BordersIndex.EdgeLeft].LineStyle = LineStyle.Continous;
                    cells["B" + (startWith - 1) + ":B" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["C" + (startWith - 1) + ":C" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["D" + (startWith - 1) + ":D" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["E" + (startWith - 1) + ":E" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["F" + (startWith - 1) + ":F" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["G" + (startWith - 1) + ":G" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["H" + (startWith - 1) + ":H" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Continous;
                    cells["H" + (startWith - 1) + ":I" + startWith].Borders[BordersIndex.EdgeRight].LineStyle = LineStyle.Dash;
                }
                else
                {
                    cells["A" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["B" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["C" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["D" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["E" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["F" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["G" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["H" + startWith].Borders.LineStyle = LineStyle.Continous;
                    cells["I" + startWith].Borders.LineStyle = LineStyle.Continous;
                }

                startWith++;
                numbering++;
            }

            //итог по стобцу сумма
            startWith++;
            cells["D" + startWith].RowHeight = 16;
            cells["D" + startWith].HorizontalAlignment = HAlign.Left;
            cells["F" + startWith].HorizontalAlignment = HAlign.Right;
            cells["D" + startWith + ": E" + startWith].Merge();
            cells["D" + startWith].Value = "Итого материалов";
            cells["D" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Dash;

            for (int i = 0; i < dataSourceOrderList.Count; i++)
            {
                cells["H" + startWith].Formula = "=SUM(H" + 5 + ":H" + (startWith - 2) + ")";
            }

            startWith++;
            cells["D" + startWith].RowHeight = 16;
            cells["D" + startWith].HorizontalAlignment = HAlign.Left;
            cells["F" + startWith].HorizontalAlignment = HAlign.Right;
            cells["D" + startWith + ": E" + startWith].Merge();
            cells["D" + startWith].Value = "Чистый вес";
            cells["F" + startWith].Value = mtsSpecification.WEIGHT;
            cells["D" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Dash;

            startWith++;
            cells["D" + startWith].RowHeight = 16;
            cells["D" + startWith].HorizontalAlignment = HAlign.Left;
            cells["F" + startWith].HorizontalAlignment = HAlign.Right;
            cells["D" + startWith + ": E" + startWith].Merge();
            cells["D" + startWith].Value = "Вес заготовок";
            cells["F" + startWith].Value = weightOfWorkpiece;

            weightOfWorkpiece = weightOfWorkpiece == 0 ? 1 : weightOfWorkpiece;

            cells["H" + startWith].Value = "k=" + Math.Round((decimal)mtsSpecification.WEIGHT / weightOfWorkpiece, 3);
            cells["D" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Dash;

            startWith++;
            cells["D" + startWith].RowHeight = 16;
            cells["D" + startWith].HorizontalAlignment = HAlign.Left;
            cells["F" + startWith].HorizontalAlignment = HAlign.Right;
            cells["D" + startWith + ": E" + startWith].Merge();
            cells["D" + startWith].Value = "Стружка";
            cells["F" + startWith].Value = shawing;
            cells["H" + startWith].Value = Math.Round(shawing * 0.03m);
            cells["D" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Dash;

            startWith++;
            cells["D" + startWith].RowHeight = 16;
            cells["D" + startWith].HorizontalAlignment = HAlign.Left;
            cells["F" + startWith].HorizontalAlignment = HAlign.Right;
            cells["D" + startWith + ": E" + startWith].Merge();
            cells["D" + startWith].Value = "Лом";
            cells["F" + startWith].Value = scrap;

            var val = scrap * 0.09m;
            cells["H" + startWith].Value = Math.Round(val);
            cells["D" + (startWith) + ":I" + startWith].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Dash;

            startWith += 2;
            cells["B" + startWith].Value = "Начальник ТО______________";
            cells["B" + startWith].RowHeight = 20;

            startWith++;
            cells["B" + startWith].Value = "Составил___________________";
            cells["B" + startWith].RowHeight = 28;
            cells["C" + startWith + ": D" + startWith].Merge();
            cells["C" + startWith].Value = mtsSpecification.AUTHORIZATION_USERS_NAME == null ? "" : mtsSpecification.AUTHORIZATION_USERS_NAME;
            cells["C" + startWith].HorizontalAlignment = HAlign.Left;
            cells["E" + (startWith - 1) + ": I" + (startWith - 1)].Merge();
            cells["E" + (startWith - 1)].Value = "Экономист________________";

            startWith++;
            cells["E" + (startWith - 1)].Value = "Дата печати " + DateTime.Now;
            cells["E" + (startWith - 1) + ": I" + (startWith - 1)].Merge();
            cells["E" + (startWith - 1)].RowHeight = 20;


            try
            {
                string fileName = String.Format("Спецификация на изделие  " + mtsSpecification.NAME);
                Workbook.SaveAs(Utils.printFolderUri + fileName + ".xls", FileFormat.XLS97);
                Process process = new Process();
                process.StartInfo.Arguments = "\"" + Utils.printFolderUri + fileName + ".xls" + "\"";
                process.StartInfo.FileName = "Excel.exe";
                process.Start();

            }

            catch (System.IO.IOException)
            {
                MessageBox.Show("Документ уже открыто, сохраните документ и попробуйте снова!!!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

            return true;
        }

        //печать карты техпроцесса
        public bool PrintMapTechProcess(MTSSpecificationsDTO mtsSpecification, List<MTSDetailsDTO> dataSource)
        {
            if (!Directory.Exists(Utils.printFolderUri))
            {
                Directory.CreateDirectory(Utils.printFolderUri);
            }

            try
            {
                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedProcessMapReport.xls");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedProcessMapReport.xls");
            var Worksheet = Workbook.Worksheets[0];
            var Сells = Worksheet.Cells;
            int startWith = 4;

            IRange cells = Worksheet.Cells;

            cells["A1"].Value = "Карта Маршрутного технологического процесса";
            cells["A1"].HorizontalAlignment = HAlign.Left;
            cells["A1"].Font.Bold = true;
            cells["A2"].Formula = "=Q2";
            

            if (mtsSpecification.COMPILATION_NAMES == null || mtsSpecification.COMPILATION_NAMES == "")
                cells["Q2"].Value = "Изделие:" + mtsSpecification.NAME;
            else
            {
                string compilationName = "Изделиe:" + mtsSpecification.NAME + " \n";
                var arr = mtsSpecification.COMPILATION_NAMES.ToCharArray();
                foreach (var a in arr)
                {
                    if (a != ';')
                        compilationName += a;
                    else
                        compilationName += " \n";
                }
                cells["Q2"].Value = compilationName;
            }

            //---------------------------------------------------------

            cells["E1"].Value = "Составлена " + ((DateTime)mtsSpecification.CREATION_DATE).ToShortDateString();
            cells["E2"].Value = mtsSpecification.DRAWING;

            if (mtsSpecification.COMPILATION_DRAWINGS == null)
                cells["E2"].Value = "Чертеж: " + mtsSpecification.DRAWING;
            else
            {
                var arrQuantites = mtsSpecification.COMPILATION_QUANTITIES.ToCharArray();

                List<string> massQuantity = new List<string>();

                string h = "";
                int j = 0;

                foreach (var q in arrQuantites)
                {
                    if (q != ';')
                    {
                        h += q;

                        if (j == arrQuantites.Count() - 1)
                            massQuantity.Add(h);
                    }
                    else
                    {
                        massQuantity.Add(h);
                        h = "";
                    }
                    j++;
                }

                string compilationDrawing = "Чертеж:" + mtsSpecification.DRAWING + " \n";
                var drawingArray = mtsSpecification.COMPILATION_DRAWINGS.ToCharArray();

                int dictCount = 0;
                int drawingLength = 0;

                foreach (var a in drawingArray)
                {
                    if (a != ';')
                    {
                        compilationDrawing += a;
                    }
                    else
                    {
                        if (drawingLength == drawingArray.Count() - 1)
                            compilationDrawing += " -" + massQuantity[dictCount] + " шт.";
                        else
                            compilationDrawing += " -" + massQuantity[dictCount] + " шт." + " \n";

                        dictCount++;
                    }

                    if (drawingLength == drawingArray.Count() - 1)
                        break;

                    drawingLength++;
                }
                cells["E2"].Value = compilationDrawing;
            }
            //---------------------------------------------------------
            //var dataSource = dataSource.ToList();

            int autoIncrement = 1;
            var isFoundChanges1 = dataSource.FirstOrDefault(x => x.CHANGES == 1);
            foreach (var dat in dataSource)
            {
                if (((isFoundChanges1 != null) && (dat.CHANGES == 1)) || ((isFoundChanges1 == null) && (dat.CHANGES == 0)))
                {
                    cells["A" + (startWith)].RowHeight = 23;
                    cells["A" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["A" + (startWith)].Value = autoIncrement;
                    cells["A" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["B" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["B" + (startWith)].Value = dat.NAME;
                    cells["B" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["C" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["C" + (startWith)].Value = dat.DRAWING;
                    cells["C" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["D" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["D" + (startWith)].Value = dat.QUANTITY;
                    cells["D" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["E" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["E" + (startWith)].Value = dat.NOMENCLATURESNAME + " " + dat.GUAEGENAME;
                    cells["E" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["F" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["F" + (startWith)].Value = dat.GOSTNAME;
                    cells["F" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["G" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["G" + (startWith)].Value = dat.WIDTH == 0 ?
                                                dat.HEIGHT.ToString() :
                                                dat.HEIGHT + "*" + dat.WIDTH;

                    cells["G" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    cells["H" + (startWith)].VerticalAlignment = VAlign.Center;
                    cells["H" + (startWith)].Value = dat.QUANTITY_OF_BLANKS;
                    cells["H" + (startWith)].Borders.LineStyle = LineStyle.Continous;

                    autoIncrement++;
                    startWith++;
                }
            }

            startWith += 2;
            cells["A" + startWith].Value = "Начальник ТО______________";
            cells["A" + startWith].RowHeight = 20;

            startWith++;
            cells["A" + startWith].Value = "Составил___________________" + mtsSpecification.AUTHORIZATION_USERS_NAME;
            cells["A" + startWith].RowHeight = 20;

            startWith++;
            cells["A" + startWith].Value = "Дата печати " + DateTime.Now;
            cells["A" + startWith].RowHeight = 20;



            try
            {
                string fileName = String.Format("Карта технологического процесса проекта " + mtsSpecification.NAME);
                Workbook.SaveAs(Utils.printFolderUri + fileName + ".xls", FileFormat.Excel8);
                Process process = new Process();
                process.StartInfo.Arguments = "\"" + Utils.printFolderUri + fileName + ".xls" + "\"";
                process.StartInfo.FileName = "Excel.exe";
                process.Start();

            }

            catch (System.IO.IOException)
            {
                MessageBox.Show("Документ уже открыто, сохраните документ и попробуйте снова!!!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

            return true;
        }

        //печать карты маршрутного техпроцесса
        public bool PrintMapRouteTechProcess(MTSSpecificationsDTO mtsSpecification, List<MTSDetailsDTO> dataSource)
        {
            if (!Directory.Exists(Utils.printFolderUri))
            {
                Directory.CreateDirectory(Utils.printFolderUri);
            }

            try
            {
                Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedProcessMapLongReport.xls");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\MtsStartedProcessMapLongReport.xls");
            var Worksheet = Workbook.Worksheets[0];
            var Сells = Worksheet.Cells;
            int startWith = 4;

            IRange cells = Worksheet.Cells;

            if (mtsSpecification.COMPILATION_NAMES == null)
                cells["B2"].Value = "Изделие:" + mtsSpecification.NAME;
            else
            {
                int namesLength = 0;
                string compilationName = "";
                var arr = mtsSpecification.COMPILATION_NAMES.ToCharArray();
                foreach (var a in arr)
                {
                    if (a != ';')
                    {
                        compilationName += a;
                    }
                    else
                    {
                        if (namesLength != arr.Count() - 1)
                            compilationName += " \n";
                    }
                    namesLength++;
                }
                cells["B2"].Value = compilationName;
            }

            for (int i = 0; i < dataSource.Count(); i++)
            {
                cells["A" + startWith].Value = (i+1);
                cells["A" + startWith].HorizontalAlignment = HAlign.Left;
                cells["A" + startWith].VerticalAlignment = VAlign.Center;
                cells["B" + startWith].Value = dataSource[i].NAME;
                cells["B" + startWith].HorizontalAlignment = HAlign.Left;
                cells["B" + startWith].VerticalAlignment = VAlign.Center;
                cells["C" + startWith].Value = dataSource[i].DRAWING;
                cells["C" + startWith].HorizontalAlignment = HAlign.Left;
                cells["C" + startWith].VerticalAlignment = VAlign.Center;
                cells["D" + startWith].Value = dataSource[i].QUANTITY;
                cells["D" + startWith].HorizontalAlignment = HAlign.Left;
                cells["D" + startWith].VerticalAlignment = VAlign.Center;
                cells["E" + startWith].Value = dataSource[i].NOMENCLATURESNAME + " " + dataSource[i].GUAEGENAME;
                cells["E" + startWith].HorizontalAlignment = HAlign.Left;
                cells["E" + startWith].VerticalAlignment = VAlign.Center;
                cells["F" + startWith].Value = dataSource[i].GOSTNAME;
                cells["F" + startWith].HorizontalAlignment = HAlign.Left;
                cells["F" + startWith].VerticalAlignment = VAlign.Center;

                string detailPeram="";

                if(dataSource[i].WIDTH!= 0 && dataSource[i].HEIGHT!= 0)
                    detailPeram = dataSource[i].HEIGHT.ToString() + "*" + dataSource[i].WIDTH.ToString();
                else
                    detailPeram = dataSource[i].HEIGHT.ToString();

                cells["G" + startWith].Value = detailPeram;
                cells["G" + startWith].HorizontalAlignment = HAlign.Left;
                cells["G" + startWith].VerticalAlignment = VAlign.Center;
                cells["H" + startWith].Value = dataSource[i].QUANTITY_OF_BLANKS;
                cells["H" + startWith].HorizontalAlignment = HAlign.Left;
                cells["H" + startWith].VerticalAlignment = VAlign.Center;
                cells["A" + startWith + ":" + "X" + startWith].Borders.LineStyle = SpreadsheetGear.LineStyle.Continous; ;
                startWith++;
                
            }

            startWith+=2;
            cells["A" + startWith].Value = "Начальник ТО______________";
            startWith++;
            cells["A" + startWith].Value = "Составил___________________" + mtsSpecification.AUTHORIZATION_USERS_NAME;
            startWith++;
            cells["A" + startWith].Value = "Дата печати " + DateTime.Now.ToString();
            startWith++;

            try
            {
                string fileName = String.Format("Карта Маршрутного технолгического процесса проекта " + mtsSpecification.NAME);
                Workbook.SaveAs(Utils.printFolderUri + fileName + ".xls", FileFormat.Excel8);
                Process process = new Process();
                process.StartInfo.Arguments = "\"" + Utils.printFolderUri + fileName + ".xls" + "\"";
                process.StartInfo.FileName = "Excel.exe";
                process.Start();

            }

            catch (System.IO.IOException)
            {
                MessageBox.Show("Документ уже открыто, сохраните документ и попробуйте снова!!!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не знайдено пакет програм Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

            return true;
        }

        #endregion

        //#region Packing list

        //public void CreatePackingListTemplate(PackingListsJournalDTO source)
        //{
        //    try
        //    {
        //        Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\PackingListTemplate.xls");
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("Не знайдено шаблон документа!\n" + ex.Message, "Увага", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //        return;
        //    }

        //    var Workbook = Factory.GetWorkbook(GeneratedReportsDir + @"\Templates\PackingListTemplate.xls");
        //    var Worksheet = Workbook.Worksheets[0];
        //    var Сells = Worksheet.Cells;
        //    IRange cells = Worksheet.Cells;

        //    string agreementShortName = source.AgreementName.Substring(0, source.AgreementName.IndexOf("від") > 0 ? source.AgreementName.IndexOf("від") : source.AgreementName.IndexOf("от"));


        //    Сells["G4"].Value = source.PackingNumber;
        //    Сells["A8"].Value = source.ContractorName;
        //    Сells["A9"].Value = agreementShortName;
        //    Сells["H7"].Value = source.OrderNumber;
        //    Сells["H7"].HorizontalAlignment = HAlign.Left;
        //    Сells["H8"].Value = "м."+source.CityName;
        //    Сells["H8"].HorizontalAlignment = HAlign.Left;
        //    Сells["H9"].Value = source.PackingDate.ToShortDateString();


        //    try
        //    {
        //        string fileName = "Комплектационный лист № " + source.PackingNumber;
    
        //            Workbook.SaveAs(GeneratedReportsDir + fileName + ".xls", FileFormat.Excel8);
        //            Process process = new Process();
        //            process.StartInfo.Arguments = "\"" + GeneratedReportsDir + fileName + ".xls" + "\"";
        //            process.StartInfo.FileName = "Excel.exe";
        //            process.Start();
                
        //    }

        //    catch (System.IO.IOException) { MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
        //    catch (System.ComponentModel.Win32Exception) { MessageBox.Show("Не найден Microsoft Excel!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning); }

        //}

        //#endregion

        #region Setting

        private static string HomePath = Environment.GetFolderPath(Environment.SpecialFolder.Personal); //Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
        private readonly string _generatedReportsDir = HomePath;// + @"\Отчеты\По командировке";

        private void InsertLines(int lineNum)
        {
            int iCount;
            for (iCount = 1; iCount <= lineNum; iCount++)
            {
                word.Selection.TypeParagraph();
            }
        }

        private bool SaveAsXls(IWorkbook workbook, string path, string filename)
        {
            try
            {
                if (!Directory.Exists(_generatedReportsDir + path))
                {
                    Directory.CreateDirectory(_generatedReportsDir + path);
                }
                var name = _generatedReportsDir + path + filename + ".xls";
                workbook.SaveAs(name, FileFormat.Excel8);
                return true;
            }
            catch (IOException)
            {
                //MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
        }

        private bool SaveAsDoc(string path, string filename)
        {
            try
            {
                if (!Directory.Exists(_generatedReportsDir + path))
                {
                    Directory.CreateDirectory(_generatedReportsDir + path);
                }
                var name = _generatedReportsDir + path + filename + ".doc";
                document.SaveAs(name);
                return true;
            }
            catch (IOException)
            {
                //MessageBox.Show("Документ уже открыт!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
        }

        private void RunXls(string path, string filename)
        {
            try
            {
                var name = _generatedReportsDir + path + filename + ".xls";
                var process = new Process();
                process.StartInfo.Arguments = "\"" + name + "\"";
                process.StartInfo.FileName = "Excel.exe";
                process.Start();
            }
            catch (System.ComponentModel.Win32Exception)
            {
                //MessageBox.Show("Не найден Microsoft Excel!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RunDoc(string filename)
        {
            try
            {
                var name = _generatedReportsDir + filename + ".doc";
                var process = new Process { StartInfo = { Arguments = "\"" + name + "\"", FileName = "Word.exe" } };
                process.Start();
            }
            catch (System.ComponentModel.Win32Exception)
            {
                //MessageBox.Show("Не найден Microsoft Excel!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private string[] vsS =
            {
                "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
                "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",

                "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK",
                "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV",
                "AW", "AX", "AY", "AZ",

                "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM",
                "BN", "BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY", "BZ",

                "CA", "CB", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CJ", "CK", "CL", "CM",
                "CN", "CO", "CP", "CQ", "CR", "CS", "CT", "CU", "CV", "CW", "CX", "CY", "CZ"
            };

        private void SetPageBreak(SpreadsheetGear.IWorksheet worksheet, int row, int col)
        {
            worksheet.Cells[row, col].PageBreak = SpreadsheetGear.PageBreak.Manual;
        }

        private string SetFormula(int cell1, int row1, int cell2, int row2, string formula, bool needEq = true)
        {
            return (needEq == true ? "=" : "") + formula + "(" + vsS[cell1] + Convert.ToString(row1) + ":" + vsS[cell2] + Convert.ToString(row2) + ")";
        }

        private string SetFormula(string cell1, int row1, string cell2, int row2, string formula, bool needEq = true)
        {
            return (needEq == true ? "=" : "") + formula + "(" + cell1 + Convert.ToString(row1) + ":" + cell2 + Convert.ToString(row2) + ")";
        }

        private void PrintSignatures(SpreadsheetGear.IRange cells, int startPosition)
        {
            cells["A" + startPosition].Value = "Виконавець:";
            cells["A" + startPosition].HorizontalAlignment = HAlign.Right;
            cells["B" + startPosition + ":C" + startPosition].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
            cells["E" + startPosition + ":F" + startPosition].Borders[BordersIndex.EdgeBottom].LineStyle = LineStyle.Continous;
            cells["B" + (startPosition + 1) + ":C" + (startPosition + 1)].Merge();
            cells["E" + (startPosition + 1) + ":F" + (startPosition + 1)].Merge();
            cells["B" + (startPosition + 1) + ":C" + (startPosition + 1)].Value = "(ПІБ, посада)";
            cells["E" + (startPosition + 1) + ":F" + (startPosition + 1)].Value = "(підпис)";
            cells["B" + (startPosition + 1) + ":C" + (startPosition + 1)].HorizontalAlignment = HAlign.Center;
            cells["E" + (startPosition + 1) + ":F" + (startPosition + 1)].HorizontalAlignment = HAlign.Center;
        }

        #endregion Setting

        public void Dispose()
        {
            Database.Dispose();
        }
    }
}

